/*! For license information please see main.360c756cd60f3c13517e.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatetraewarren("main",{"./app/components/Canvas/Controller/pages/Work/Element/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var i=s("./node_modules/three/build/three.module.js"),a=s("./node_modules/gsap/index.js");Object(function(){var e=new Error("Cannot find module 'shaders/work/element/vertex.glsl'");throw e.code="MODULE_NOT_FOUND",e}()),Object(function(){var e=new Error("Cannot find module 'shaders/work/element/fragment.glsl'");throw e.code="MODULE_NOT_FOUND",e}());class r{constructor({element:e,index:t,template:s,link:i,geometry:a,scene:r,screen:h,viewport:n}){this.element=e,this.index=t,this.template=s,this.geo=a,this.scene=r,this.screen=h,this.viewport=n,this.createMaterial(),this.createTexture(),this.createMesh(),this.createBounds(),this.createAnimations()}createMaterial(){this.material=new i.ShaderMaterial({vertexShader:Object(function(){var e=new Error("Cannot find module 'shaders/work/element/vertex.glsl'");throw e.code="MODULE_NOT_FOUND",e}()),fragmentShader:Object(function(){var e=new Error("Cannot find module 'shaders/work/element/fragment.glsl'");throw e.code="MODULE_NOT_FOUND",e}()),uniforms:{tMap:{value:null},u_alpha:{value:0},u_imageSize:{value:[0,0]},u_planeSize:{value:[0,0]},u_state:{value:0},u_viewportSize:{value:[this.viewport.width,this.viewport.height]}},transparent:!0})}createTexture(){let e=this.element.getAttribute("data-src");this.texture=window.IMAGE_TEXTURES[e],this.material.uniforms.tMap.value=this.texture,this.material.uniforms.u_imageSize.value=[this.texture.source.data.naturalWidth,this.texture.source.data.naturalHeight]}createMesh(){this.plane=new i.Mesh(this.geo,this.material),this.scene.add(this.plane)}createBounds(){this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY(),this.plane.material.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y]}createAnimations(){this.onAlphaChange=a.default.fromTo(this.material.uniforms.u_alpha,{value:0},{value:1,delay:.5,paused:!0})}show(){this.onAlphaChange.play()}hide(){this.onAlphaChange.reverse()}onResize(e){if(e){const{screen:t,viewport:s}=e;t&&(this.screen=t),s&&(this.viewport=s,this.plane.material.uniforms.u_viewportSize.value=[this.viewport.width,this.viewport.height])}this.createBounds()}updateScale(){this.plane.scale.x=this.viewport.width*this.bounds.width/this.screen.width,this.plane.scale.y=this.viewport.height*this.bounds.height/this.screen.height,this.plane.material.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y]}updateX(){this.x=this.bounds.left/this.screen.width*this.viewport.width,this.plane.position.x=-this.viewport.width/2+this.plane.scale.x/2+this.x}updateY(){this.y=this.bounds.top/this.screen.height*this.viewport.height,this.plane.position.y=this.viewport.height/2-this.plane.scale.y/2-this.y}update(){this.bounds&&(this.updateScale(),this.updateX(),this.updateY())}}},"./app/components/Canvas/Controller/pages/Work/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var i=s("./node_modules/three/build/three.module.js"),a=s("./app/components/Canvas/Controller/pages/Work/Element/index.js");class r{constructor({scene:e,screen:t,viewport:s,geo:a}){this.scene=e,this.screen=t,this.viewport=s,this.geo=a,this.group=new i.Group,this.createElements(),this.createImages(),this.onResize(),this.scene.add(this.group),this.show()}createElements(){this.home_element=document.querySelector(".work"),this.home_wrapper=document.querySelector(".work__wrapper"),this.elements=document.querySelectorAll(".work__gallery__image__figure__image")}createImages(){this.elems=Array.from(this.elements,((e,t)=>new a.default({element:e,index:t,template:this.template,geometry:this.geo,scene:this.group,screen:this.screen,viewport:this.viewport})))}onResize(){this.elems.forEach((e=>{e.onResize({screen:this.screen,viewport:this.viewport})}))}show(){this.elems.forEach((e=>{e.show()}))}hide(){this.elems.forEach((e=>{e.hide()}))}update(e){const t=e.current/this.screen.height*this.viewport.height;this.group.position.y=t,this.elems.forEach((e=>{e.update()}))}destroy(){this.scene.remove(this.group)}}}},(function(e){e.h=()=>"3ca9778ec697cab7b8f1"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,