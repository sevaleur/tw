/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.work__visualiser__box__inner, .work__visualiser__box__cover, .work__gallery__image__figure__image, .work__gallery__image__link, .work__wrapper, .home__about__right__large__figure__image, .home__about__left__small__figure__image, .home__about__left__large__figure__image, .home__about__info__link__url__icon__media, .home__showcase__gallery__link__work__icon__media, .home__showcase__gallery__image__link, .home__showcase__gallery__image__figure__image, .home__header__portrait__figure__image, .preloader, .content, body, html, .work, .home {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

/* Recommended styles for Splitting */
.splitting .char {
  display: inline-block;
  overflow: hidden;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */
.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);
  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);
  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));
  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));
  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));
  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );
  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));
  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}

.splitting.cells img {
  width: 100%;
  display: block;
}

@supports (display: grid) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }
  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template: repeat(var(--row-total), 1fr)/repeat(var(--col-total), 1fr);
  }
  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }
  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    /* Size to fit the whole container size */
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }
  /* Helper variables for advanced effects */
  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);
    /* Offset from center, positive & negative */
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));
    /* Absolute distance from center, only positive */
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );
    /* Absolute distance from center, only positive */
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}
.work, .home {
  opacity: 0;
  visibility: hidden;
}

.home__showcase__title__text {
  font-family: "Butler";
  font-size: 1.8rem;
}

.home__showcase__gallery__image__title__text, .home__showcase__gallery__image__title__svg {
  font-family: "Butler";
  font-size: 4rem;
}

.work__titles__title__text {
  font-family: "Butler";
  font-size: 6rem;
}

.home__about__title__text, .footer__title__text, .preloader__number__text {
  font-family: "Butler";
  font-size: 10rem;
}

.home__header__btmTitle__text, .home__header__topTitle__text {
  font-family: "Butler";
  font-size: 20rem;
}

body {
  font-family: "Satoshi-Regular";
  font-size: 1.6rem;
}

.home__about__info__link__url__text, .home__showcase__gallery__link__work__text {
  position: relative;
  overflow: hidden;
  display: inline-block;
  vertical-align: top;
}

.home__about__info__link__url__text:after, .home__showcase__gallery__link__work__text:after {
  content: "";
  position: absolute;
  bottom: 0%;
  left: 0%;
  transform: translateY(-50%);
  width: 100%;
  height: 1px;
  background: currentColor;
  transition: transform 0.7s cubic-bezier(0.77, 0, 0.175, 1);
}

.home__about__info__link__url__text:hover:after, .home__showcase__gallery__link__work__text:hover:after {
  transform: scaleX(1);
  transform-origin: center;
}

.home__about__info__link__url__text:after, .home__showcase__gallery__link__work__text:after {
  transform: scaleX(0);
  transform-origin: center;
}

.home__about__info__link__url__text, .home__showcase__gallery__link__work__text {
  display: inline-block;
}
@font-face {
  font-family: "Butler";
  src: url(39067711eb22ef463f2a.woff2) format("woff2"), url(7704cc6b567d92ede0f6.woff) format("woff"), url(c589fdca3db8a96f28bb.otf) format("opentype");
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: "Satoshi-Regular";
  src: url(331b498b0fef0588d872.woff2) format("woff2"), url(ca3da5fd2b609836ef69.woff) format("woff"), url(fe762acc7e97cb612805.ttf) format("truetype");
  font-weight: 400;
  font-display: swap;
  font-style: normal;
}
* {
  box-sizing: border-box;
  user-select: none;
}

html {
  font-size: 0.5208333333vw;
  overscroll-behavior: none;
  overflow: hidden;
  position: fixed;
  background: #ffeadb;
  color: #15252d;
}
@media (max-width: 767px) {
  html {
    font-size: 1.3333333333vw;
  }
}

body {
  position: fixed;
  font-family: "Satoshi-Regular";
}

canvas {
  position: relative;
  z-index: 2;
}

a {
  color: inherit;
  text-decoration: none;
  outline: none;
}

img {
  opacity: 0;
  transition: opacity 0.5s ease;
  vertical-align: middle;
}

.loaded {
  opacity: 1;
}

[data-animation=paragraph] {
  line-height: normal;
}
[data-animation=paragraph] span {
  overflow: hidden;
  display: inline-block;
  padding: 0 0.2rem;
}

.preloader {
  position: relative;
  z-index: 7;
}
.preloader__nav {
  position: absolute;
  top: 6.9rem;
  left: 0;
  width: 100%;
  height: 0.1rem;
  background: #15252d;
  transform: scaleX(0);
  transform-origin: left;
}
.preloader__number {
  position: absolute;
  top: 55%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 3;
  overflow: hidden;
}
.preloader__profession {
  position: absolute;
  top: 2.6rem;
  right: 6rem;
  width: 10.8rem;
  height: 2rem;
  background: #FC5200;
  transform: scaleX(0);
  transform-origin: right;
}

.navigation {
  z-index: 6;
  position: fixed;
  width: 100%;
}
.navigation__wrapper {
  overflow: hidden;
  width: 100%;
  height: 7rem;
  display: flex;
  justify-content: space-around;
  align-items: center;
  border-bottom: 1px solid #15252d;
  background: rgba(255, 234, 219, 0.4901960784);
  backdrop-filter: blur(10px);
}
.navigation__availability {
  position: absolute;
  left: 6rem;
  display: flex;
}
.navigation__availability__color {
  height: 1rem;
  width: 1rem;
  border-radius: 100%;
  align-self: center;
  margin-right: 1rem;
}
.navigation__availability__text {
  text-transform: lowercase;
}
.navigation__menu {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
.navigation__list {
  display: flex;
  align-items: center;
}
.navigation__list__left {
  transition: all 0.5s ease-in-out;
}
.navigation__list__left:hover {
  color: #FC5200;
}
.navigation__list__right {
  transition: all 0.25s ease-in-out;
}
.navigation__list__right:hover {
  color: #FC5200;
}
.navigation__list__logo {
  height: 7rem;
  width: 7rem;
  margin: 0 2rem;
  transition: all 0.25s ease-in-out;
}
.navigation__list__logo:hover {
  opacity: 0.5;
}
.navigation__list__logo__figure {
  height: 100%;
  width: 100%;
}
.navigation__list__logo__figure__image {
  height: 100%;
  width: 100%;
  opacity: 1;
  object-fit: cover;
}
.navigation__profession {
  position: absolute;
  right: 6rem;
  display: flex;
  overflow: hidden;
}
.navigation__profession__text {
  opacity: 0;
}
.navigation__profession__split {
  align-self: flex-end;
  height: 2rem;
  width: 2rem;
  background: #FC5200;
  padding: 0 1rem;
  transform: scaleX(6);
  transform-origin: center;
}

.footer {
  z-index: 1;
  height: 60dvh;
  width: 100%;
  background: #15252d;
  position: relative;
}
.footer__proxy {
  position: absolute;
  top: -5rem;
  height: 10dvh;
  width: 100%;
  background: #ffeadb;
  border-bottom-left-radius: 20px;
  border-bottom-right-radius: 20px;
}
.footer__icons {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  align-items: center;
  justify-content: center;
}
.footer__icons__media {
  height: 4rem;
  width: 4rem;
  margin: 0 5rem;
  vertical-align: top;
  transition: all 0.2s linear;
}
.footer__icons__media:hover {
  opacity: 0.5;
}
.footer__icons__media:first-child {
  margin-left: 0;
}
.footer__icons__media:last-child {
  margin-right: 0;
}
.footer__icons__media__div {
  height: 100%;
  width: 100%;
  cursor: pointer;
  transition: all 0.2s linear;
}
.footer__icons__media__div:hover {
  opacity: 0.5;
}
.footer__icons__media__div__link {
  visibility: hidden;
}
.footer__icons__media__div__icon {
  height: 100%;
  width: 100%;
  object-fit: cover;
  filter: invert(1);
}
.footer__title {
  position: absolute;
  bottom: 5rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  justify-content: center;
  width: 100%;
  overflow: hidden;
}
.footer__title__split {
  width: 100%;
  height: 0.2rem;
  background: #FC5200;
  margin: 3rem 6rem;
  align-self: flex-end;
}
.footer__title__text {
  line-height: 1;
  text-transform: uppercase;
  color: #FC5200;
  margin: 0 2rem;
}

.home {
  z-index: 3;
}
@keyframes rotation {
  0% {
    transform: translateY(-11rem) rotate(0deg);
  }
  100% {
    transform: translateY(-11rem) rotate(360deg);
  }
}
.home__header {
  height: 100dvh;
  width: 100%;
  position: relative;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: 10rem 1fr 1fr;
  padding: 0 6rem;
}
.home__header__topTitle {
  grid-area: 2/1/3/3;
  align-self: flex-end;
  z-index: 3;
}
.home__header__topTitle__text {
  line-height: 19rem;
  text-transform: uppercase;
  color: transparent;
  -webkit-text-fill-color: transparent;
  -webkit-text-stroke: 0.3rem #FC5200;
  overflow: hidden;
}
.home__header__location {
  grid-area: 2/3/3/-1;
  align-self: center;
  justify-self: center;
}
.home__header__location__text {
  font-style: italic;
}
.home__header__portrait {
  grid-area: 2/2/-1/3;
  justify-self: center;
  align-self: center;
  height: 55rem;
  width: 45rem;
  z-index: 2;
  position: relative;
}
.home__header__portrait__cover {
  position: absolute;
  top: 0;
  left: 0;
  width: 101%;
  height: 101%;
  background: #ffeadb;
  transform-origin: top;
}
.home__header__portrait__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__header__portrait__figure__image {
  object-fit: cover;
  transform-origin: bottom;
}
.home__header__description {
  grid-area: 3/1/-1/2;
  align-self: center;
  justify-self: center;
}
.home__header__description__text {
  font-style: italic;
  overflow: hidden;
}
.home__header__btmTitle {
  grid-area: 3/2/-1/-1;
  align-self: center;
  justify-self: flex-end;
  text-align: right;
  z-index: 3;
}
.home__header__btmTitle__text {
  line-height: 19rem;
  text-transform: uppercase;
  color: #15252d;
  -webkit-text-fill-color: #15252d;
  overflow: hidden;
}

.home__showcase {
  height: 90dvh;
  width: 95%;
  color: #ffeadb;
  position: relative;
  left: 50%;
  transform: translateX(-50%);
  z-index: 3;
  margin-top: 6rem;
}
.home__showcase__title__text {
  text-transform: uppercase;
  color: #15252d;
  -webkit-text-fill-color: #15252d;
}
.home__showcase__titleTopLeft {
  position: absolute;
  top: 5rem;
  left: 6rem;
}
.home__showcase__titleBtmLeft {
  position: absolute;
  bottom: 5rem;
  left: 6rem;
}
.home__showcase__titleTopRight {
  position: absolute;
  top: 5rem;
  right: 6rem;
}
.home__showcase__titleBtmRight {
  position: absolute;
  bottom: 5rem;
  right: 6rem;
}
.home__showcase__gallery {
  height: 100%;
  width: 100%;
  position: relative;
  border: 1px solid #15252d;
}
.home__showcase__gallery__wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  justify-content: space-around;
  align-self: center;
  border-top: 1px solid #15252d;
  border-bottom: 1px solid #15252d;
  width: 80%;
  padding: 10rem;
}
.home__showcase__gallery__image {
  height: 25rem;
  width: 25rem;
  z-index: 2;
  position: relative;
}
.home__showcase__gallery__image__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__showcase__gallery__image__figure__image {
  object-fit: cover;
}
.home__showcase__gallery__image__link {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: 100%;
  z-index: 4;
}
.home__showcase__gallery__image__title {
  position: absolute;
  top: 1rem;
  left: 50%;
  transform: translateX(-50%);
  z-index: 3;
  height: 45rem;
  width: 45rem;
}
.home__showcase__gallery__image__title__svg {
  transform: translateY(-11rem);
  text-transform: uppercase;
  stroke-width: 1.5px;
  fill: #15252d;
  animation: rotation 36s linear infinite;
}
.home__showcase__gallery__image__title__text {
  text-transform: uppercase;
  white-space: nowrap;
  -webkit-text-fill-color: transparent;
  -webkit-text-stroke: 0.2rem #15252d;
}
.home__showcase__gallery__link {
  position: absolute;
  bottom: 5rem;
  left: 50%;
  transform: translateX(-50%);
  width: fit-content;
}
.home__showcase__gallery__link__work {
  display: flex;
  gap: 0.5rem;
}
.home__showcase__gallery__link__work__text {
  color: #15252d;
}
.home__showcase__gallery__link__work__icon {
  align-self: center;
  height: 2rem;
  width: 2rem;
  position: relative;
}
.home__showcase__gallery__link__work__icon__media {
  object-fit: cover;
}

.home__about {
  height: 110dvh;
  width: 100%;
  position: relative;
  z-index: 3;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: 30rem 1fr;
}
.home__about__title {
  grid-area: 1/1/2/-1;
  align-self: flex-end;
  justify-self: center;
  display: flex;
  height: 10rem;
  width: 80%;
  position: relative;
  left: 1%;
}
.home__about__title__text {
  text-transform: uppercase;
  line-height: 1;
  position: absolute;
  transform: translate(-50%, -50%);
}
.home__about__title__text:nth-of-type(1) {
  -webkit-text-fill-color: transparent;
  -webkit-text-stroke: 0.3rem #15252d;
  z-index: 1;
  opacity: 0.4;
}
.home__about__title__text:nth-of-type(2) {
  -webkit-text-fill-color: transparent;
  -webkit-text-stroke: 0.3rem #FC5200;
  opacity: 0.6;
  z-index: 2;
}
.home__about__title__text:nth-of-type(3) {
  -webkit-text-fill-color: #15252d;
  z-index: 3;
}
.home__about__info {
  grid-area: 2/2/-1/3;
  align-self: center;
  justify-self: center;
}
.home__about__info__link {
  margin-top: 2rem;
  position: relative;
  width: fit-content;
}
.home__about__info__link__url {
  display: flex;
  gap: 0.5rem;
}
.home__about__info__link__url__icon {
  align-self: center;
  height: 2rem;
  width: 2rem;
  position: relative;
}
.home__about__info__link__url__icon__media {
  object-fit: cover;
}
.home__about__left {
  grid-area: 2/1/-1/2;
  display: grid;
  grid-template-columns: 1fr 10rem;
  grid-template-rows: 10rem 1fr 10rem;
  padding-left: 6rem;
}
.home__about__left__cover {
  grid-area: 1/1/-1/-1;
  height: 100%;
  width: 100%;
  background: #ffeadb;
  transform-origin: top;
}
.home__about__left__large {
  grid-area: 2/1/3/2;
  height: 100%;
  width: 100%;
}
.home__about__left__large__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__about__left__large__figure__image {
  object-fit: cover;
}
.home__about__left__small {
  grid-area: 1/1/3/-1;
  align-self: flex-start;
  justify-self: flex-end;
  height: 25rem;
  width: 20rem;
}
.home__about__left__small__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__about__left__small__figure__image {
  object-fit: cover;
}
.home__about__right {
  grid-area: 2/3/-1/-1;
  display: grid;
  grid-template-columns: 10rem 1fr;
  grid-template-rows: 10rem 1fr 10rem;
  padding-right: 6rem;
}
.home__about__right__cover {
  grid-area: 1/1/-1/-1;
  height: 100%;
  width: 100%;
  background: #ffeadb;
  transform-origin: top;
}
.home__about__right__large {
  grid-area: 2/2/3/-1;
  height: 100%;
  width: 100%;
}
.home__about__right__large__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__about__right__large__figure__image {
  object-fit: cover;
}

.work {
  z-index: 3;
  overflow: hidden;
}
.work__borders {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border-top: 1px solid #15252d;
  border-bottom: 1px solid #15252d;
  height: 50rem;
  width: 50%;
  transform-origin: center;
  z-index: 1;
}
.work__wrapper {
  z-index: 3;
}
.work__gallery {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2.5rem;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: 2.5rem 10rem;
}
.work__gallery__image {
  height: 25rem;
  width: 25rem;
  position: relative;
}
.work__gallery__image__link {
  display: block;
  width: 100%;
  height: 100%;
  z-index: 4;
}
.work__gallery__image__figure {
  height: 100%;
  width: 100%;
  position: relative;
  visibility: hidden;
}
.work__gallery__image__figure__image {
  object-fit: cover;
}
.work__visualiser {
  position: absolute;
  bottom: 4rem;
  left: 10rem;
  display: flex;
  gap: 0.5rem;
}
.work__visualiser__box {
  height: 2rem;
  width: 2rem;
  position: relative;
}
.work__visualiser__box__cover {
  background: #ffeadb;
  transform-origin: top;
  z-index: 3;
}
.work__visualiser__box__inner {
  border-radius: 100%;
  background: #15252d;
  z-index: 2;
}
.work__index {
  position: absolute;
  bottom: 6rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
.work__index__current {
  height: 2.1rem;
  overflow: hidden;
}
.work__index__number {
  overflow: hidden;
}
.work__index__slash {
  overflow: hidden;
}
.work__index__slash__text {
  font-size: 2rem;
}
.work__index__total {
  overflow: hidden;
}
.work__titles {
  position: absolute;
  bottom: 6rem;
  right: 15rem;
  width: 20rem;
}
.work__titles__title {
  position: relative;
  height: 100%;
  width: 100%;
}
.work__titles__title__text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  white-space: nowrap;
  color: #FC5200;
  text-transform: uppercase;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5jc3MiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7RUFhQztFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUNDRDs7QURFQTs7RUFFQztBQ0NEOztBREVBO0VBQ0M7QUNDRDs7QURFQTtFQUNDO0FDQ0Q7O0FERUE7O0VBRUM7RUFDQTtBQ0NEOztBREVBO0VBQ0M7RUFDQTtBQ0NEOztBQzNDQTtFQUVFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUQ2Q0Y7O0FFbkRBO0FBQ0E7RUFDRTtFQUNBO0FGc0RGOztBRW5EQTtBQUNBO0VBQ0U7QUZzREY7O0FFbkRBOzs7O0VBQUE7QUFLQTs7RUFFRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBRnNERjs7QUVuREE7QUFFQTtFQUNFO0VBQ0E7RUFFQTtFQUNBO0VBRUE7RUFDQTtBRm1ERjs7QUVoREE7RUFDRTtFQUNBO0VBRUE7RUFDQTtBRmtERjs7QUUvQ0E7RUFDRTtFQUNBO0VBRUE7RUFDQTtFQUVBO0VBQ0E7O0dBQUE7RUFJQTtFQUNBO0VBRUE7RUFDQTtBRjhDRjs7QUUzQ0E7RUFBdUI7RUFBYTtBRmdEcEM7O0FFOUNBO0VBQ0U7SUFDRTtJQUNBO0lBQ0E7SUFDQTtFRmlERjtFRTlDQTtJQUNFO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7RUZnREY7RUU3Q0E7SUFDRTtJQUNBO0lBQ0E7RUYrQ0Y7RUU1Q0E7SUFDRTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7RUY4Q0Y7RUUzQ0E7RUFDQTtJQUNFO0lBQ0E7SUFFQTtJQUNBO0lBQ0E7SUFFQTtJQUNBO0lBRUE7SUFDQTtFRjBDRjtBQUNGO0FHbEtBO0VBSUU7RUFDQTtBSGlLRjs7QUloS0E7RUFFRSxxQkNDWTtFREFaO0FKa0tGOztBSTNIQTtFQUVFLHFCQ3pDWTtFRDBDWjtBSjZIRjs7QUlwSEE7RUFFRSxxQkNyRFk7RURzRFo7QUpzSEY7O0FJakdBO0VBRUUscUJDN0VZO0VEOEVaO0FKbUdGOztBSTFGQTtFQUVFLHFCQ3pGWTtFRDBGWjtBSjRGRjs7QU03S0E7RUFFRSw4QkRWYTtFQ1diO0FOK0tGOztBT3BNQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0FQdU1GOztBT3BNQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBUHVNRjs7QU9wTUE7RUFDRTtFQUNBO0FQdU1GOztBT3BNQTtFQUNFO0VBQ0E7QVB1TUY7O0FPekxBO0VBR0U7QVAwTEY7QVFyT0E7RUFDRSxxQkhRWTtFR1BaO0VBR0E7RUFDQTtBUnFPRjtBUWpPQTtFQUNFLDhCSERhO0VHRWI7RUFHSztFQUNBO0VBQ0E7QVJpT1A7QVNsUEE7RUFFRTtFQUNBO0FUbVBGOztBU2hQQTtFQUlFO0VBRUE7RUFDQTtFQUNBO0VBRUEsbUJKZm9CO0VJZ0JwQixjSmpCd0I7QUwrUDFCO0FVd1VJO0VEamtCSjtJQWVJO0VUOE9GO0FBQ0Y7O0FTM09BO0VBS0U7RUFDQSw4QkpyQmE7QUwrUGY7O0FTdk9BO0VBRUU7RUFDQTtBVHlPRjs7QVNyT0E7RUFFRTtFQUNBO0VBQ0E7QVR1T0Y7O0FTcE9BO0VBRUU7RUFDQTtFQUNBO0FUc09GOztBU25PQTtFQUVFO0FUcU9GOztBUzdOQTtFQUVFO0FUK05GO0FTN05FO0VBRUU7RUFDQTtFQUNBO0FUOE5KOztBV3ZTQTtFQUlFO0VBRUE7QVhzU0Y7QVdwU0U7RUFFRTtFQUNBO0VBQ0E7RUFFQTtFQUNBO0VBRUEsbUJOakJzQjtFTW1CdEI7RUFDQTtBWGtTSjtBVy9SRTtFQUVFO0VBQ0E7RUFDQTtFQUNBO0VBRUE7RUFFQTtBWDhSSjtBV3RSRTtFQUVFO0VBQ0E7RUFDQTtFQUVBO0VBQ0E7RUFFQSxtQk45Q3FCO0VNZ0RyQjtFQUNBO0FYb1JKOztBWXhVQTtFQUVFO0VBQ0E7RUFFQTtBWnlVRjtBWXZVRTtFQUVFO0VBRUE7RUFDQTtFQUVBO0VBQ0E7RUFDQTtFQUVBO0VBQ0E7RUFDQTtBWnFVSjtBWWxVRTtFQUVFO0VBQ0E7RUFFQTtBWmtVSjtBWWhVSTtFQUVFO0VBQ0E7RUFFQTtFQUVBO0VBQ0E7QVorVE47QVk1VEk7RUFFRTtBWjZUTjtBWXpURTtFQUVFO0VBQ0E7RUFFQTtBWnlUSjtBWXRURTtFQUVFO0VBQ0E7QVp1VEo7QVlyVEk7RUFFRTtBWnNUTjtBWXBUTTtFQUVFLGNQL0RpQjtBTG9YekI7QVlqVEk7RUFFRTtBWmtUTjtBWWhUTTtFQUVFLGNQekVpQjtBTDBYekI7QVk3U0k7RUFFRTtFQUNBO0VBRUE7RUFFQTtBWjRTTjtBWTFTTTtFQUVFO0FaMlNSO0FZeFNNO0VBRUU7RUFDQTtBWnlTUjtBWXZTUTtFQUVFO0VBQ0E7RUFFQTtFQUVBO0Fac1NWO0FZaFNFO0VBRUU7RUFDQTtFQUVBO0VBQ0E7QVpnU0o7QVk5Ukk7RUFFRTtBWitSTjtBWTVSSTtFQUVFO0VBRUE7RUFDQTtFQUVBLG1CUGpJbUI7RU9tSW5CO0VBRUE7RUFDQTtBWnlSTjs7QWFsYUE7RUFFRTtFQUVBO0VBQ0E7RUFFQSxtQlJQd0I7RVFTeEI7QWJpYUY7QWEvWkU7RUFFRTtFQUNBO0VBRUE7RUFDQTtFQUVBLG1CUmxCa0I7RVFvQmxCO0VBQ0E7QWI2Wko7QWExWkU7RUFFRTtFQUNBO0VBQ0E7RUFFQTtFQUVBO0VBQ0E7RUFDQTtBYnlaSjtBYXZaSTtFQUVFO0VBQ0E7RUFFQTtFQUNBO0VBQ0E7QWJ1Wk47QWFyWk07RUFFRTtBYnNaUjtBYW5aTTtFQUVFO0Fib1pSO0FhalpNO0VBRUU7QWJrWlI7QWEvWU07RUFFRTtFQUNBO0VBRUE7RUFFQTtBYjhZUjtBYTVZUTtFQUVFO0FiNllWO0FhMVlRO0VBRUU7QWIyWVY7QWF4WVE7RUFFRTtFQUNBO0VBQ0E7RUFDQTtBYnlZVjtBYW5ZRTtFQUVFO0VBQ0E7RUFDQTtFQUVBO0VBRUE7RUFDQTtFQUVBO0VBRUE7QWJnWUo7QWE5WEk7RUFFRTtFQUNBO0VBRUEsbUJSNUdtQjtFUThHbkI7RUFFQTtBYjRYTjtBYXpYSTtFQUlFO0VBQ0E7RUFFQSxjUjFIbUI7RVEySG5CO0FidVhOOztBY3JmQTtFQUlFO0FkcWZGO0FlemZBO0VBRUU7SUFDRTtFZjBmRjtFZXZmQTtJQUNFO0VmeWZGO0FBQ0Y7QWdCOWZFO0VBRUU7RUFDQTtFQUVBO0VBRUE7RUFDQTtFQUNBO0VBRUE7QWhCNGZKO0FnQjFmSTtFQUVFO0VBQ0E7RUFFQTtBaEIwZk47QWdCeGZNO0VBSUU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUVBO0FoQnNmUjtBZ0JsZkk7RUFFRTtFQUNBO0VBQ0E7QWhCbWZOO0FnQmpmTTtFQUVFO0FoQmtmUjtBZ0I5ZUk7RUFFRTtFQUNBO0VBQ0E7RUFFQTtFQUNBO0VBRUE7RUFFQTtBaEI0ZU47QWdCMWVNO0VBRUU7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUVBLG1CWHRFYztFV3dFZDtBaEJ3ZVI7QWdCcmVNO0VBRUU7RUFFQTtFQUNBO0VBRUE7QWhCb2VSO0FnQmxlUTtFQUlFO0VBRUE7QWhCZ2VWO0FnQjNkSTtFQUVFO0VBQ0E7RUFDQTtBaEI0ZE47QWdCMWRNO0VBRUU7RUFFQTtBaEIwZFI7QWdCdGRJO0VBRUU7RUFDQTtFQUNBO0VBRUE7RUFFQTtBaEJxZE47QWdCbmRNO0VBSUU7RUFDQTtFQUNBLGNYOUhrQjtFVytIbEIsZ0NYL0hrQjtFV2tJbEI7QWhCZ2RSOztBaUJobEJFO0VBRUU7RUFDQTtFQUVBLGNaTmtCO0VZUWxCO0VBQ0E7RUFDQTtFQUVBO0VBRUE7QWpCOGtCSjtBaUJ6a0JNO0VBSUU7RUFFQSxjWjFCa0I7RVkyQmxCLGdDWjNCa0I7QUxrbUIxQjtBaUJua0JJO0VBRUU7RUFDQTtFQUNBO0FqQm9rQk47QWlCamtCSTtFQUVFO0VBQ0E7RUFDQTtBakJra0JOO0FpQi9qQkk7RUFFRTtFQUNBO0VBQ0E7QWpCZ2tCTjtBaUI3akJJO0VBRUU7RUFDQTtFQUNBO0FqQjhqQk47QWlCM2pCSTtFQUVFO0VBQ0E7RUFFQTtFQUVBO0FqQjBqQk47QWlCeGpCTTtFQUVFO0VBQ0E7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUVBO0VBQ0E7QWpCc2pCUjtBaUJuakJNO0VBRUU7RUFDQTtFQUVBO0VBRUE7QWpCa2pCUjtBaUJoakJRO0VBRUU7RUFFQTtFQUNBO0VBRUE7QWpCK2lCVjtBaUI3aUJVO0VBSUU7QWpCNGlCWjtBaUJ4aUJRO0VBSUU7RUFFQTtFQUNBO0VBRUE7RUFFQTtBakJvaUJWO0FpQmppQlE7RUFFRTtFQUNBO0VBQ0E7RUFDQTtFQUVBO0VBRUE7RUFDQTtBakJnaUJWO0FpQjloQlU7RUFJRTtFQUNBO0VBQ0E7RUFDQSxhWmpKYztFWW1KZDtBakI0aEJaO0FpQnpoQlU7RUFJRTtFQUNBO0VBRUE7RUFDQTtBakJ1aEJaO0FpQmxoQk07RUFFRTtFQUNBO0VBQ0E7RUFFQTtFQUVBO0FqQmloQlI7QWlCL2dCUTtFQUVFO0VBQ0E7QWpCZ2hCVjtBaUI5Z0JVO0VBR0UsY1pyTGM7QUxtc0IxQjtBaUIzZ0JVO0VBRUU7RUFFQTtFQUNBO0VBRUE7QWpCMGdCWjtBaUJ4Z0JZO0VBSUU7QWpCdWdCZDs7QWtCMXNCRTtFQUVFO0VBQ0E7RUFFQTtFQUVBO0VBRUE7RUFDQTtFQUNBO0FsQnlzQko7QWtCdnNCSTtFQUVFO0VBQ0E7RUFDQTtFQUVBO0VBRUE7RUFDQTtFQUVBO0VBQ0E7QWxCcXNCTjtBa0Juc0JNO0VBSUU7RUFFQTtFQUVBO0VBRUE7QWxCK3JCUjtBa0I3ckJRO0VBRUU7RUFDQTtFQUVBO0VBRUE7QWxCNHJCVjtBa0J6ckJRO0VBRUU7RUFDQTtFQUVBO0VBRUE7QWxCd3JCVjtBa0JyckJRO0VBRUUsZ0NiL0RnQjtFYWlFaEI7QWxCcXJCVjtBa0JockJJO0VBRUU7RUFDQTtFQUNBO0FsQmlyQk47QWtCL3FCTTtFQUVFO0VBRUE7RUFFQTtBbEI4cUJSO0FrQjVxQlE7RUFFRTtFQUNBO0FsQjZxQlY7QWtCdHFCVTtFQUVFO0VBRUE7RUFDQTtFQUVBO0FsQnFxQlo7QWtCbnFCWTtFQUlFO0FsQmtxQmQ7QWtCMXBCSTtFQUVFO0VBRUE7RUFDQTtFQUNBO0VBRUE7QWxCeXBCTjtBa0J2cEJNO0VBRUU7RUFFQTtFQUNBO0VBRUEsbUJibkljO0VhcUlkO0FsQnFwQlI7QWtCbHBCTTtFQUVFO0VBRUE7RUFDQTtBbEJrcEJSO0FrQmhwQlE7RUFFRTtFQUVBO0VBQ0E7RUFFQTtBbEIrb0JWO0FrQjdvQlU7RUFJRTtBbEI0b0JaO0FrQnZvQk07RUFFRTtFQUVBO0VBQ0E7RUFFQTtFQUNBO0FsQnNvQlI7QWtCcG9CUTtFQUVFO0VBRUE7RUFDQTtFQUVBO0FsQm1vQlY7QWtCam9CVTtFQUlFO0FsQmdvQlo7QWtCMW5CSTtFQUVFO0VBRUE7RUFDQTtFQUNBO0VBRUE7QWxCeW5CTjtBa0J2bkJNO0VBRUU7RUFFQTtFQUNBO0VBRUEsbUJiL01jO0VhaU5kO0FsQnFuQlI7QWtCbG5CTTtFQUVFO0VBRUE7RUFDQTtBbEJrbkJSO0FrQmhuQlE7RUFFRTtFQUVBO0VBQ0E7RUFFQTtBbEIrbUJWO0FrQjdtQlU7RUFJRTtBbEI0bUJaOztBbUJyMUJBO0VBS0U7RUFDQTtBbkJvMUJGO0FtQmwxQkU7RUFFRTtFQUNBO0VBQ0E7RUFDQTtFQUVBO0VBQ0E7RUFFQTtFQUNBO0VBRUE7RUFFQTtBbkIrMEJKO0FtQjUwQkU7RUFJRTtBbkIyMEJKO0FtQnYwQkU7RUFFRTtFQUNBO0VBQ0E7RUFFQTtFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBRUE7QW5CcTBCSjtBbUJuMEJJO0VBRUU7RUFDQTtFQUVBO0FuQm0wQk47QW1CajBCTTtFQUlFO0VBRUE7RUFDQTtFQUVBO0FuQjh6QlI7QW1CM3pCTTtFQUVFO0VBQ0E7RUFDQTtFQUVBO0FuQjJ6QlI7QW1CenpCUTtFQUlFO0FuQnd6QlY7QW1CbHpCRTtFQUVFO0VBQ0E7RUFDQTtFQUVBO0VBQ0E7QW5Ca3pCSjtBbUJoekJJO0VBRUU7RUFDQTtFQUVBO0FuQmd6Qk47QW1COXlCTTtFQUlFLG1CZHpHYztFYzJHZDtFQUVBO0FuQjJ5QlI7QW1CeHlCTTtFQUlFO0VBQ0EsbUJkdEhrQjtFY3dIbEI7QW5Cc3lCUjtBbUJqeUJFO0VBRUU7RUFDQTtFQUNBO0VBRUE7RUFFQTtFQUNBO0VBQ0E7QW5CZ3lCSjtBbUI5eEJJO0VBRUU7RUFDQTtBbkIreEJOO0FtQjV4Qkk7RUFFRTtBbkI2eEJOO0FtQnJ4Qkk7RUFFRTtBbkJzeEJOO0FtQnB4Qk07RUFFRTtBbkJxeEJSO0FtQmp4Qkk7RUFFRTtBbkJreEJOO0FtQjF3QkU7RUFFRTtFQUNBO0VBQ0E7RUFFQTtBbkIwd0JKO0FtQnh3Qkk7RUFFRTtFQUVBO0VBQ0E7QW5Cd3dCTjtBbUJ0d0JNO0VBSUU7RUFDQTtFQUNBO0VBQ0E7RUFFQTtFQUNBLGNkbk1pQjtFY29NakI7QW5Cb3dCUixDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHJhZXdhcnJlbi8uL3N0eWxlcy9iYXNlL19yZXNldC5zY3NzIiwid2VicGFjazovL3RyYWV3YXJyZW4vLi9zdHlsZXMvaW5kZXguc2NzcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vc3R5bGVzL3V0aWxzL19taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vc3R5bGVzL3V0aWxzL19zcGxpdHRpbmcuc2NzcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vc3R5bGVzL3NoYXJlZC9fcGFnZXMuc2NzcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vc3R5bGVzL3NoYXJlZC9fdGl0bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vdHJhZXdhcnJlbi8uL3N0eWxlcy91dGlscy9fdmFyaWFibGVzLnNjc3MiLCJ3ZWJwYWNrOi8vdHJhZXdhcnJlbi8uL3N0eWxlcy9zaGFyZWQvX2Rlc2Muc2NzcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vc3R5bGVzL3NoYXJlZC9fbGlua3Muc2NzcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vc3R5bGVzL2Jhc2UvX2ZvbnRzLnNjc3MiLCJ3ZWJwYWNrOi8vdHJhZXdhcnJlbi8uL3N0eWxlcy9iYXNlL19iYXNlLnNjc3MiLCJ3ZWJwYWNrOi8vdHJhZXdhcnJlbi8uL25vZGVfbW9kdWxlcy9pbmNsdWRlLW1lZGlhL2Rpc3QvX2luY2x1ZGUtbWVkaWEuc2NzcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vc3R5bGVzL2NvbXBvbmVudHMvX3ByZWxvYWRlci5zY3NzIiwid2VicGFjazovL3RyYWV3YXJyZW4vLi9zdHlsZXMvbGF5b3V0L19uYXZpZ2F0aW9uLnNjc3MiLCJ3ZWJwYWNrOi8vdHJhZXdhcnJlbi8uL3N0eWxlcy9sYXlvdXQvX2Zvb3Rlci5zY3NzIiwid2VicGFjazovL3RyYWV3YXJyZW4vLi9zdHlsZXMvcGFnZXMvaG9tZS9faW5kZXguc2NzcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vc3R5bGVzL3BhZ2VzL2hvbWUvYW5pbWF0aW9ucy9fYW5pbWF0aW9ucy5zY3NzIiwid2VicGFjazovL3RyYWV3YXJyZW4vLi9zdHlsZXMvcGFnZXMvaG9tZS9zZWN0aW9ucy9faGVhZGVyLnNjc3MiLCJ3ZWJwYWNrOi8vdHJhZXdhcnJlbi8uL3N0eWxlcy9wYWdlcy9ob21lL3NlY3Rpb25zL19zaG93Y2FzZS5zY3NzIiwid2VicGFjazovL3RyYWV3YXJyZW4vLi9zdHlsZXMvcGFnZXMvaG9tZS9zZWN0aW9ucy9fYWJvdXQuc2NzcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vc3R5bGVzL3BhZ2VzL3dvcmsvX2luZGV4LnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcbmIsIHUsIGksIGNlbnRlcixcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XG5cdG1hcmdpbjogMDtcblx0cGFkZGluZzogMDtcblx0Ym9yZGVyOiAwO1xuXHRmb250LXNpemU6IDEwMCU7XG5cdGZvbnQ6IGluaGVyaXQ7XG5cdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XG5cdGRpc3BsYXk6IGJsb2NrO1xufVxuXG5vbCwgdWwge1xuXHRsaXN0LXN0eWxlOiBub25lO1xufVxuXG5ibG9ja3F1b3RlLCBxIHtcblx0cXVvdGVzOiBub25lO1xufVxuXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLCBxOmFmdGVyIHtcblx0Y29udGVudDogJyc7XG5cdGNvbnRlbnQ6IG5vbmU7XG59XG5cbnRhYmxlIHtcblx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcblx0Ym9yZGVyLXNwYWNpbmc6IDA7XG59XG4iLCJodG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXG5hLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxuYiwgdSwgaSwgY2VudGVyLFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxudGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCxcbmZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IDA7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgZm9udDogaW5oZXJpdDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbm9sLCB1bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbmJsb2NrcXVvdGUsIHEge1xuICBxdW90ZXM6IG5vbmU7XG59XG5cbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBjb250ZW50OiBub25lO1xufVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG4ud29ya19fdmlzdWFsaXNlcl9fYm94X19pbm5lciwgLndvcmtfX3Zpc3VhbGlzZXJfX2JveF9fY292ZXIsIC53b3JrX19nYWxsZXJ5X19pbWFnZV9fZmlndXJlX19pbWFnZSwgLndvcmtfX2dhbGxlcnlfX2ltYWdlX19saW5rLCAud29ya19fd3JhcHBlciwgLmhvbWVfX2Fib3V0X19yaWdodF9fbGFyZ2VfX2ZpZ3VyZV9faW1hZ2UsIC5ob21lX19hYm91dF9fbGVmdF9fc21hbGxfX2ZpZ3VyZV9faW1hZ2UsIC5ob21lX19hYm91dF9fbGVmdF9fbGFyZ2VfX2ZpZ3VyZV9faW1hZ2UsIC5ob21lX19hYm91dF9faW5mb19fbGlua19fdXJsX19pY29uX19tZWRpYSwgLmhvbWVfX3Nob3djYXNlX19nYWxsZXJ5X19saW5rX193b3JrX19pY29uX19tZWRpYSwgLmhvbWVfX3Nob3djYXNlX19nYWxsZXJ5X19pbWFnZV9fbGluaywgLmhvbWVfX3Nob3djYXNlX19nYWxsZXJ5X19pbWFnZV9fZmlndXJlX19pbWFnZSwgLmhvbWVfX2hlYWRlcl9fcG9ydHJhaXRfX2ZpZ3VyZV9faW1hZ2UsIC5wcmVsb2FkZXIsIC5jb250ZW50LCBib2R5LCBodG1sLCAud29yaywgLmhvbWUge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbn1cblxuLyogUmVjb21tZW5kZWQgc3R5bGVzIGZvciBTcGxpdHRpbmcgKi9cbi5zcGxpdHRpbmcgLmNoYXIge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi8qIFBzdWVkby1lbGVtZW50IGNoYXJzICovXG4uc3BsaXR0aW5nIC5jaGFyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4vKipcbiAqIFBvcHVsYXRlIHRoZSBwc3VlZG8gZWxlbWVudHMgd2l0aCB0aGUgY2hhcmFjdGVyIHRvIGFsbG93IGZvciBleHBhbmRlZCBlZmZlY3RzXG4gKiBTZXQgdG8gYGRpc3BsYXk6IG5vbmVgIGJ5IGRlZmF1bHQ7IGp1c3QgYWRkIGBkaXNwbGF5OiBibG9ja2Agd2hlbiB5b3Ugd2FudFxuICogdG8gdXNlIHRoZSBwc3VlZG8gZWxlbWVudHNcbiAqL1xuLnNwbGl0dGluZyAuY2hhcjo6YmVmb3JlLFxuLnNwbGl0dGluZyAuY2hhcjo6YWZ0ZXIge1xuICBjb250ZW50OiBhdHRyKGRhdGEtY2hhcik7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIHRyYW5zaXRpb246IGluaGVyaXQ7XG4gIHVzZXItc2VsZWN0OiBub25lO1xufVxuXG4vKiBFeHBhbmRlZCBDU1MgVmFyaWFibGVzICovXG4uc3BsaXR0aW5nIHtcbiAgLyogVGhlIGNlbnRlciB3b3JkIGluZGV4ICovXG4gIC0td29yZC1jZW50ZXI6IGNhbGMoKHZhcigtLXdvcmQtdG90YWwpIC0gMSkgLyAyKTtcbiAgLyogVGhlIGNlbnRlciBjaGFyYWN0ZXIgaW5kZXggKi9cbiAgLS1jaGFyLWNlbnRlcjogY2FsYygodmFyKC0tY2hhci10b3RhbCkgLSAxKSAvIDIpO1xuICAvKiBUaGUgY2VudGVyIGNoYXJhY3RlciBpbmRleCAqL1xuICAtLWxpbmUtY2VudGVyOiBjYWxjKCh2YXIoLS1saW5lLXRvdGFsKSAtIDEpIC8gMik7XG59XG5cbi5zcGxpdHRpbmcgLndvcmQge1xuICAvKiBQZWNlbnQgKDAtMSkgb2YgdGhlIHdvcmQncyBwb3NpdGlvbiAqL1xuICAtLXdvcmQtcGVyY2VudDogY2FsYyh2YXIoLS13b3JkLWluZGV4KSAvIHZhcigtLXdvcmQtdG90YWwpKTtcbiAgLyogUGVjZW50ICgwLTEpIG9mIHRoZSBsaW5lJ3MgcG9zaXRpb24gKi9cbiAgLS1saW5lLXBlcmNlbnQ6IGNhbGModmFyKC0tbGluZS1pbmRleCkgLyB2YXIoLS1saW5lLXRvdGFsKSk7XG59XG5cbi5zcGxpdHRpbmcgLmNoYXIge1xuICAvKiBQZXJjZW50ICgwLTEpIG9mIHRoZSBjaGFyJ3MgcG9zaXRpb24gKi9cbiAgLS1jaGFyLXBlcmNlbnQ6IGNhbGModmFyKC0tY2hhci1pbmRleCkgLyB2YXIoLS1jaGFyLXRvdGFsKSk7XG4gIC8qIE9mZnNldCBmcm9tIGNlbnRlciwgcG9zaXRpdmUgJiBuZWdhdGl2ZSAqL1xuICAtLWNoYXItb2Zmc2V0OiBjYWxjKHZhcigtLWNoYXItaW5kZXgpIC0gdmFyKC0tY2hhci1jZW50ZXIpKTtcbiAgLyogQWJzb2x1dGUgZGlzdGFuY2UgZnJvbSBjZW50ZXIsIG9ubHkgcG9zaXRpdmUgKi9cbiAgLS1kaXN0YW5jZTogY2FsYyhcbiAgICAgKHZhcigtLWNoYXItb2Zmc2V0KSAqIHZhcigtLWNoYXItb2Zmc2V0KSkgLyB2YXIoLS1jaGFyLWNlbnRlcilcbiAgKTtcbiAgLyogRGlzdGFuY2UgZnJvbSBjZW50ZXIgd2hlcmUgLTEgaXMgdGhlIGZhciBsZWZ0LCAwIGlzIGNlbnRlciwgMSBpcyBmYXIgcmlnaHQgKi9cbiAgLS1kaXN0YW5jZS1zaW5lOiBjYWxjKHZhcigtLWNoYXItb2Zmc2V0KSAvIHZhcigtLWNoYXItY2VudGVyKSk7XG4gIC8qIERpc3RhbmNlIGZyb20gY2VudGVyIHdoZXJlIDEgaXMgZmFyIGxlZnQvZmFyIHJpZ2h0LCAwIGlzIGNlbnRlciAqL1xuICAtLWRpc3RhbmNlLXBlcmNlbnQ6IGNhbGMoKHZhcigtLWRpc3RhbmNlKSAvIHZhcigtLWNoYXItY2VudGVyKSkpO1xufVxuXG4uc3BsaXR0aW5nLmNlbGxzIGltZyB7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuQHN1cHBvcnRzIChkaXNwbGF5OiBncmlkKSB7XG4gIC5zcGxpdHRpbmcuY2VsbHMge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG4gIC5zcGxpdHRpbmcgLmNlbGwtZ3JpZCB7XG4gICAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZTogcmVwZWF0KHZhcigtLXJvdy10b3RhbCksIDFmcikvcmVwZWF0KHZhcigtLWNvbC10b3RhbCksIDFmcik7XG4gIH1cbiAgLnNwbGl0dGluZyAuY2VsbCB7XG4gICAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgfVxuICAuc3BsaXR0aW5nIC5jZWxsLWlubmVyIHtcbiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIC8qIFNpemUgdG8gZml0IHRoZSB3aG9sZSBjb250YWluZXIgc2l6ZSAqL1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgKiB2YXIoLS1jb2wtdG90YWwpKTtcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAqIHZhcigtLXJvdy10b3RhbCkpO1xuICAgIC8qIFBvc2l0aW9uIHByb3Blcmx5ICovXG4gICAgbGVmdDogY2FsYygtMTAwJSAqIHZhcigtLWNvbC1pbmRleCkpO1xuICAgIHRvcDogY2FsYygtMTAwJSAqIHZhcigtLXJvdy1pbmRleCkpO1xuICB9XG4gIC8qIEhlbHBlciB2YXJpYWJsZXMgZm9yIGFkdmFuY2VkIGVmZmVjdHMgKi9cbiAgLnNwbGl0dGluZyAuY2VsbCB7XG4gICAgLS1jZW50ZXIteDogY2FsYygodmFyKC0tY29sLXRvdGFsKSAtIDEpIC8gMik7XG4gICAgLS1jZW50ZXIteTogY2FsYygodmFyKC0tcm93LXRvdGFsKSAtIDEpIC8gMik7XG4gICAgLyogT2Zmc2V0IGZyb20gY2VudGVyLCBwb3NpdGl2ZSAmIG5lZ2F0aXZlICovXG4gICAgLS1vZmZzZXQteDogY2FsYyh2YXIoLS1jb2wtaW5kZXgpIC0gdmFyKC0tY2VudGVyLXgpKTtcbiAgICAtLW9mZnNldC15OiBjYWxjKHZhcigtLXJvdy1pbmRleCkgLSB2YXIoLS1jZW50ZXIteSkpO1xuICAgIC8qIEFic29sdXRlIGRpc3RhbmNlIGZyb20gY2VudGVyLCBvbmx5IHBvc2l0aXZlICovXG4gICAgLS1kaXN0YW5jZS14OiBjYWxjKCAodmFyKC0tb2Zmc2V0LXgpICogdmFyKC0tb2Zmc2V0LXgpKSAvIHZhcigtLWNlbnRlci14KSApO1xuICAgIC8qIEFic29sdXRlIGRpc3RhbmNlIGZyb20gY2VudGVyLCBvbmx5IHBvc2l0aXZlICovXG4gICAgLS1kaXN0YW5jZS15OiBjYWxjKCAodmFyKC0tb2Zmc2V0LXkpICogdmFyKC0tb2Zmc2V0LXkpKSAvIHZhcigtLWNlbnRlci15KSApO1xuICB9XG59XG4ud29yaywgLmhvbWUge1xuICBvcGFjaXR5OiAwO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG5cbi5ob21lX19zaG93Y2FzZV9fdGl0bGVfX3RleHQge1xuICBmb250LWZhbWlseTogXCJCdXRsZXJcIjtcbiAgZm9udC1zaXplOiAxLjhyZW07XG59XG5cbi5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeV9faW1hZ2VfX3RpdGxlX190ZXh0LCAuaG9tZV9fc2hvd2Nhc2VfX2dhbGxlcnlfX2ltYWdlX190aXRsZV9fc3ZnIHtcbiAgZm9udC1mYW1pbHk6IFwiQnV0bGVyXCI7XG4gIGZvbnQtc2l6ZTogNHJlbTtcbn1cblxuLndvcmtfX3RpdGxlc19fdGl0bGVfX3RleHQge1xuICBmb250LWZhbWlseTogXCJCdXRsZXJcIjtcbiAgZm9udC1zaXplOiA2cmVtO1xufVxuXG4uaG9tZV9fYWJvdXRfX3RpdGxlX190ZXh0LCAuZm9vdGVyX190aXRsZV9fdGV4dCwgLnByZWxvYWRlcl9fbnVtYmVyX190ZXh0IHtcbiAgZm9udC1mYW1pbHk6IFwiQnV0bGVyXCI7XG4gIGZvbnQtc2l6ZTogMTByZW07XG59XG5cbi5ob21lX19oZWFkZXJfX2J0bVRpdGxlX190ZXh0LCAuaG9tZV9faGVhZGVyX190b3BUaXRsZV9fdGV4dCB7XG4gIGZvbnQtZmFtaWx5OiBcIkJ1dGxlclwiO1xuICBmb250LXNpemU6IDIwcmVtO1xufVxuXG5ib2R5IHtcbiAgZm9udC1mYW1pbHk6IFwiU2F0b3NoaS1SZWd1bGFyXCI7XG4gIGZvbnQtc2l6ZTogMS42cmVtO1xufVxuXG4uaG9tZV9fYWJvdXRfX2luZm9fX2xpbmtfX3VybF9fdGV4dCwgLmhvbWVfX3Nob3djYXNlX19nYWxsZXJ5X19saW5rX193b3JrX190ZXh0IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG59XG5cbi5ob21lX19hYm91dF9faW5mb19fbGlua19fdXJsX190ZXh0OmFmdGVyLCAuaG9tZV9fc2hvd2Nhc2VfX2dhbGxlcnlfX2xpbmtfX3dvcmtfX3RleHQ6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogMCU7XG4gIGxlZnQ6IDAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDFweDtcbiAgYmFja2dyb3VuZDogY3VycmVudENvbG9yO1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC43cyBjdWJpYy1iZXppZXIoMC43NywgMCwgMC4xNzUsIDEpO1xufVxuXG4uaG9tZV9fYWJvdXRfX2luZm9fX2xpbmtfX3VybF9fdGV4dDpob3ZlcjphZnRlciwgLmhvbWVfX3Nob3djYXNlX19nYWxsZXJ5X19saW5rX193b3JrX190ZXh0OmhvdmVyOmFmdGVyIHtcbiAgdHJhbnNmb3JtOiBzY2FsZVgoMSk7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcbn1cblxuLmhvbWVfX2Fib3V0X19pbmZvX19saW5rX191cmxfX3RleHQ6YWZ0ZXIsIC5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeV9fbGlua19fd29ya19fdGV4dDphZnRlciB7XG4gIHRyYW5zZm9ybTogc2NhbGVYKDApO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XG59XG5cbi5ob21lX19hYm91dF9faW5mb19fbGlua19fdXJsX190ZXh0LCAuaG9tZV9fc2hvd2Nhc2VfX2dhbGxlcnlfX2xpbmtfX3dvcmtfX3RleHQge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiQnV0bGVyXCI7XG4gIHNyYzogdXJsKFwiLi4vZm9udHMvQnV0bGVyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250cy9CdXRsZXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250cy9CdXRsZXJfUmVndWxhci5vdGZcIikgZm9ybWF0KFwib3BlbnR5cGVcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJTYXRvc2hpLVJlZ3VsYXJcIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9TYXRvc2hpLVJlZ3VsYXIud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi4uL2ZvbnRzL1NhdG9zaGktUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksIHVybChcIi4uL2ZvbnRzL1NhdG9zaGktUmVndWxhci50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIik7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xufVxuKiB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHVzZXItc2VsZWN0OiBub25lO1xufVxuXG5odG1sIHtcbiAgZm9udC1zaXplOiAwLjUyMDgzMzMzMzN2dztcbiAgb3ZlcnNjcm9sbC1iZWhhdmlvcjogbm9uZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcG9zaXRpb246IGZpeGVkO1xuICBiYWNrZ3JvdW5kOiAjZmZlYWRiO1xuICBjb2xvcjogIzE1MjUyZDtcbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCkge1xuICBodG1sIHtcbiAgICBmb250LXNpemU6IDEuMzMzMzMzMzMzM3Z3O1xuICB9XG59XG5cbmJvZHkge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGZvbnQtZmFtaWx5OiBcIlNhdG9zaGktUmVndWxhclwiO1xufVxuXG5jYW52YXMge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDI7XG59XG5cbmEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBvdXRsaW5lOiBub25lO1xufVxuXG5pbWcge1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXMgZWFzZTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuLmxvYWRlZCB7XG4gIG9wYWNpdHk6IDE7XG59XG5cbltkYXRhLWFuaW1hdGlvbj1wYXJhZ3JhcGhdIHtcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbn1cbltkYXRhLWFuaW1hdGlvbj1wYXJhZ3JhcGhdIHNwYW4ge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBhZGRpbmc6IDAgMC4ycmVtO1xufVxuXG4ucHJlbG9hZGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB6LWluZGV4OiA3O1xufVxuLnByZWxvYWRlcl9fbmF2IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDYuOXJlbTtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMC4xcmVtO1xuICBiYWNrZ3JvdW5kOiAjMTUyNTJkO1xuICB0cmFuc2Zvcm06IHNjYWxlWCgwKTtcbiAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdDtcbn1cbi5wcmVsb2FkZXJfX251bWJlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1NSU7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIHotaW5kZXg6IDM7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG4ucHJlbG9hZGVyX19wcm9mZXNzaW9uIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDIuNnJlbTtcbiAgcmlnaHQ6IDZyZW07XG4gIHdpZHRoOiAxMC44cmVtO1xuICBoZWlnaHQ6IDJyZW07XG4gIGJhY2tncm91bmQ6ICNGQzUyMDA7XG4gIHRyYW5zZm9ybTogc2NhbGVYKDApO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodDtcbn1cblxuLm5hdmlnYXRpb24ge1xuICB6LWluZGV4OiA2O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHdpZHRoOiAxMDAlO1xufVxuLm5hdmlnYXRpb25fX3dyYXBwZXIge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA3cmVtO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMxNTI1MmQ7XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyMzQsIDIxOSwgMC40OTAxOTYwNzg0KTtcbiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpO1xufVxuLm5hdmlnYXRpb25fX2F2YWlsYWJpbGl0eSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogNnJlbTtcbiAgZGlzcGxheTogZmxleDtcbn1cbi5uYXZpZ2F0aW9uX19hdmFpbGFiaWxpdHlfX2NvbG9yIHtcbiAgaGVpZ2h0OiAxcmVtO1xuICB3aWR0aDogMXJlbTtcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICBtYXJnaW4tcmlnaHQ6IDFyZW07XG59XG4ubmF2aWdhdGlvbl9fYXZhaWxhYmlsaXR5X190ZXh0IHtcbiAgdGV4dC10cmFuc2Zvcm06IGxvd2VyY2FzZTtcbn1cbi5uYXZpZ2F0aW9uX19tZW51IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbn1cbi5uYXZpZ2F0aW9uX19saXN0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi5uYXZpZ2F0aW9uX19saXN0X19sZWZ0IHtcbiAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZS1pbi1vdXQ7XG59XG4ubmF2aWdhdGlvbl9fbGlzdF9fbGVmdDpob3ZlciB7XG4gIGNvbG9yOiAjRkM1MjAwO1xufVxuLm5hdmlnYXRpb25fX2xpc3RfX3JpZ2h0IHtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGVhc2UtaW4tb3V0O1xufVxuLm5hdmlnYXRpb25fX2xpc3RfX3JpZ2h0OmhvdmVyIHtcbiAgY29sb3I6ICNGQzUyMDA7XG59XG4ubmF2aWdhdGlvbl9fbGlzdF9fbG9nbyB7XG4gIGhlaWdodDogN3JlbTtcbiAgd2lkdGg6IDdyZW07XG4gIG1hcmdpbjogMCAycmVtO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4yNXMgZWFzZS1pbi1vdXQ7XG59XG4ubmF2aWdhdGlvbl9fbGlzdF9fbG9nbzpob3ZlciB7XG4gIG9wYWNpdHk6IDAuNTtcbn1cbi5uYXZpZ2F0aW9uX19saXN0X19sb2dvX19maWd1cmUge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xufVxuLm5hdmlnYXRpb25fX2xpc3RfX2xvZ29fX2ZpZ3VyZV9faW1hZ2Uge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBvcGFjaXR5OiAxO1xuICBvYmplY3QtZml0OiBjb3Zlcjtcbn1cbi5uYXZpZ2F0aW9uX19wcm9mZXNzaW9uIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogNnJlbTtcbiAgZGlzcGxheTogZmxleDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5uYXZpZ2F0aW9uX19wcm9mZXNzaW9uX190ZXh0IHtcbiAgb3BhY2l0eTogMDtcbn1cbi5uYXZpZ2F0aW9uX19wcm9mZXNzaW9uX19zcGxpdCB7XG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBoZWlnaHQ6IDJyZW07XG4gIHdpZHRoOiAycmVtO1xuICBiYWNrZ3JvdW5kOiAjRkM1MjAwO1xuICBwYWRkaW5nOiAwIDFyZW07XG4gIHRyYW5zZm9ybTogc2NhbGVYKDYpO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XG59XG5cbi5mb290ZXIge1xuICB6LWluZGV4OiAxO1xuICBoZWlnaHQ6IDYwZHZoO1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogIzE1MjUyZDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLmZvb3Rlcl9fcHJveHkge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTVyZW07XG4gIGhlaWdodDogMTBkdmg7XG4gIHdpZHRoOiAxMDAlO1xuICBiYWNrZ3JvdW5kOiAjZmZlYWRiO1xuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAyMHB4O1xuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMjBweDtcbn1cbi5mb290ZXJfX2ljb25zIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG4uZm9vdGVyX19pY29uc19fbWVkaWEge1xuICBoZWlnaHQ6IDRyZW07XG4gIHdpZHRoOiA0cmVtO1xuICBtYXJnaW46IDAgNXJlbTtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgbGluZWFyO1xufVxuLmZvb3Rlcl9faWNvbnNfX21lZGlhOmhvdmVyIHtcbiAgb3BhY2l0eTogMC41O1xufVxuLmZvb3Rlcl9faWNvbnNfX21lZGlhOmZpcnN0LWNoaWxkIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG4uZm9vdGVyX19pY29uc19fbWVkaWE6bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1yaWdodDogMDtcbn1cbi5mb290ZXJfX2ljb25zX19tZWRpYV9fZGl2IHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBsaW5lYXI7XG59XG4uZm9vdGVyX19pY29uc19fbWVkaWFfX2Rpdjpob3ZlciB7XG4gIG9wYWNpdHk6IDAuNTtcbn1cbi5mb290ZXJfX2ljb25zX19tZWRpYV9fZGl2X19saW5rIHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuLmZvb3Rlcl9faWNvbnNfX21lZGlhX19kaXZfX2ljb24ge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgZmlsdGVyOiBpbnZlcnQoMSk7XG59XG4uZm9vdGVyX190aXRsZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiA1cmVtO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLmZvb3Rlcl9fdGl0bGVfX3NwbGl0IHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMC4ycmVtO1xuICBiYWNrZ3JvdW5kOiAjRkM1MjAwO1xuICBtYXJnaW46IDNyZW0gNnJlbTtcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG59XG4uZm9vdGVyX190aXRsZV9fdGV4dCB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBjb2xvcjogI0ZDNTIwMDtcbiAgbWFyZ2luOiAwIDJyZW07XG59XG5cbi5ob21lIHtcbiAgei1pbmRleDogMztcbn1cbkBrZXlmcmFtZXMgcm90YXRpb24ge1xuICAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMXJlbSkgcm90YXRlKDBkZWcpO1xuICB9XG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTFyZW0pIHJvdGF0ZSgzNjBkZWcpO1xuICB9XG59XG4uaG9tZV9faGVhZGVyIHtcbiAgaGVpZ2h0OiAxMDBkdmg7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDFmcik7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogMTByZW0gMWZyIDFmcjtcbiAgcGFkZGluZzogMCA2cmVtO1xufVxuLmhvbWVfX2hlYWRlcl9fdG9wVGl0bGUge1xuICBncmlkLWFyZWE6IDIvMS8zLzM7XG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICB6LWluZGV4OiAzO1xufVxuLmhvbWVfX2hlYWRlcl9fdG9wVGl0bGVfX3RleHQge1xuICBsaW5lLWhlaWdodDogMTlyZW07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuICAtd2Via2l0LXRleHQtc3Ryb2tlOiAwLjNyZW0gI0ZDNTIwMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5ob21lX19oZWFkZXJfX2xvY2F0aW9uIHtcbiAgZ3JpZC1hcmVhOiAyLzMvMy8tMTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcbn1cbi5ob21lX19oZWFkZXJfX2xvY2F0aW9uX190ZXh0IHtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xufVxuLmhvbWVfX2hlYWRlcl9fcG9ydHJhaXQge1xuICBncmlkLWFyZWE6IDIvMi8tMS8zO1xuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICBoZWlnaHQ6IDU1cmVtO1xuICB3aWR0aDogNDVyZW07XG4gIHotaW5kZXg6IDI7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5ob21lX19oZWFkZXJfX3BvcnRyYWl0X19jb3ZlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAxJTtcbiAgaGVpZ2h0OiAxMDElO1xuICBiYWNrZ3JvdW5kOiAjZmZlYWRiO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3A7XG59XG4uaG9tZV9faGVhZGVyX19wb3J0cmFpdF9fZmlndXJlIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG4uaG9tZV9faGVhZGVyX19wb3J0cmFpdF9fZmlndXJlX19pbWFnZSB7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b207XG59XG4uaG9tZV9faGVhZGVyX19kZXNjcmlwdGlvbiB7XG4gIGdyaWQtYXJlYTogMy8xLy0xLzI7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG59XG4uaG9tZV9faGVhZGVyX19kZXNjcmlwdGlvbl9fdGV4dCB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5ob21lX19oZWFkZXJfX2J0bVRpdGxlIHtcbiAgZ3JpZC1hcmVhOiAzLzIvLTEvLTE7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIHotaW5kZXg6IDM7XG59XG4uaG9tZV9faGVhZGVyX19idG1UaXRsZV9fdGV4dCB7XG4gIGxpbmUtaGVpZ2h0OiAxOXJlbTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgY29sb3I6ICMxNTI1MmQ7XG4gIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiAjMTUyNTJkO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4uaG9tZV9fc2hvd2Nhc2Uge1xuICBoZWlnaHQ6IDkwZHZoO1xuICB3aWR0aDogOTUlO1xuICBjb2xvcjogI2ZmZWFkYjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgei1pbmRleDogMztcbiAgbWFyZ2luLXRvcDogNnJlbTtcbn1cbi5ob21lX19zaG93Y2FzZV9fdGl0bGVfX3RleHQge1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBjb2xvcjogIzE1MjUyZDtcbiAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6ICMxNTI1MmQ7XG59XG4uaG9tZV9fc2hvd2Nhc2VfX3RpdGxlVG9wTGVmdCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1cmVtO1xuICBsZWZ0OiA2cmVtO1xufVxuLmhvbWVfX3Nob3djYXNlX190aXRsZUJ0bUxlZnQge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogNXJlbTtcbiAgbGVmdDogNnJlbTtcbn1cbi5ob21lX19zaG93Y2FzZV9fdGl0bGVUb3BSaWdodCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1cmVtO1xuICByaWdodDogNnJlbTtcbn1cbi5ob21lX19zaG93Y2FzZV9fdGl0bGVCdG1SaWdodCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiA1cmVtO1xuICByaWdodDogNnJlbTtcbn1cbi5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeSB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgIzE1MjUyZDtcbn1cbi5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeV9fd3JhcHBlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjMTUyNTJkO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzE1MjUyZDtcbiAgd2lkdGg6IDgwJTtcbiAgcGFkZGluZzogMTByZW07XG59XG4uaG9tZV9fc2hvd2Nhc2VfX2dhbGxlcnlfX2ltYWdlIHtcbiAgaGVpZ2h0OiAyNXJlbTtcbiAgd2lkdGg6IDI1cmVtO1xuICB6LWluZGV4OiAyO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4uaG9tZV9fc2hvd2Nhc2VfX2dhbGxlcnlfX2ltYWdlX19maWd1cmUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbi5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeV9faW1hZ2VfX2ZpZ3VyZV9faW1hZ2Uge1xuICBvYmplY3QtZml0OiBjb3Zlcjtcbn1cbi5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeV9faW1hZ2VfX2xpbmsge1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgei1pbmRleDogNDtcbn1cbi5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeV9faW1hZ2VfX3RpdGxlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDFyZW07XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICB6LWluZGV4OiAzO1xuICBoZWlnaHQ6IDQ1cmVtO1xuICB3aWR0aDogNDVyZW07XG59XG4uaG9tZV9fc2hvd2Nhc2VfX2dhbGxlcnlfX2ltYWdlX190aXRsZV9fc3ZnIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMXJlbSk7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIHN0cm9rZS13aWR0aDogMS41cHg7XG4gIGZpbGw6ICMxNTI1MmQ7XG4gIGFuaW1hdGlvbjogcm90YXRpb24gMzZzIGxpbmVhciBpbmZpbml0ZTtcbn1cbi5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeV9faW1hZ2VfX3RpdGxlX190ZXh0IHtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuICAtd2Via2l0LXRleHQtc3Ryb2tlOiAwLjJyZW0gIzE1MjUyZDtcbn1cbi5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeV9fbGluayB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiA1cmVtO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xufVxuLmhvbWVfX3Nob3djYXNlX19nYWxsZXJ5X19saW5rX193b3JrIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAwLjVyZW07XG59XG4uaG9tZV9fc2hvd2Nhc2VfX2dhbGxlcnlfX2xpbmtfX3dvcmtfX3RleHQge1xuICBjb2xvcjogIzE1MjUyZDtcbn1cbi5ob21lX19zaG93Y2FzZV9fZ2FsbGVyeV9fbGlua19fd29ya19faWNvbiB7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgaGVpZ2h0OiAycmVtO1xuICB3aWR0aDogMnJlbTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLmhvbWVfX3Nob3djYXNlX19nYWxsZXJ5X19saW5rX193b3JrX19pY29uX19tZWRpYSB7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xufVxuXG4uaG9tZV9fYWJvdXQge1xuICBoZWlnaHQ6IDExMGR2aDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgei1pbmRleDogMztcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAzMHJlbSAxZnI7XG59XG4uaG9tZV9fYWJvdXRfX3RpdGxlIHtcbiAgZ3JpZC1hcmVhOiAxLzEvMi8tMTtcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBoZWlnaHQ6IDEwcmVtO1xuICB3aWR0aDogODAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDElO1xufVxuLmhvbWVfX2Fib3V0X190aXRsZV9fdGV4dCB7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xufVxuLmhvbWVfX2Fib3V0X190aXRsZV9fdGV4dDpudGgtb2YtdHlwZSgxKSB7XG4gIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLXdlYmtpdC10ZXh0LXN0cm9rZTogMC4zcmVtICMxNTI1MmQ7XG4gIHotaW5kZXg6IDE7XG4gIG9wYWNpdHk6IDAuNDtcbn1cbi5ob21lX19hYm91dF9fdGl0bGVfX3RleHQ6bnRoLW9mLXR5cGUoMikge1xuICAtd2Via2l0LXRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC13ZWJraXQtdGV4dC1zdHJva2U6IDAuM3JlbSAjRkM1MjAwO1xuICBvcGFjaXR5OiAwLjY7XG4gIHotaW5kZXg6IDI7XG59XG4uaG9tZV9fYWJvdXRfX3RpdGxlX190ZXh0Om50aC1vZi10eXBlKDMpIHtcbiAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6ICMxNTI1MmQ7XG4gIHotaW5kZXg6IDM7XG59XG4uaG9tZV9fYWJvdXRfX2luZm8ge1xuICBncmlkLWFyZWE6IDIvMi8tMS8zO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xufVxuLmhvbWVfX2Fib3V0X19pbmZvX19saW5rIHtcbiAgbWFyZ2luLXRvcDogMnJlbTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG59XG4uaG9tZV9fYWJvdXRfX2luZm9fX2xpbmtfX3VybCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMC41cmVtO1xufVxuLmhvbWVfX2Fib3V0X19pbmZvX19saW5rX191cmxfX2ljb24ge1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGhlaWdodDogMnJlbTtcbiAgd2lkdGg6IDJyZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5ob21lX19hYm91dF9faW5mb19fbGlua19fdXJsX19pY29uX19tZWRpYSB7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xufVxuLmhvbWVfX2Fib3V0X19sZWZ0IHtcbiAgZ3JpZC1hcmVhOiAyLzEvLTEvMjtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMTByZW07XG4gIGdyaWQtdGVtcGxhdGUtcm93czogMTByZW0gMWZyIDEwcmVtO1xuICBwYWRkaW5nLWxlZnQ6IDZyZW07XG59XG4uaG9tZV9fYWJvdXRfX2xlZnRfX2NvdmVyIHtcbiAgZ3JpZC1hcmVhOiAxLzEvLTEvLTE7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICNmZmVhZGI7XG4gIHRyYW5zZm9ybS1vcmlnaW46IHRvcDtcbn1cbi5ob21lX19hYm91dF9fbGVmdF9fbGFyZ2Uge1xuICBncmlkLWFyZWE6IDIvMS8zLzI7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG4uaG9tZV9fYWJvdXRfX2xlZnRfX2xhcmdlX19maWd1cmUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbi5ob21lX19hYm91dF9fbGVmdF9fbGFyZ2VfX2ZpZ3VyZV9faW1hZ2Uge1xuICBvYmplY3QtZml0OiBjb3Zlcjtcbn1cbi5ob21lX19hYm91dF9fbGVmdF9fc21hbGwge1xuICBncmlkLWFyZWE6IDEvMS8zLy0xO1xuICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xuICBqdXN0aWZ5LXNlbGY6IGZsZXgtZW5kO1xuICBoZWlnaHQ6IDI1cmVtO1xuICB3aWR0aDogMjByZW07XG59XG4uaG9tZV9fYWJvdXRfX2xlZnRfX3NtYWxsX19maWd1cmUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbi5ob21lX19hYm91dF9fbGVmdF9fc21hbGxfX2ZpZ3VyZV9faW1hZ2Uge1xuICBvYmplY3QtZml0OiBjb3Zlcjtcbn1cbi5ob21lX19hYm91dF9fcmlnaHQge1xuICBncmlkLWFyZWE6IDIvMy8tMS8tMTtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMHJlbSAxZnI7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogMTByZW0gMWZyIDEwcmVtO1xuICBwYWRkaW5nLXJpZ2h0OiA2cmVtO1xufVxuLmhvbWVfX2Fib3V0X19yaWdodF9fY292ZXIge1xuICBncmlkLWFyZWE6IDEvMS8tMS8tMTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogI2ZmZWFkYjtcbiAgdHJhbnNmb3JtLW9yaWdpbjogdG9wO1xufVxuLmhvbWVfX2Fib3V0X19yaWdodF9fbGFyZ2Uge1xuICBncmlkLWFyZWE6IDIvMi8zLy0xO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmhvbWVfX2Fib3V0X19yaWdodF9fbGFyZ2VfX2ZpZ3VyZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuLmhvbWVfX2Fib3V0X19yaWdodF9fbGFyZ2VfX2ZpZ3VyZV9faW1hZ2Uge1xuICBvYmplY3QtZml0OiBjb3Zlcjtcbn1cblxuLndvcmsge1xuICB6LWluZGV4OiAzO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLndvcmtfX2JvcmRlcnMge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgIzE1MjUyZDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMxNTI1MmQ7XG4gIGhlaWdodDogNTByZW07XG4gIHdpZHRoOiA1MCU7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcbiAgei1pbmRleDogMTtcbn1cbi53b3JrX193cmFwcGVyIHtcbiAgei1pbmRleDogMztcbn1cbi53b3JrX19nYWxsZXJ5IHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMi41cmVtO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBwYWRkaW5nOiAyLjVyZW0gMTByZW07XG59XG4ud29ya19fZ2FsbGVyeV9faW1hZ2Uge1xuICBoZWlnaHQ6IDI1cmVtO1xuICB3aWR0aDogMjVyZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi53b3JrX19nYWxsZXJ5X19pbWFnZV9fbGluayB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB6LWluZGV4OiA0O1xufVxuLndvcmtfX2dhbGxlcnlfX2ltYWdlX19maWd1cmUge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbi53b3JrX19nYWxsZXJ5X19pbWFnZV9fZmlndXJlX19pbWFnZSB7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xufVxuLndvcmtfX3Zpc3VhbGlzZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogNHJlbTtcbiAgbGVmdDogMTByZW07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMC41cmVtO1xufVxuLndvcmtfX3Zpc3VhbGlzZXJfX2JveCB7XG4gIGhlaWdodDogMnJlbTtcbiAgd2lkdGg6IDJyZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi53b3JrX192aXN1YWxpc2VyX19ib3hfX2NvdmVyIHtcbiAgYmFja2dyb3VuZDogI2ZmZWFkYjtcbiAgdHJhbnNmb3JtLW9yaWdpbjogdG9wO1xuICB6LWluZGV4OiAzO1xufVxuLndvcmtfX3Zpc3VhbGlzZXJfX2JveF9faW5uZXIge1xuICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICBiYWNrZ3JvdW5kOiAjMTUyNTJkO1xuICB6LWluZGV4OiAyO1xufVxuLndvcmtfX2luZGV4IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDZyZW07XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDAuNXJlbTtcbn1cbi53b3JrX19pbmRleF9fY3VycmVudCB7XG4gIGhlaWdodDogMi4xcmVtO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLndvcmtfX2luZGV4X19udW1iZXIge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLndvcmtfX2luZGV4X19zbGFzaCB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG4ud29ya19faW5kZXhfX3NsYXNoX190ZXh0IHtcbiAgZm9udC1zaXplOiAycmVtO1xufVxuLndvcmtfX2luZGV4X190b3RhbCB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG4ud29ya19fdGl0bGVzIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDZyZW07XG4gIHJpZ2h0OiAxNXJlbTtcbiAgd2lkdGg6IDIwcmVtO1xufVxuLndvcmtfX3RpdGxlc19fdGl0bGUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG4ud29ya19fdGl0bGVzX190aXRsZV9fdGV4dCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGNvbG9yOiAjRkM1MjAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufSIsIiVjb3Zlclxue1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbn1cblxuJWNlbnRlclxue1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuQG1peGluIHJhdGlvICgkaGVpZ2h0LCAkd2lkdGgpXG57XG4gIGZvbnQtc2l6ZTogMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICY6YWZ0ZXJcbiAge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwYWRkaW5nLXRvcDogJHdpZHRoIC8gJGhlaWdodCAqIDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbn1cbiIsIi8qIFJlY29tbWVuZGVkIHN0eWxlcyBmb3IgU3BsaXR0aW5nICovXG4uc3BsaXR0aW5nIC5jaGFyIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKiBQc3VlZG8tZWxlbWVudCBjaGFycyAqL1xuLnNwbGl0dGluZyAuY2hhciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgcHN1ZWRvIGVsZW1lbnRzIHdpdGggdGhlIGNoYXJhY3RlciB0byBhbGxvdyBmb3IgZXhwYW5kZWQgZWZmZWN0c1xuICogU2V0IHRvIGBkaXNwbGF5OiBub25lYCBieSBkZWZhdWx0OyBqdXN0IGFkZCBgZGlzcGxheTogYmxvY2tgIHdoZW4geW91IHdhbnRcbiAqIHRvIHVzZSB0aGUgcHN1ZWRvIGVsZW1lbnRzXG4gKi9cbi5zcGxpdHRpbmcgLmNoYXI6OmJlZm9yZSxcbi5zcGxpdHRpbmcgLmNoYXI6OmFmdGVyIHtcbiAgY29udGVudDogYXR0cihkYXRhLWNoYXIpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB0cmFuc2l0aW9uOiBpbmhlcml0O1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbn1cblxuLyogRXhwYW5kZWQgQ1NTIFZhcmlhYmxlcyAqL1xuXG4uc3BsaXR0aW5nIHtcbiAgLyogVGhlIGNlbnRlciB3b3JkIGluZGV4ICovXG4gIC0td29yZC1jZW50ZXI6IGNhbGMoKHZhcigtLXdvcmQtdG90YWwpIC0gMSkgLyAyKTtcblxuICAvKiBUaGUgY2VudGVyIGNoYXJhY3RlciBpbmRleCAqL1xuICAtLWNoYXItY2VudGVyOiBjYWxjKCh2YXIoLS1jaGFyLXRvdGFsKSAtIDEpIC8gMik7XG5cbiAgLyogVGhlIGNlbnRlciBjaGFyYWN0ZXIgaW5kZXggKi9cbiAgLS1saW5lLWNlbnRlcjogY2FsYygodmFyKC0tbGluZS10b3RhbCkgLSAxKSAvIDIpO1xufVxuXG4uc3BsaXR0aW5nIC53b3JkIHtcbiAgLyogUGVjZW50ICgwLTEpIG9mIHRoZSB3b3JkJ3MgcG9zaXRpb24gKi9cbiAgLS13b3JkLXBlcmNlbnQ6IGNhbGModmFyKC0td29yZC1pbmRleCkgLyB2YXIoLS13b3JkLXRvdGFsKSk7XG5cbiAgLyogUGVjZW50ICgwLTEpIG9mIHRoZSBsaW5lJ3MgcG9zaXRpb24gKi9cbiAgLS1saW5lLXBlcmNlbnQ6IGNhbGModmFyKC0tbGluZS1pbmRleCkgLyB2YXIoLS1saW5lLXRvdGFsKSk7XG59XG5cbi5zcGxpdHRpbmcgLmNoYXIge1xuICAvKiBQZXJjZW50ICgwLTEpIG9mIHRoZSBjaGFyJ3MgcG9zaXRpb24gKi9cbiAgLS1jaGFyLXBlcmNlbnQ6IGNhbGModmFyKC0tY2hhci1pbmRleCkgLyB2YXIoLS1jaGFyLXRvdGFsKSk7XG5cbiAgLyogT2Zmc2V0IGZyb20gY2VudGVyLCBwb3NpdGl2ZSAmIG5lZ2F0aXZlICovXG4gIC0tY2hhci1vZmZzZXQ6IGNhbGModmFyKC0tY2hhci1pbmRleCkgLSB2YXIoLS1jaGFyLWNlbnRlcikpO1xuXG4gIC8qIEFic29sdXRlIGRpc3RhbmNlIGZyb20gY2VudGVyLCBvbmx5IHBvc2l0aXZlICovXG4gIC0tZGlzdGFuY2U6IGNhbGMoXG4gICAgICh2YXIoLS1jaGFyLW9mZnNldCkgKiB2YXIoLS1jaGFyLW9mZnNldCkpIC8gdmFyKC0tY2hhci1jZW50ZXIpXG4gICk7XG5cbiAgLyogRGlzdGFuY2UgZnJvbSBjZW50ZXIgd2hlcmUgLTEgaXMgdGhlIGZhciBsZWZ0LCAwIGlzIGNlbnRlciwgMSBpcyBmYXIgcmlnaHQgKi9cbiAgLS1kaXN0YW5jZS1zaW5lOiBjYWxjKHZhcigtLWNoYXItb2Zmc2V0KSAvIHZhcigtLWNoYXItY2VudGVyKSk7XG5cbiAgLyogRGlzdGFuY2UgZnJvbSBjZW50ZXIgd2hlcmUgMSBpcyBmYXIgbGVmdC9mYXIgcmlnaHQsIDAgaXMgY2VudGVyICovXG4gIC0tZGlzdGFuY2UtcGVyY2VudDogY2FsYygodmFyKC0tZGlzdGFuY2UpIC8gdmFyKC0tY2hhci1jZW50ZXIpKSk7XG59XG5cbi5zcGxpdHRpbmcuY2VsbHMgaW1nIHsgd2lkdGg6IDEwMCU7IGRpc3BsYXk6IGJsb2NrOyB9XG5cbkBzdXBwb3J0cyAoIGRpc3BsYXk6IGdyaWQgKSB7XG4gIC5zcGxpdHRpbmcuY2VsbHMge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG5cbiAgLnNwbGl0dGluZyAuY2VsbC1ncmlkIHtcbiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlOiByZXBlYXQoIHZhcigtLXJvdy10b3RhbCksIDFmciApIC8gcmVwZWF0KCB2YXIoLS1jb2wtdG90YWwpLCAxZnIgKTtcbiAgfVxuXG4gIC5zcGxpdHRpbmcgLmNlbGwge1xuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cblxuICAuc3BsaXR0aW5nIC5jZWxsLWlubmVyIHtcbiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIC8qIFNpemUgdG8gZml0IHRoZSB3aG9sZSBjb250YWluZXIgc2l6ZSAqL1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgKiB2YXIoLS1jb2wtdG90YWwpKTtcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAqIHZhcigtLXJvdy10b3RhbCkpO1xuICAgIC8qIFBvc2l0aW9uIHByb3Blcmx5ICovXG4gICAgbGVmdDogY2FsYygtMTAwJSAqIHZhcigtLWNvbC1pbmRleCkpO1xuICAgIHRvcDogY2FsYygtMTAwJSAqIHZhcigtLXJvdy1pbmRleCkpO1xuICB9XG5cbiAgLyogSGVscGVyIHZhcmlhYmxlcyBmb3IgYWR2YW5jZWQgZWZmZWN0cyAqL1xuICAuc3BsaXR0aW5nIC5jZWxsIHtcbiAgICAtLWNlbnRlci14OiBjYWxjKCh2YXIoLS1jb2wtdG90YWwpIC0gMSkgLyAyKTtcbiAgICAtLWNlbnRlci15OiBjYWxjKCh2YXIoLS1yb3ctdG90YWwpIC0gMSkgLyAyKTtcblxuICAgIC8qIE9mZnNldCBmcm9tIGNlbnRlciwgcG9zaXRpdmUgJiBuZWdhdGl2ZSAqL1xuICAgIC0tb2Zmc2V0LXg6IGNhbGModmFyKC0tY29sLWluZGV4KSAtIHZhcigtLWNlbnRlci14KSk7XG4gICAgLS1vZmZzZXQteTogY2FsYyh2YXIoLS1yb3ctaW5kZXgpIC0gdmFyKC0tY2VudGVyLXkpKTtcblxuICAgIC8qIEFic29sdXRlIGRpc3RhbmNlIGZyb20gY2VudGVyLCBvbmx5IHBvc2l0aXZlICovXG4gICAgLS1kaXN0YW5jZS14OiBjYWxjKCAodmFyKC0tb2Zmc2V0LXgpICogdmFyKC0tb2Zmc2V0LXgpKSAvIHZhcigtLWNlbnRlci14KSApO1xuXG4gICAgLyogQWJzb2x1dGUgZGlzdGFuY2UgZnJvbSBjZW50ZXIsIG9ubHkgcG9zaXRpdmUgKi9cbiAgICAtLWRpc3RhbmNlLXk6IGNhbGMoICh2YXIoLS1vZmZzZXQteSkgKiB2YXIoLS1vZmZzZXQteSkpIC8gdmFyKC0tY2VudGVyLXkpICk7XG4gIH1cbn1cbiIsIiVwYWdlXG57XG4gIEBleHRlbmQgJWNvdmVyO1xuXG4gIG9wYWNpdHk6IDA7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cblxuJXBhZ2VfX3dyYXBwZXJcbntcbiAgY29sb3I6IGluaGVyaXQ7XG59XG4iLCIldGl0bGUtMTZcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LWJ1dGxlcjtcbiAgZm9udC1zaXplOiAxLjZyZW07XG59XG5cbiV0aXRsZS0xOFxue1xuICBmb250LWZhbWlseTogJGZvbnQtYnV0bGVyO1xuICBmb250LXNpemU6IDEuOHJlbTtcbn1cblxuJXRpdGxlLTIwXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1idXRsZXI7XG4gIGZvbnQtc2l6ZTogMi4wcmVtO1xufVxuXG4ldGl0bGUtMjJcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LWJ1dGxlcjtcbiAgZm9udC1zaXplOiAyLjJyZW07XG59XG5cbiV0aXRsZS0yNFxue1xuICBmb250LWZhbWlseTogJGZvbnQtYnV0bGVyO1xuICBmb250LXNpemU6IDIuNHJlbTtcbn1cblxuJXRpdGxlLTI2XG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1idXRsZXI7XG4gIGZvbnQtc2l6ZTogMi42cmVtO1xufVxuXG4ldGl0bGUtMjhcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LWJ1dGxlcjtcbiAgZm9udC1zaXplOiAyLjhyZW07XG59XG5cbiV0aXRsZS0zMFxue1xuICBmb250LWZhbWlseTogJGZvbnQtYnV0bGVyO1xuICBmb250LXNpemU6IDMuMHJlbTtcbn1cblxuJXRpdGxlLTQwXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1idXRsZXI7XG4gIGZvbnQtc2l6ZTogNC4wcmVtO1xufVxuXG4ldGl0bGUtNTBcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LWJ1dGxlcjtcbiAgZm9udC1zaXplOiA1LjByZW07XG59XG5cbiV0aXRsZS02MFxue1xuICBmb250LWZhbWlseTogJGZvbnQtYnV0bGVyO1xuICBmb250LXNpemU6IDYuMHJlbTtcbn1cblxuJXRpdGxlLTcwXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1idXRsZXI7XG4gIGZvbnQtc2l6ZTogNy4wcmVtO1xufVxuXG4ldGl0bGUtODBcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LWJ1dGxlcjtcbiAgZm9udC1zaXplOiA4LjByZW07XG59XG5cbiV0aXRsZS05MFxue1xuICBmb250LWZhbWlseTogJGZvbnQtYnV0bGVyO1xuICBmb250LXNpemU6IDkuMHJlbTtcbn1cblxuJXRpdGxlLTEwMFxue1xuICBmb250LWZhbWlseTogJGZvbnQtYnV0bGVyO1xuICBmb250LXNpemU6IDEwLjByZW07XG59XG5cbiV0aXRsZS0xNTBcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LWJ1dGxlcjtcbiAgZm9udC1zaXplOiAxNS4wcmVtO1xufVxuXG4ldGl0bGUtMjAwXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1idXRsZXI7XG4gIGZvbnQtc2l6ZTogMjAuMHJlbTtcbn1cblxuJXRpdGxlLTI1MFxue1xuICBmb250LWZhbWlseTogJGZvbnQtYnV0bGVyO1xuICBmb250LXNpemU6IDI1LjByZW07XG59XG5cbiV0aXRsZS0zMDBcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LWJ1dGxlcjtcbiAgZm9udC1zaXplOiAzMC4wcmVtO1xufVxuXG4ldGl0bGUtNDAwXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1idXRsZXI7XG4gIGZvbnQtc2l6ZTogNDAuMHJlbTtcbn0iLCIkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW46ICMxNTI1MmQ7IFxuJGNvbG9yLWFudGlxdWUtd2hpdGU6ICNmZmVhZGI7IFxuJGNvbG9yLWxpZ2h0LWdyZXk6ICNjZmQ3ZDY7XG4kY29sb3ItYWVyb3NwYWNlLW9yYW5nZTogI0ZDNTIwMDtcbiRjb2xvci1jYXJyaWJlYW4tZ3JlZW46ICMwM0Q4OUY7IFxuXG4kZWFzZS1pbi1vdXQ6IGN1YmljLWJlemllcigwLjc3LCAwLCAwLjE3NSwgMSk7XG4kZWFzZS1vdXQtZXhwbzogY3ViaWMtYmV6aWVyKDAuMTksIDEsIDAuMjIsIDEpO1xuXG4kZm9udC1idXRsZXI6ICdCdXRsZXInO1xuJGZvbnQtc2F0b3NoaTogJ1NhdG9zaGktUmVndWxhcic7XG5cbiR6LWluZGV4ZXM6IChcbiAgJ3ByZWxvYWRlcicsXG4gICduYXZpZ2F0aW9uJyxcbiAgJ21vZGFsJyxcbiAgJ2xpbmsnLFxuICAnY29udGVudCcsXG4gICdjYW52YXMnLFxuICAnZm9vdGVyJ1xuKTtcbiIsIiVkZXNjLTEwXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1zYXRvc2hpO1xuICBmb250LXNpemU6IDEuMHJlbTtcbn1cblxuJWRlc2MtMTJcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LXNhdG9zaGk7XG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xufVxuXG4lZGVzYy0xNFxue1xuICBmb250LWZhbWlseTogJGZvbnQtc2F0b3NoaTtcbiAgZm9udC1zaXplOiAxLjRyZW07XG59XG5cbiVkZXNjLTE2XG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1zYXRvc2hpO1xuICBmb250LXNpemU6IDEuNnJlbTtcbn1cblxuJWRlc2MtMThcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LXNhdG9zaGk7XG4gIGZvbnQtc2l6ZTogMS44cmVtO1xufVxuXG4lZGVzYy0yMFxue1xuICBmb250LWZhbWlseTogJGZvbnQtc2F0b3NoaTtcbiAgZm9udC1zaXplOiAyLjByZW07XG59XG5cbiVkZXNjLTIyXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1zYXRvc2hpO1xuICBmb250LXNpemU6IDIuMnJlbTtcbn1cblxuJWRlc2MtMjRcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LXNhdG9zaGk7XG4gIGZvbnQtc2l6ZTogMi40cmVtO1xufVxuXG4lZGVzYy0yNlxue1xuICBmb250LWZhbWlseTogJGZvbnQtc2F0b3NoaTtcbiAgZm9udC1zaXplOiAyLjZyZW07XG59XG5cbiVkZXNjLTI4XG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1zYXRvc2hpO1xuICBmb250LXNpemU6IDIuOHJlbTtcbn1cblxuJWRlc2MtMzBcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LXNhdG9zaGk7XG4gIGZvbnQtc2l6ZTogMy4wcmVtO1xufVxuXG4lZGVzYy0zMlxue1xuICBmb250LWZhbWlseTogJGZvbnQtc2F0b3NoaTtcbiAgZm9udC1zaXplOiAzLjJyZW07XG59XG5cbiVkZXNjLTM0XG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1zYXRvc2hpO1xuICBmb250LXNpemU6IDMuNHJlbTtcbn1cblxuJWRlc2MtMzZcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LXNhdG9zaGk7XG4gIGZvbnQtc2l6ZTogMy42cmVtO1xufVxuXG4lZGVzYy0zOFxue1xuICBmb250LWZhbWlseTogJGZvbnQtc2F0b3NoaTtcbiAgZm9udC1zaXplOiAzLjhyZW07XG59XG5cbiVkZXNjLTQwXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1zYXRvc2hpO1xuICBmb250LXNpemU6IDQuMHJlbTtcbn1cbiIsIiVsaW5rX193cmFwcGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG59XG5cbiVsaW5rX19saW5lX19ib3R0b21fX2xyIHtcbiAgY29udGVudDogJyc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiAwJTtcbiAgbGVmdDogMCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMXB4O1xuICBiYWNrZ3JvdW5kOiBjdXJyZW50Q29sb3I7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjdzICRlYXNlLWluLW91dDtcbn1cblxuJWxpbmtfX2xpbmVfX2JvdHRvbV9fbHItLXZpc2libGUge1xuICB0cmFuc2Zvcm06IHNjYWxlWCgxKTtcbiAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xufVxuXG4lbGlua19fbGluZV9fYm90dG9tX19sci0taGlkZGVuIHtcbiAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcbn1cblxuJWxpbmtfX2JvdHRvbV9fbHIge1xuICBAZXh0ZW5kICVsaW5rX193cmFwcGVyO1xuXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcblxuICAmOmFmdGVyIHtcbiAgICBAZXh0ZW5kICVsaW5rX19saW5lX19ib3R0b21fX2xyO1xuICAgIEBleHRlbmQgJWxpbmtfX2xpbmVfX2JvdHRvbV9fbHItLXZpc2libGU7XG4gIH1cbn1cblxuJWxpbmtfX2JvdHRvbV9fbHItLWhpZGRlbiB7XG4gIEBleHRlbmQgJWxpbmtfX3dyYXBwZXI7XG5cbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXG4gICY6YWZ0ZXIge1xuICAgIEBleHRlbmQgJWxpbmtfX2xpbmVfX2JvdHRvbV9fbHI7XG4gICAgQGV4dGVuZCAlbGlua19fbGluZV9fYm90dG9tX19sci0taGlkZGVuO1xuICB9XG5cbiAgJjpob3ZlciB7XG5cbiAgICAmOmFmdGVyIHtcbiAgICAgIEBleHRlbmQgJWxpbmtfX2xpbmVfX2JvdHRvbV9fbHItLXZpc2libGU7XG4gICAgfVxuICB9XG59IiwiQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1idXRsZXI7XG4gIHNyYzogdXJsKCcuLi9mb250cy9CdXRsZXIud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksXG4gICAgICB1cmwoJy4uL2ZvbnRzL0J1dGxlci53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXG4gICAgICB1cmwoJy4uL2ZvbnRzL0J1dGxlcl9SZWd1bGFyLm90ZicpIGZvcm1hdCgnb3BlbnR5cGUnKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xufVxuXG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJGZvbnQtc2F0b3NoaTtcbiAgc3JjOiB1cmwoJy4uL2ZvbnRzL1NhdG9zaGktUmVndWxhci53b2ZmMicpIGZvcm1hdCgnd29mZjInKSxcbiAgICAgICB1cmwoJy4uL2ZvbnRzL1NhdG9zaGktUmVndWxhci53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXG4gICAgICAgdXJsKCcuLi9mb250cy9TYXRvc2hpLVJlZ3VsYXIudHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xuICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbn0iLCIqXG57XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHVzZXItc2VsZWN0OiBub25lO1xufVxuXG5odG1sXG57XG4gIEBleHRlbmQgJWNvdmVyO1xuXG4gIGZvbnQtc2l6ZTogY2FsYygxMDB2dyAvIDE5MjBweCAqIDEwcHgpO1xuXG4gIG92ZXJzY3JvbGwtYmVoYXZpb3I6IG5vbmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBvc2l0aW9uOiBmaXhlZDtcblxuICBiYWNrZ3JvdW5kOiAkY29sb3ItYW50aXF1ZS13aGl0ZTtcbiAgY29sb3I6ICRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjtcblxuICBAaW5jbHVkZSBtZWRpYSgnPHBob25lJylcbiAge1xuICAgIGZvbnQtc2l6ZTogY2FsYygxMDB2dyAvIDc1MHB4ICogMTBweCk7XG4gIH1cbn1cblxuYm9keVxue1xuICBAZXh0ZW5kICVjb3ZlcjtcbiAgQGV4dGVuZCAlZGVzYy0xNjtcblxuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1zYXRvc2hpO1xufVxuXG5jYW52YXNcbntcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB6LWluZGV4OiB6KCdjYW52YXMnKTtcbiAgLy9wb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuYVxue1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBvdXRsaW5lOiBub25lO1xufVxuXG5pbWdcbntcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuNXMgZWFzZTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuLmxvYWRlZCBcbntcbiAgb3BhY2l0eTogMTtcbn1cblxuLmNvbnRlbnRcbntcbiAgQGV4dGVuZCAlY292ZXI7XG59XG5cbltkYXRhLWFuaW1hdGlvbj1cInBhcmFncmFwaFwiXVxue1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xuXG4gIHNwYW5cbiAge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBhZGRpbmc6IDAgMC4ycmVtO1xuICB9XG59IiwiLy8gICAgIF8gICAgICAgICAgICBfICAgICAgICAgICBfICAgICAgICAgICAgICAgICAgICAgICAgICAgXyBfXG4vLyAgICAoXykgICAgICAgICAgfCB8ICAgICAgICAgfCB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgKF8pXG4vLyAgICAgXyBfIF9fICAgX19ffCB8XyAgIF8gIF9ffCB8IF9fXyAgIF8gX18gX19fICAgX19fICBfX3wgfF8gIF9fIF9cbi8vICAgIHwgfCAnXyBcXCAvIF9ffCB8IHwgfCB8LyBfYCB8LyBfIFxcIHwgJ18gYCBfIFxcIC8gXyBcXC8gX2AgfCB8LyBfYCB8XG4vLyAgICB8IHwgfCB8IHwgKF9ffCB8IHxffCB8IChffCB8ICBfXy8gfCB8IHwgfCB8IHwgIF9fLyAoX3wgfCB8IChffCB8XG4vLyAgICB8X3xffCB8X3xcXF9fX3xffFxcX18sX3xcXF9fLF98XFxfX198IHxffCB8X3wgfF98XFxfX198XFxfXyxffF98XFxfXyxffFxuLy9cbi8vICAgICAgU2ltcGxlLCBlbGVnYW50IGFuZCBtYWludGFpbmFibGUgbWVkaWEgcXVlcmllcyBpbiBTYXNzXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHYyLjAuMFxuLy9cbi8vICAgICAgICBodHRwczovL2VkdWFyZG9ib3VjYXMuZ2l0aHViLmlvL2luY2x1ZGUtbWVkaWFcbi8vXG4vLyAgICAgICAgIEF1dGhvcnM6IEVkdWFyZG8gQm91Y2FzIChAZWR1YXJkb2JvdWNhcylcbi8vICAgICAgICAgICAgICAgICAgS2l0dHkgR2lyYXVkZWwgKEBraXR0eWdpcmF1ZGVsKVxuLy9cbi8vICAgICAgVGhpcyBwcm9qZWN0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2VcbkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vL1xuLy8vIGluY2x1ZGUtbWVkaWEgbGlicmFyeSBwdWJsaWMgY29uZmlndXJhdGlvblxuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vL1xuQHVzZSAnc2FzczptYXRoJztcbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ3Nhc3M6bGlzdCc7XG5AdXNlICdzYXNzOnN0cmluZyc7XG5AdXNlICdzYXNzOm1ldGEnO1xuXG4vLy9cbi8vLyBDcmVhdGVzIGEgbGlzdCBvZiBnbG9iYWwgYnJlYWtwb2ludHNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc2luZ2xlIGJyZWFrcG9pbnQgd2l0aCB0aGUgbGFiZWwgYHBob25lYFxuLy8vICAkYnJlYWtwb2ludHM6ICgncGhvbmUnOiAzMjBweCk7XG4vLy9cbiRicmVha3BvaW50czogKFxuICAncGhvbmUnOiAzMjBweCxcbiAgJ3RhYmxldCc6IDc2OHB4LFxuICAnZGVza3RvcCc6IDEwMjRweCxcbikgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIENyZWF0ZXMgYSBsaXN0IG9mIHN0YXRpYyBleHByZXNzaW9ucyBvciBtZWRpYSB0eXBlc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENyZWF0ZXMgYSBzaW5nbGUgbWVkaWEgdHlwZSAoc2NyZWVuKVxuLy8vICAkbWVkaWEtZXhwcmVzc2lvbnM6ICgnc2NyZWVuJzogJ3NjcmVlbicpO1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENyZWF0ZXMgYSBzdGF0aWMgZXhwcmVzc2lvbiB3aXRoIGxvZ2ljYWwgZGlzanVuY3Rpb24gKE9SIG9wZXJhdG9yKVxuLy8vICAkbWVkaWEtZXhwcmVzc2lvbnM6IChcbi8vLyAgICAncmV0aW5hMngnOiAnKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSdcbi8vLyAgKTtcbi8vL1xuJG1lZGlhLWV4cHJlc3Npb25zOiAoXG4gICdzY3JlZW4nOiAnc2NyZWVuJyxcbiAgJ3ByaW50JzogJ3ByaW50JyxcbiAgJ2hhbmRoZWxkJzogJ2hhbmRoZWxkJyxcbiAgJ2xhbmRzY2FwZSc6ICcob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICAncG9ydHJhaXQnOiAnKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAncmV0aW5hMngnOlxuICAgICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCAobWluLXJlc29sdXRpb246IDJkcHB4KScsXG4gICdyZXRpbmEzeCc6XG4gICAgJygtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpLCAobWluLXJlc29sdXRpb246IDM1MGRwaSksIChtaW4tcmVzb2x1dGlvbjogM2RwcHgpJyxcbikgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIERlZmluZXMgYSBudW1iZXIgdG8gYmUgYWRkZWQgb3Igc3VidHJhY3RlZCBmcm9tIGVhY2ggdW5pdCB3aGVuIGRlY2xhcmluZyBicmVha3BvaW50cyB3aXRoIGV4Y2x1c2l2ZSBpbnRlcnZhbHNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgcGl4ZWxzIGlzIGRlZmluZWQgYXMgYDFgIGJ5IGRlZmF1bHRcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz4xMjhweCcpIHt9XG4vLy9cbi8vLyAgLyogR2VuZXJhdGVzOiAqL1xuLy8vICBAbWVkaWEgKG1pbi13aWR0aDogMTI5cHgpIHt9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gSW50ZXJ2YWwgZm9yIGVtcyBpcyBkZWZpbmVkIGFzIGAwLjAxYCBieSBkZWZhdWx0XG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+MjBlbScpIHt9XG4vLy9cbi8vLyAgLyogR2VuZXJhdGVzOiAqL1xuLy8vICBAbWVkaWEgKG1pbi13aWR0aDogMjAuMDFlbSkge31cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgcmVtcyBpcyBkZWZpbmVkIGFzIGAwLjFgIGJ5IGRlZmF1bHQsIHRvIGJlIHVzZWQgd2l0aCBgZm9udC1zaXplOiA2Mi41JTtgXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+Mi4wcmVtJykge31cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIEBtZWRpYSAobWluLXdpZHRoOiAyLjFyZW0pIHt9XG4vLy9cbiR1bml0LWludGVydmFsczogKFxuICAncHgnOiAxLFxuICAnZW0nOiAwLjAxLFxuICAncmVtJzogMC4xLFxuICAnJzogMCxcbikgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIERlZmluZXMgd2hldGhlciBzdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzIGlzIGF2YWlsYWJsZSwgdXNlZnVsIGZvciBjcmVhdGluZyBzZXBhcmF0ZSBzdHlsZXNoZWV0c1xuLy8vIGZvciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgbWVkaWEgcXVlcmllcy5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBEaXNhYmxlcyBzdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzXG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49dGFibGV0Jykge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIC5mb28ge1xuLy8vICAgIGNvbG9yOiB0b21hdG87XG4vLy8gIH1cbi8vL1xuJGltLW1lZGlhLXN1cHBvcnQ6IHRydWUgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIFNlbGVjdHMgd2hpY2ggYnJlYWtwb2ludCB0byBlbXVsYXRlIHdoZW4gc3VwcG9ydCBmb3IgbWVkaWEgcXVlcmllcyBpcyBkaXNhYmxlZC4gTWVkaWEgcXVlcmllcyB0aGF0IHN0YXJ0IGF0IG9yXG4vLy8gaW50ZXJjZXB0IHRoZSBicmVha3BvaW50IHdpbGwgYmUgZGlzcGxheWVkLCBhbnkgb3RoZXJzIHdpbGwgYmUgaWdub3JlZC5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBUaGlzIG1lZGlhIHF1ZXJ5IHdpbGwgc2hvdyBiZWNhdXNlIGl0IGludGVyY2VwdHMgdGhlIHN0YXRpYyBicmVha3BvaW50XG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcbi8vLyAgJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQ6ICdkZXNrdG9wJztcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49dGFibGV0Jykge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIC5mb28ge1xuLy8vICAgIGNvbG9yOiB0b21hdG87XG4vLy8gIH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBUaGlzIG1lZGlhIHF1ZXJ5IHdpbGwgTk9UIHNob3cgYmVjYXVzZSBpdCBkb2VzIG5vdCBpbnRlcmNlcHQgdGhlIGRlc2t0b3AgYnJlYWtwb2ludFxuLy8vICAkaW0tbWVkaWEtc3VwcG9ydDogZmFsc2U7XG4vLy8gICRpbS1uby1tZWRpYS1icmVha3BvaW50OiAndGFibGV0Jztcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49ZGVza3RvcCcpIHtcbi8vLyAgICAuZm9vIHtcbi8vLyAgICAgIGNvbG9yOiB0b21hdG87XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyAgLyogTm8gb3V0cHV0ICovXG4vLy9cbiRpbS1uby1tZWRpYS1icmVha3BvaW50OiAnZGVza3RvcCcgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIFNlbGVjdHMgd2hpY2ggbWVkaWEgZXhwcmVzc2lvbnMgYXJlIGFsbG93ZWQgaW4gYW4gZXhwcmVzc2lvbiBmb3IgaXQgdG8gYmUgdXNlZCB3aGVuIG1lZGlhIHF1ZXJpZXNcbi8vLyBhcmUgbm90IHN1cHBvcnRlZC5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBUaGlzIG1lZGlhIHF1ZXJ5IHdpbGwgc2hvdyBiZWNhdXNlIGl0IGludGVyY2VwdHMgdGhlIHN0YXRpYyBicmVha3BvaW50IGFuZCBjb250YWlucyBvbmx5IGFjY2VwdGVkIG1lZGlhIGV4cHJlc3Npb25zXG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcbi8vLyAgJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQ6ICdkZXNrdG9wJztcbi8vLyAgJGltLW5vLW1lZGlhLWV4cHJlc3Npb25zOiAoJ3NjcmVlbicpO1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj10YWJsZXQnLCAnc2NyZWVuJykge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vICAgLyogR2VuZXJhdGVzOiAqL1xuLy8vICAgLmZvbyB7XG4vLy8gICAgIGNvbG9yOiB0b21hdG87XG4vLy8gICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVGhpcyBtZWRpYSBxdWVyeSB3aWxsIE5PVCBzaG93IGJlY2F1c2UgaXQgaW50ZXJjZXB0cyB0aGUgc3RhdGljIGJyZWFrcG9pbnQgYnV0IGNvbnRhaW5zIGEgbWVkaWEgZXhwcmVzc2lvbiB0aGF0IGlzIG5vdCBhY2NlcHRlZFxuLy8vICAkaW0tbWVkaWEtc3VwcG9ydDogZmFsc2U7XG4vLy8gICRpbS1uby1tZWRpYS1icmVha3BvaW50OiAnZGVza3RvcCc7XG4vLy8gICRpbS1uby1tZWRpYS1leHByZXNzaW9uczogKCdzY3JlZW4nKTtcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49dGFibGV0JywgJ3JldGluYTJ4Jykge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vICAvKiBObyBvdXRwdXQgKi9cbi8vL1xuJGltLW5vLW1lZGlhLWV4cHJlc3Npb25zOiAoJ3NjcmVlbicsICdwb3J0cmFpdCcsICdsYW5kc2NhcGUnKSAhZGVmYXVsdDtcblxuLy8vL1xuLy8vIENyb3NzLWVuZ2luZSBsb2dnaW5nIGVuZ2luZVxuLy8vIEBhdXRob3IgS2l0dHkgR2lyYXVkZWxcbi8vLyBAYWNjZXNzIHByaXZhdGVcbi8vLy9cblxuLy8vXG4vLy8gTG9nIGEgbWVzc2FnZSBlaXRoZXIgd2l0aCBgQGVycm9yYCBpZiBzdXBwb3J0ZWRcbi8vLyBlbHNlIHdpdGggYEB3YXJuYCwgdXNpbmcgYGZlYXR1cmUtZXhpc3RzKCdhdC1lcnJvcicpYFxuLy8vIHRvIGRldGVjdCBzdXBwb3J0LlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZXNzYWdlIC0gTWVzc2FnZSB0byBsb2dcbi8vL1xuQGZ1bmN0aW9uIGltLWxvZygkbWVzc2FnZSkge1xuICBAaWYgbWV0YS5mZWF0dXJlLWV4aXN0cygnYXQtZXJyb3InKSB7XG4gICAgQGVycm9yICRtZXNzYWdlO1xuICB9IEBlbHNlIHtcbiAgICBAd2FybiAkbWVzc2FnZTtcbiAgICAkXzogbm9vcCgpO1xuICB9XG5cbiAgQHJldHVybiAkbWVzc2FnZTtcbn1cblxuLy8vXG4vLy8gV3JhcHBlciBtaXhpbiBmb3IgdGhlIGxvZyBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgdXNlZCB3aXRoIGEgbW9yZSBmcmllbmRseVxuLy8vIEFQSSB0aGFuIGBAaWYgaW0tbG9nKCcuLicpIHt9YCBvciBgJF86IGltLWxvZygnLi4nKWAuIEJhc2ljYWxseSwgdXNlIHRoZSBmdW5jdGlvblxuLy8vIHdpdGhpbiBmdW5jdGlvbnMgYmVjYXVzZSBpdCBpcyBub3QgcG9zc2libGUgdG8gaW5jbHVkZSBhIG1peGluIGluIGEgZnVuY3Rpb25cbi8vLyBhbmQgdXNlIHRoZSBtaXhpbiBldmVyeXdoZXJlIGVsc2UgYmVjYXVzZSBpdCdzIG11Y2ggbW9yZSBlbGVnYW50LlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZXNzYWdlIC0gTWVzc2FnZSB0byBsb2dcbi8vL1xuQG1peGluIGxvZygkbWVzc2FnZSkge1xuICBAaWYgaW0tbG9nKCRtZXNzYWdlKSB7XG4gIH1cbn1cblxuLy8vXG4vLy8gRnVuY3Rpb24gd2l0aCBubyBgQHJldHVybmAgY2FsbGVkIG5leHQgdG8gYEB3YXJuYCBpbiBTYXNzIDMuM1xuLy8vIHRvIHRyaWdnZXIgYSBjb21waWxpbmcgZXJyb3IgYW5kIHN0b3AgdGhlIHByb2Nlc3MuXG4vLy9cbkBmdW5jdGlvbiBub29wKCkge1xufVxuXG4vLy9cbi8vLyBEZXRlcm1pbmVzIHdoZXRoZXIgYSBsaXN0IG9mIGNvbmRpdGlvbnMgaXMgaW50ZXJjZXB0ZWQgYnkgdGhlIHN0YXRpYyBicmVha3BvaW50LlxuLy8vXG4vLy8gQHBhcmFtIHtBcmdsaXN0fSAgICRjb25kaXRpb25zICAtIE1lZGlhIHF1ZXJ5IGNvbmRpdGlvbnNcbi8vL1xuLy8vIEByZXR1cm4ge0Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIGlmIHRoZSBjb25kaXRpb25zIGFyZSBpbnRlcmNlcHRlZCBieSB0aGUgc3RhdGljIGJyZWFrcG9pbnRcbi8vL1xuQGZ1bmN0aW9uIGltLWludGVyY2VwdHMtc3RhdGljLWJyZWFrcG9pbnQoJGNvbmRpdGlvbnMuLi4pIHtcbiAgJG5vLW1lZGlhLWJyZWFrcG9pbnQtdmFsdWU6IG1hcC5nZXQoJGJyZWFrcG9pbnRzLCAkaW0tbm8tbWVkaWEtYnJlYWtwb2ludCk7XG5cbiAgQGlmIG5vdCAkbm8tbWVkaWEtYnJlYWtwb2ludC12YWx1ZSB7XG4gICAgQGlmIGltLWxvZygnYCN7JGltLW5vLW1lZGlhLWJyZWFrcG9pbnR9YCBpcyBub3QgYSB2YWxpZCBicmVha3BvaW50LicpIHtcbiAgICB9XG4gIH1cblxuICBAZWFjaCAkY29uZGl0aW9uIGluICRjb25kaXRpb25zIHtcbiAgICBAaWYgbm90IG1hcC5oYXMta2V5KCRtZWRpYS1leHByZXNzaW9ucywgJGNvbmRpdGlvbikge1xuICAgICAgJG9wZXJhdG9yOiBnZXQtZXhwcmVzc2lvbi1vcGVyYXRvcigkY29uZGl0aW9uKTtcbiAgICAgICRwcmVmaXg6IGdldC1leHByZXNzaW9uLXByZWZpeCgkb3BlcmF0b3IpO1xuICAgICAgJHZhbHVlOiBnZXQtZXhwcmVzc2lvbi12YWx1ZSgkY29uZGl0aW9uLCAkb3BlcmF0b3IpO1xuXG4gICAgICBAaWYgKCRwcmVmaXggPT0gJ21heCcgYW5kICR2YWx1ZSA8PSAkbm8tbWVkaWEtYnJlYWtwb2ludC12YWx1ZSkgb3JcbiAgICAgICAgKCRwcmVmaXggPT0gJ21pbicgYW5kICR2YWx1ZSA+ICRuby1tZWRpYS1icmVha3BvaW50LXZhbHVlKVxuICAgICAge1xuICAgICAgICBAcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgbm90IGxpc3QuaW5kZXgoJGltLW5vLW1lZGlhLWV4cHJlc3Npb25zLCAkY29uZGl0aW9uKSB7XG4gICAgICBAcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gdHJ1ZTtcbn1cblxuLy8vL1xuLy8vIFBhcnNpbmcgZW5naW5lXG4vLy8gQGF1dGhvciBLaXR0eSBHaXJhdWRlbFxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vL1xuXG4vLy9cbi8vLyBHZXQgb3BlcmF0b3Igb2YgYW4gZXhwcmVzc2lvblxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB0byBleHRyYWN0IG9wZXJhdG9yIGZyb21cbi8vL1xuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBBbnkgb2YgYD49YCwgYD5gLCBgPD1gLCBgPGAsIGDiiaVgLCBg4omkYFxuLy8vXG5AZnVuY3Rpb24gZ2V0LWV4cHJlc3Npb24tb3BlcmF0b3IoJGV4cHJlc3Npb24pIHtcbiAgQGVhY2ggJG9wZXJhdG9yIGluICgnPj0nLCAnPicsICc8PScsICc8JywgJ+KJpScsICfiiaQnKSB7XG4gICAgQGlmIHN0cmluZy5pbmRleCgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKSB7XG4gICAgICBAcmV0dXJuICRvcGVyYXRvcjtcbiAgICB9XG4gIH1cblxuICAvLyBJdCBpcyBub3QgcG9zc2libGUgdG8gaW5jbHVkZSBhIG1peGluIGluc2lkZSBhIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvXG4gIC8vIHJlbHkgb24gdGhlIGBpbS1sb2coLi4pYCBmdW5jdGlvbiByYXRoZXIgdGhhbiB0aGUgYGxvZyguLilgIG1peGluLiBCZWNhdXNlXG4gIC8vIGZ1bmN0aW9ucyBjYW5ub3QgYmUgY2FsbGVkIGFueXdoZXJlIGluIFNhc3MsIHdlIG5lZWQgdG8gaGFjayB0aGUgY2FsbCBpblxuICAvLyBhIGR1bW15IHZhcmlhYmxlLCBzdWNoIGFzIGAkX2AuIElmIGFueWJvZHkgZXZlciByYWlzZSBhIHNjb3BpbmcgaXNzdWUgd2l0aFxuICAvLyBTYXNzIDMuMywgY2hhbmdlIHRoaXMgbGluZSBpbiBgQGlmIGltLWxvZyguLikge31gIGluc3RlYWQuXG4gICRfOiBpbS1sb2coJ05vIG9wZXJhdG9yIGZvdW5kIGluIGAjeyRleHByZXNzaW9ufWAuJyk7XG59XG5cbi8vL1xuLy8vIEdldCBkaW1lbnNpb24gb2YgYW4gZXhwcmVzc2lvbiwgYmFzZWQgb24gYSBmb3VuZCBvcGVyYXRvclxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB0byBleHRyYWN0IGRpbWVuc2lvbiBmcm9tXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRvcGVyYXRvciAtIE9wZXJhdG9yIGZyb20gYCRleHByZXNzaW9uYFxuLy8vXG4vLy8gQHJldHVybiB7U3RyaW5nfSAtIGB3aWR0aGAgb3IgYGhlaWdodGAgKG9yIHBvdGVudGlhbGx5IGFueXRoaW5nIGVsc2UpXG4vLy9cbkBmdW5jdGlvbiBnZXQtZXhwcmVzc2lvbi1kaW1lbnNpb24oJGV4cHJlc3Npb24sICRvcGVyYXRvcikge1xuICAkb3BlcmF0b3ItaW5kZXg6IHN0cmluZy5pbmRleCgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKTtcbiAgJHBhcnNlZC1kaW1lbnNpb246IHN0cmluZy5zbGljZSgkZXhwcmVzc2lvbiwgMCwgJG9wZXJhdG9yLWluZGV4IC0gMSk7XG4gICRkaW1lbnNpb246ICd3aWR0aCc7XG5cbiAgQGlmIHN0cmluZy5sZW5ndGgoJHBhcnNlZC1kaW1lbnNpb24pID4gMCB7XG4gICAgJGRpbWVuc2lvbjogJHBhcnNlZC1kaW1lbnNpb247XG4gIH1cblxuICBAcmV0dXJuICRkaW1lbnNpb247XG59XG5cbi8vL1xuLy8vIEdldCBkaW1lbnNpb24gcHJlZml4IGJhc2VkIG9uIGFuIG9wZXJhdG9yXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJG9wZXJhdG9yIC0gT3BlcmF0b3Jcbi8vL1xuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBgbWluYCBvciBgbWF4YFxuLy8vXG5AZnVuY3Rpb24gZ2V0LWV4cHJlc3Npb24tcHJlZml4KCRvcGVyYXRvcikge1xuICBAcmV0dXJuIGlmKGxpc3QuaW5kZXgoKCc8JywgJzw9JywgJ+KJpCcpLCAkb3BlcmF0b3IpLCAnbWF4JywgJ21pbicpO1xufVxuXG4vLy9cbi8vLyBHZXQgdmFsdWUgb2YgYW4gZXhwcmVzc2lvbiwgYmFzZWQgb24gYSBmb3VuZCBvcGVyYXRvclxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB0byBleHRyYWN0IHZhbHVlIGZyb21cbi8vLyBAcGFyYW0ge1N0cmluZ30gJG9wZXJhdG9yIC0gT3BlcmF0b3IgZnJvbSBgJGV4cHJlc3Npb25gXG4vLy9cbi8vLyBAcmV0dXJuIHtOdW1iZXJ9IC0gQSBudW1lcmljIHZhbHVlXG4vLy9cbkBmdW5jdGlvbiBnZXQtZXhwcmVzc2lvbi12YWx1ZSgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKSB7XG4gICRvcGVyYXRvci1pbmRleDogc3RyaW5nLmluZGV4KCRleHByZXNzaW9uLCAkb3BlcmF0b3IpO1xuICAkdmFsdWU6IHN0cmluZy5zbGljZSgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yLWluZGV4ICsgc3RyaW5nLmxlbmd0aCgkb3BlcmF0b3IpKTtcblxuICBAaWYgbWFwLmhhcy1rZXkoJGJyZWFrcG9pbnRzLCAkdmFsdWUpIHtcbiAgICAkdmFsdWU6IG1hcC5nZXQoJGJyZWFrcG9pbnRzLCAkdmFsdWUpO1xuICB9IEBlbHNlIHtcbiAgICAkdmFsdWU6IHRvLW51bWJlcigkdmFsdWUpO1xuICB9XG5cbiAgJGludGVydmFsOiBtYXAuZ2V0KCR1bml0LWludGVydmFscywgbWF0aC51bml0KCR2YWx1ZSkpO1xuXG4gIEBpZiBub3QgJGludGVydmFsIHtcbiAgICAvLyBJdCBpcyBub3QgcG9zc2libGUgdG8gaW5jbHVkZSBhIG1peGluIGluc2lkZSBhIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvXG4gICAgLy8gcmVseSBvbiB0aGUgYGltLWxvZyguLilgIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHRoZSBgbG9nKC4uKWAgbWl4aW4uIEJlY2F1c2VcbiAgICAvLyBmdW5jdGlvbnMgY2Fubm90IGJlIGNhbGxlZCBhbnl3aGVyZSBpbiBTYXNzLCB3ZSBuZWVkIHRvIGhhY2sgdGhlIGNhbGwgaW5cbiAgICAvLyBhIGR1bW15IHZhcmlhYmxlLCBzdWNoIGFzIGAkX2AuIElmIGFueWJvZHkgZXZlciByYWlzZSBhIHNjb3BpbmcgaXNzdWUgd2l0aFxuICAgIC8vIFNhc3MgMy4zLCBjaGFuZ2UgdGhpcyBsaW5lIGluIGBAaWYgaW0tbG9nKC4uKSB7fWAgaW5zdGVhZC5cbiAgICAkXzogaW0tbG9nKCdVbmtub3duIHVuaXQgYCN7bWF0aC51bml0KCR2YWx1ZSl9YC4nKTtcbiAgfVxuXG4gIEBpZiAkb3BlcmF0b3IgPT0gJz4nIHtcbiAgICAkdmFsdWU6ICR2YWx1ZSArICRpbnRlcnZhbDtcbiAgfSBAZWxzZSBpZiAkb3BlcmF0b3IgPT0gJzwnIHtcbiAgICAkdmFsdWU6ICR2YWx1ZSAtICRpbnRlcnZhbDtcbiAgfVxuXG4gIEByZXR1cm4gJHZhbHVlO1xufVxuXG4vLy9cbi8vLyBQYXJzZSBhbiBleHByZXNzaW9uIHRvIHJldHVybiBhIHZhbGlkIG1lZGlhLXF1ZXJ5IGV4cHJlc3Npb25cbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZXhwcmVzc2lvbiAtIEV4cHJlc3Npb24gdG8gcGFyc2Vcbi8vL1xuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBWYWxpZCBtZWRpYSBxdWVyeVxuLy8vXG5AZnVuY3Rpb24gcGFyc2UtZXhwcmVzc2lvbigkZXhwcmVzc2lvbikge1xuICAvLyBJZiBpdCBpcyBwYXJ0IG9mICRtZWRpYS1leHByZXNzaW9ucywgaXQgaGFzIG5vIG9wZXJhdG9yXG4gIC8vIHRoZW4gdGhlcmUgaXMgbm8gbmVlZCB0byBnbyBhbnkgZnVydGhlciwganVzdCByZXR1cm4gdGhlIHZhbHVlXG4gIEBpZiBtYXAuaGFzLWtleSgkbWVkaWEtZXhwcmVzc2lvbnMsICRleHByZXNzaW9uKSB7XG4gICAgQHJldHVybiBtYXAuZ2V0KCRtZWRpYS1leHByZXNzaW9ucywgJGV4cHJlc3Npb24pO1xuICB9XG5cbiAgJG9wZXJhdG9yOiBnZXQtZXhwcmVzc2lvbi1vcGVyYXRvcigkZXhwcmVzc2lvbik7XG4gICRkaW1lbnNpb246IGdldC1leHByZXNzaW9uLWRpbWVuc2lvbigkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKTtcbiAgJHByZWZpeDogZ2V0LWV4cHJlc3Npb24tcHJlZml4KCRvcGVyYXRvcik7XG4gICR2YWx1ZTogZ2V0LWV4cHJlc3Npb24tdmFsdWUoJGV4cHJlc3Npb24sICRvcGVyYXRvcik7XG5cbiAgQHJldHVybiAnKCN7JHByZWZpeH0tI3skZGltZW5zaW9ufTogI3skdmFsdWV9KSc7XG59XG5cbi8vL1xuLy8vIFNsaWNlIGAkbGlzdGAgYmV0d2VlbiBgJHN0YXJ0YCBhbmQgYCRlbmRgIGluZGV4ZXNcbi8vL1xuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG4vLy8gQHBhcmFtIHtMaXN0fSAkbGlzdCAtIExpc3QgdG8gc2xpY2Vcbi8vLyBAcGFyYW0ge051bWJlcn0gJHN0YXJ0IFsxXSAtIFN0YXJ0IGluZGV4XG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRlbmQgW2xlbmd0aCgkbGlzdCldIC0gRW5kIGluZGV4XG4vLy9cbi8vLyBAcmV0dXJuIHtMaXN0fSBTbGljZWQgbGlzdFxuLy8vXG5AZnVuY3Rpb24gc2xpY2UoJGxpc3QsICRzdGFydDogMSwgJGVuZDogbGlzdC5sZW5ndGgoJGxpc3QpKSB7XG4gIEBpZiBsaXN0Lmxlbmd0aCgkbGlzdCkgPCAxIG9yICRzdGFydCA+ICRlbmQge1xuICAgIEByZXR1cm4gKCk7XG4gIH1cblxuICAkcmVzdWx0OiAoKTtcblxuICBAZm9yICRpIGZyb20gJHN0YXJ0IHRocm91Z2ggJGVuZCB7XG4gICAgJHJlc3VsdDogbGlzdC5hcHBlbmQoJHJlc3VsdCwgbGlzdC5udGgoJGxpc3QsICRpKSwgY29tbWEpO1xuICB9XG5cbiAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vLy8vXG4vLy8gU3RyaW5nIHRvIG51bWJlciBjb252ZXJ0ZXJcbi8vLyBAYXV0aG9yIEtpdHR5IEdpcmF1ZGVsXG4vLy8gQGFjY2VzcyBwcml2YXRlXG4vLy8vXG5cbi8vL1xuLy8vIENhc3RzIGEgc3RyaW5nIGludG8gYSBudW1iZXJcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nIHwgTnVtYmVyfSAkdmFsdWUgLSBWYWx1ZSB0byBiZSBwYXJzZWRcbi8vL1xuLy8vIEByZXR1cm4ge051bWJlcn1cbi8vL1xuXG5AZnVuY3Rpb24gdG8tbnVtYmVyKCR2YWx1ZSkge1xuICBAaWYgbWV0YS50eXBlLW9mKCR2YWx1ZSkgPT0gJ251bWJlcicge1xuICAgIEByZXR1cm4gJHZhbHVlO1xuICB9IEBlbHNlIGlmIG1ldGEudHlwZS1vZigkdmFsdWUpICE9ICdzdHJpbmcnIHtcbiAgICAkXzogaW0tbG9nKCdWYWx1ZSBmb3IgYHRvLW51bWJlcmAgc2hvdWxkIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICB9XG5cbiAgJGZpcnN0LWNoYXJhY3Rlcjogc3RyaW5nLnNsaWNlKCR2YWx1ZSwgMSwgMSk7XG4gICRyZXN1bHQ6IDA7XG4gICRkaWdpdHM6IDA7XG4gICRtaW51czogKCRmaXJzdC1jaGFyYWN0ZXIgPT0gJy0nKTtcbiAgJG51bWJlcnM6IChcbiAgICAnMCc6IDAsXG4gICAgJzEnOiAxLFxuICAgICcyJzogMixcbiAgICAnMyc6IDMsXG4gICAgJzQnOiA0LFxuICAgICc1JzogNSxcbiAgICAnNic6IDYsXG4gICAgJzcnOiA3LFxuICAgICc4JzogOCxcbiAgICAnOSc6IDksXG4gICk7XG5cbiAgLy8gUmVtb3ZlICsvLSBzaWduIGlmIHByZXNlbnQgYXQgZmlyc3QgY2hhcmFjdGVyXG4gIEBpZiAoJGZpcnN0LWNoYXJhY3RlciA9PSAnKycgb3IgJGZpcnN0LWNoYXJhY3RlciA9PSAnLScpIHtcbiAgICAkdmFsdWU6IHN0cmluZy5zbGljZSgkdmFsdWUsIDIpO1xuICB9XG5cbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBzdHJpbmcubGVuZ3RoKCR2YWx1ZSkge1xuICAgICRjaGFyYWN0ZXI6IHN0cmluZy5zbGljZSgkdmFsdWUsICRpLCAkaSk7XG5cbiAgICBAaWYgbm90KGxpc3QuaW5kZXgobWFwLmtleXMoJG51bWJlcnMpLCAkY2hhcmFjdGVyKSBvciAkY2hhcmFjdGVyID09ICcuJykge1xuICAgICAgQHJldHVybiB0by1sZW5ndGgoaWYoJG1pbnVzLCAtJHJlc3VsdCwgJHJlc3VsdCksIHN0cmluZy5zbGljZSgkdmFsdWUsICRpKSk7XG4gICAgfVxuXG4gICAgQGlmICRjaGFyYWN0ZXIgPT0gJy4nIHtcbiAgICAgICRkaWdpdHM6IDE7XG4gICAgfSBAZWxzZSBpZiAkZGlnaXRzID09IDAge1xuICAgICAgJHJlc3VsdDogJHJlc3VsdCAqIDEwICsgbWFwLmdldCgkbnVtYmVycywgJGNoYXJhY3Rlcik7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkZGlnaXRzOiAkZGlnaXRzICogMTA7XG4gICAgICAkcmVzdWx0OiAkcmVzdWx0ICsgbWF0aC5kaXYobWFwLmdldCgkbnVtYmVycywgJGNoYXJhY3RlciksICRkaWdpdHMpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gaWYoJG1pbnVzLCAtJHJlc3VsdCwgJHJlc3VsdCk7XG59XG5cbi8vL1xuLy8vIEFkZCBgJHVuaXRgIHRvIGAkdmFsdWVgXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJHZhbHVlIC0gVmFsdWUgdG8gYWRkIHVuaXQgdG9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJHVuaXQgLSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHVuaXRcbi8vL1xuLy8vIEByZXR1cm4ge051bWJlcn0gLSBgJHZhbHVlYCBleHByZXNzZWQgaW4gYCR1bml0YFxuLy8vXG5AZnVuY3Rpb24gdG8tbGVuZ3RoKCR2YWx1ZSwgJHVuaXQpIHtcbiAgJHVuaXRzOiAoXG4gICAgJ3B4JzogMXB4LFxuICAgICdjbSc6IDFjbSxcbiAgICAnbW0nOiAxbW0sXG4gICAgJyUnOiAxJSxcbiAgICAnY2gnOiAxY2gsXG4gICAgJ3BjJzogMXBjLFxuICAgICdpbic6IDFpbixcbiAgICAnZW0nOiAxZW0sXG4gICAgJ3JlbSc6IDFyZW0sXG4gICAgJ3B0JzogMXB0LFxuICAgICdleCc6IDFleCxcbiAgICAndncnOiAxdncsXG4gICAgJ3ZoJzogMXZoLFxuICAgICd2bWluJzogMXZtaW4sXG4gICAgJ3ZtYXgnOiAxdm1heCxcbiAgKTtcblxuICBAaWYgbm90IGxpc3QuaW5kZXgobWFwLmtleXMoJHVuaXRzKSwgJHVuaXQpIHtcbiAgICAkXzogaW0tbG9nKCdJbnZhbGlkIHVuaXQgYCN7JHVuaXR9YC4nKTtcbiAgfVxuXG4gIEByZXR1cm4gJHZhbHVlICogbWFwLmdldCgkdW5pdHMsICR1bml0KTtcbn1cblxuLy8vXG4vLy8gVGhpcyBtaXhpbiBhaW1zIGF0IHJlZGVmaW5pbmcgdGhlIGNvbmZpZ3VyYXRpb24ganVzdCBmb3IgdGhlIHNjb3BlIG9mXG4vLy8gdGhlIGNhbGwuIEl0IGlzIGhlbHBmdWwgd2hlbiBoYXZpbmcgYSBjb21wb25lbnQgbmVlZGluZyBhbiBleHRlbmRlZFxuLy8vIGNvbmZpZ3VyYXRpb24gc3VjaCBhcyBjdXN0b20gYnJlYWtwb2ludHMgKHJlZmVycmVkIHRvIGFzIHR3ZWFrcG9pbnRzKVxuLy8vIGZvciBpbnN0YW5jZS5cbi8vL1xuLy8vIEBhdXRob3IgS2l0dHkgR2lyYXVkZWxcbi8vL1xuLy8vIEBwYXJhbSB7TWFwfSAkdHdlYWtwb2ludHMgWygpXSAtIE1hcCBvZiB0d2Vha3BvaW50cyB0byBiZSBtZXJnZWQgd2l0aCBgJGJyZWFrcG9pbnRzYFxuLy8vIEBwYXJhbSB7TWFwfSAkdHdlYWstbWVkaWEtZXhwcmVzc2lvbnMgWygpXSAtIE1hcCBvZiB0d2Vha2VkIG1lZGlhIGV4cHJlc3Npb25zIHRvIGJlIG1lcmdlZCB3aXRoIGAkbWVkaWEtZXhwcmVzc2lvbmBcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBFeHRlbmQgdGhlIGdsb2JhbCBicmVha3BvaW50cyB3aXRoIGEgdHdlYWtwb2ludFxuLy8vICBAaW5jbHVkZSBtZWRpYS1jb250ZXh0KCgnY3VzdG9tJzogNjc4cHgpKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBAaW5jbHVkZSBtZWRpYSgnPnBob25lJywgJzw9Y3VzdG9tJykge1xuLy8vICAgICAgIC8vIC4uLlxuLy8vICAgICAgfVxuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEV4dGVuZCB0aGUgZ2xvYmFsIG1lZGlhIGV4cHJlc3Npb25zIHdpdGggYSBjdXN0b20gb25lXG4vLy8gIEBpbmNsdWRlIG1lZGlhLWNvbnRleHQoJHR3ZWFrLW1lZGlhLWV4cHJlc3Npb25zOiAoJ2FsbCc6ICdhbGwnKSkge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgQGluY2x1ZGUgbWVkaWEoJ2FsbCcsICc+cGhvbmUnKSB7XG4vLy8gICAgICAgLy8gLi4uXG4vLy8gICAgICB9XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gRXh0ZW5kIGJvdGggY29uZmlndXJhdGlvbiBtYXBzXG4vLy8gIEBpbmNsdWRlIG1lZGlhLWNvbnRleHQoKCdjdXN0b20nOiA2NzhweCksICgnYWxsJzogJ2FsbCcpKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBAaW5jbHVkZSBtZWRpYSgnYWxsJywgJz5waG9uZScsICc8PWN1c3RvbScpIHtcbi8vLyAgICAgICAvLyAuLi5cbi8vLyAgICAgIH1cbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuQG1peGluIG1lZGlhLWNvbnRleHQoJHR3ZWFrcG9pbnRzOiAoKSwgJHR3ZWFrLW1lZGlhLWV4cHJlc3Npb25zOiAoKSkge1xuICAvLyBTYXZlIGdsb2JhbCBjb25maWd1cmF0aW9uXG4gICRnbG9iYWwtYnJlYWtwb2ludHM6ICRicmVha3BvaW50cztcbiAgJGdsb2JhbC1tZWRpYS1leHByZXNzaW9uczogJG1lZGlhLWV4cHJlc3Npb25zO1xuXG4gIC8vIFVwZGF0ZSBnbG9iYWwgY29uZmlndXJhdGlvblxuICAkYnJlYWtwb2ludHM6IG1hcC5tZXJnZSgkYnJlYWtwb2ludHMsICR0d2Vha3BvaW50cykgIWdsb2JhbDtcbiAgJG1lZGlhLWV4cHJlc3Npb25zOiBtYXAubWVyZ2UoJG1lZGlhLWV4cHJlc3Npb25zLCAkdHdlYWstbWVkaWEtZXhwcmVzc2lvbnMpICFnbG9iYWw7XG5cbiAgQGNvbnRlbnQ7XG5cbiAgLy8gUmVzdG9yZSBnbG9iYWwgY29uZmlndXJhdGlvblxuICAkYnJlYWtwb2ludHM6ICRnbG9iYWwtYnJlYWtwb2ludHMgIWdsb2JhbDtcbiAgJG1lZGlhLWV4cHJlc3Npb25zOiAkZ2xvYmFsLW1lZGlhLWV4cHJlc3Npb25zICFnbG9iYWw7XG59XG5cbi8vLy9cbi8vLyBpbmNsdWRlLW1lZGlhIHB1YmxpYyBleHBvc2VkIEFQSVxuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vL1xuXG4vLy9cbi8vLyBHZW5lcmF0ZXMgYSBtZWRpYSBxdWVyeSBiYXNlZCBvbiBhIGxpc3Qgb2YgY29uZGl0aW9uc1xuLy8vXG4vLy8gQHBhcmFtIHtBcmdsaXN0fSAgICRjb25kaXRpb25zICAtIE1lZGlhIHF1ZXJ5IGNvbmRpdGlvbnNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIGEgc2luZ2xlIHNldCBicmVha3BvaW50XG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+cGhvbmUnKSB7IH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIHR3byBzZXQgYnJlYWtwb2ludHNcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz5waG9uZScsICc8PXRhYmxldCcpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggY3VzdG9tIHZhbHVlc1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj0zNThweCcsICc8ODUwcHgnKSB7IH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIHNldCBicmVha3BvaW50cyB3aXRoIGN1c3RvbSB2YWx1ZXNcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz5kZXNrdG9wJywgJzw9MTM1MHB4JykgeyB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gV2l0aCBhIHN0YXRpYyBleHByZXNzaW9uXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCdyZXRpbmEyeCcpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIE1peGluZyBldmVyeXRoaW5nXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PTM1MHB4JywgJzx0YWJsZXQnLCAncmV0aW5hM3gnKSB7IH1cbi8vL1xuQG1peGluIG1lZGlhKCRjb25kaXRpb25zLi4uKSB7XG4gIEBpZiAoJGltLW1lZGlhLXN1cHBvcnQgYW5kIGxpc3QubGVuZ3RoKCRjb25kaXRpb25zKSA9PSAwKSBvclxuICAgIChub3QgJGltLW1lZGlhLXN1cHBvcnQgYW5kIGltLWludGVyY2VwdHMtc3RhdGljLWJyZWFrcG9pbnQoJGNvbmRpdGlvbnMuLi4pKVxuICB7XG4gICAgQGNvbnRlbnQ7XG4gIH0gQGVsc2UgaWYgKCRpbS1tZWRpYS1zdXBwb3J0IGFuZCBsaXN0Lmxlbmd0aCgkY29uZGl0aW9ucykgPiAwKSB7XG4gICAgQG1lZGlhICN7c3RyaW5nLnVucXVvdGUocGFyc2UtZXhwcmVzc2lvbihsaXN0Lm50aCgkY29uZGl0aW9ucywgMSkpKX0ge1xuICAgICAgLy8gUmVjdXJzaXZlIGNhbGxcbiAgICAgIEBpbmNsdWRlIG1lZGlhKHNsaWNlKCRjb25kaXRpb25zLCAyKS4uLikge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi5wcmVsb2FkZXIgXG57XG4gIEBleHRlbmQgJWNvdmVyOyBcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgei1pbmRleDogeigncHJlbG9hZGVyJyk7XG5cbiAgJl9fbmF2IFxuICB7XG4gICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICB0b3A6IDYuOXJlbTsgXG4gICAgbGVmdDogMDsgXG5cbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDAuMXJlbTsgXG5cbiAgICBiYWNrZ3JvdW5kOiAkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW47XG5cbiAgICB0cmFuc2Zvcm06c2NhbGVYKDApO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQ7XG4gIH1cblxuICAmX19udW1iZXIgXG4gIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7IFxuICAgIHRvcDogNTUlOyBcbiAgICBsZWZ0OiA1MCU7IFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuXG4gICAgei1pbmRleDogeignY29udGVudCcpO1xuXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgICZfX3RleHQgXG4gICAge1xuICAgICAgQGV4dGVuZCAldGl0bGUtMTAwOyAgXG4gICAgfVxuICB9XG5cbiAgJl9fcHJvZmVzc2lvbiBcbiAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDIuNnJlbTsgXG4gICAgcmlnaHQ6IDZyZW07IFxuXG4gICAgd2lkdGg6IDEwLjhyZW07IFxuICAgIGhlaWdodDogMnJlbTsgXG5cbiAgICBiYWNrZ3JvdW5kOiAkY29sb3ItYWVyb3NwYWNlLW9yYW5nZTtcblxuICAgIHRyYW5zZm9ybTogc2NhbGVYKDApO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0O1xuICB9XG59IiwiLm5hdmlnYXRpb24gXG57XG4gIHotaW5kZXg6IHooJ25hdmlnYXRpb24nKTtcbiAgcG9zaXRpb246IGZpeGVkO1xuXG4gIHdpZHRoOiAxMDAlO1xuXG4gICZfX3dyYXBwZXIgXG4gIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgd2lkdGg6IDEwMCU7IFxuICAgIGhlaWdodDo3cmVtO1xuXG4gICAgZGlzcGxheTogZmxleDsgXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW47XG4gICAgYmFja2dyb3VuZDogI2ZmZWFkYjdkO1xuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTtcbiAgfVxuXG4gICZfX2F2YWlsYWJpbGl0eSBcbiAge1xuICAgIHBvc2l0aW9uOmFic29sdXRlOyBcbiAgICBsZWZ0OiA2cmVtO1xuXG4gICAgZGlzcGxheTogZmxleDsgXG5cbiAgICAmX19jb2xvciBcbiAgICB7XG4gICAgICBoZWlnaHQ6IDFyZW07IFxuICAgICAgd2lkdGg6IDFyZW07IFxuXG4gICAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xuXG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XG4gICAgfVxuXG4gICAgJl9fdGV4dCBcbiAgICB7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xuICAgIH1cbiAgfVxuXG4gICZfX21lbnUgXG4gIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7IFxuICAgIGxlZnQ6IDUwJTsgXG5cbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gIH1cblxuICAmX19saXN0IFxuICB7XG4gICAgZGlzcGxheTogZmxleDsgXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICZfX2xlZnQgXG4gICAge1xuICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZS1pbi1vdXQ7XG5cbiAgICAgICY6aG92ZXJcbiAgICAgIHtcbiAgICAgICAgY29sb3I6ICRjb2xvci1hZXJvc3BhY2Utb3JhbmdlO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX3JpZ2h0IFxuICAgIHtcbiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjI1cyBlYXNlLWluLW91dDtcblxuICAgICAgJjpob3ZlciBcbiAgICAgIHtcbiAgICAgICAgY29sb3I6JGNvbG9yLWFlcm9zcGFjZS1vcmFuZ2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJl9fbG9nbyBcbiAgICB7XG4gICAgICBoZWlnaHQ6IDdyZW07IFxuICAgICAgd2lkdGg6IDdyZW07IFxuICAgICAgXG4gICAgICBtYXJnaW46IDAgMnJlbTtcblxuICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGVhc2UtaW4tb3V0O1xuXG4gICAgICAmOmhvdmVyIFxuICAgICAge1xuICAgICAgICBvcGFjaXR5OiAwLjU7XG4gICAgICB9XG5cbiAgICAgICZfX2ZpZ3VyZSBcbiAgICAgIHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlOyBcbiAgICAgICAgd2lkdGg6IDEwMCU7IFxuXG4gICAgICAgICZfX2ltYWdlIFxuICAgICAgICB7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlOyBcbiAgICAgICAgICB3aWR0aDogMTAwJTsgXG5cbiAgICAgICAgICBvcGFjaXR5OiAxO1xuXG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmX19wcm9mZXNzaW9uIFxuICB7XG4gICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICByaWdodDogNnJlbTsgXG5cbiAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgJl9fdGV4dFxuICAgIHtcbiAgICAgIG9wYWNpdHk6IDA7IFxuICAgIH1cblxuICAgICZfX3NwbGl0IFxuICAgIHtcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuXG4gICAgICBoZWlnaHQ6IDJyZW07IFxuICAgICAgd2lkdGg6IDJyZW07IFxuXG4gICAgICBiYWNrZ3JvdW5kOiAkY29sb3ItYWVyb3NwYWNlLW9yYW5nZTtcblxuICAgICAgcGFkZGluZzogMCAxcmVtO1xuXG4gICAgICB0cmFuc2Zvcm06c2NhbGVYKDYuMCk7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XG4gICAgfVxuICB9XG59IiwiLmZvb3RlciBcbntcbiAgei1pbmRleDogeignZm9vdGVyJyk7XG5cbiAgaGVpZ2h0OiA2MGR2aDsgXG4gIHdpZHRoOiAxMDAlOyBcblxuICBiYWNrZ3JvdW5kOiAkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW47XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlOyBcblxuICAmX19wcm94eSBcbiAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgdG9wOiAtNXJlbTsgXG4gIFxuICAgIGhlaWdodDogMTBkdmg7IFxuICAgIHdpZHRoOiAxMDAlOyBcbiAgXG4gICAgYmFja2dyb3VuZDogJGNvbG9yLWFudGlxdWUtd2hpdGU7IFxuICBcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAyMHB4O1xuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAyMHB4O1xuICB9XG5cbiAgJl9faWNvbnMgXG4gIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7IFxuICAgIHRvcDogNTAlOyBcbiAgICBsZWZ0OiA1MCU7IFxuXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG5cbiAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG4gICAgJl9fbWVkaWFcbiAgICB7XG4gICAgICBoZWlnaHQ6IDRyZW07XG4gICAgICB3aWR0aDogNHJlbTtcblxuICAgICAgbWFyZ2luOiAwIDVyZW07XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgbGluZWFyO1xuXG4gICAgICAmOmhvdmVyXG4gICAgICB7XG4gICAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICAgIH1cblxuICAgICAgJjpmaXJzdC1jaGlsZFxuICAgICAge1xuICAgICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIH1cblxuICAgICAgJjpsYXN0LWNoaWxkXG4gICAgICB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgIH1cblxuICAgICAgJl9fZGl2XG4gICAgICB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGxpbmVhcjtcblxuICAgICAgICAmOmhvdmVyXG4gICAgICAgIHtcbiAgICAgICAgICBvcGFjaXR5OiAwLjU7XG4gICAgICAgIH1cblxuICAgICAgICAmX19saW5rXG4gICAgICAgIHtcbiAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgIH1cblxuICAgICAgICAmX19pY29uXG4gICAgICAgIHtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgZmlsdGVyOiBpbnZlcnQoMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmX190aXRsZSBcbiAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgYm90dG9tOiA1cmVtO1xuICAgIGxlZnQ6IDUwJTsgXG5cbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG5cbiAgICBkaXNwbGF5OmZsZXg7IFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG4gICAgd2lkdGg6IDEwMCU7IFxuXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgICZfX3NwbGl0IFxuICAgIHtcbiAgICAgIHdpZHRoOiAxMDAlOyBcbiAgICAgIGhlaWdodDogMC4ycmVtOyBcblxuICAgICAgYmFja2dyb3VuZDogJGNvbG9yLWFlcm9zcGFjZS1vcmFuZ2U7XG5cbiAgICAgIG1hcmdpbjogM3JlbSA2cmVtOyBcblxuICAgICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gICAgfVxuXG4gICAgJl9fdGV4dCBcbiAgICB7XG4gICAgICBAZXh0ZW5kICV0aXRsZS0xMDA7IFxuXG4gICAgICBsaW5lLWhlaWdodDogMTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cbiAgICAgIGNvbG9yOiAkY29sb3ItYWVyb3NwYWNlLW9yYW5nZTtcbiAgICAgIG1hcmdpbjogMCAycmVtO1xuICAgIH1cbiAgfVxufVxuIiwiLmhvbWUgXG57XG4gIEBleHRlbmQgJXBhZ2U7XG5cbiAgei1pbmRleDogeignY29udGVudCcpO1xuXG4gICZfX3dyYXBwZXIgXG4gIHtcbiAgICBcbiAgfVxufVxuXG5AaW1wb3J0ICcuL2FuaW1hdGlvbnMvYW5pbWF0aW9ucyc7XG5AaW1wb3J0ICcuL3NlY3Rpb25zL2hlYWRlcic7XG5AaW1wb3J0ICcuL3NlY3Rpb25zL3Nob3djYXNlJztcbkBpbXBvcnQgJy4vc2VjdGlvbnMvYWJvdXQnOyIsIkBrZXlmcmFtZXMgcm90YXRpb24gXG57XG4gIDAle1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTFyZW0pcm90YXRlKDBkZWcpXG4gIH1cblxuICAxMDAle1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTFyZW0pcm90YXRlKCgzNjBkZWcpKVxuICB9XG59IiwiLmhvbWUgXG57XG5cbiAgJl9faGVhZGVyIFxuICB7XG4gICAgaGVpZ2h0OiAxMDBkdmg7IFxuICAgIHdpZHRoOiAxMDAlOyBcbiAgXG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyBcbiAgXG4gICAgZGlzcGxheTogZ3JpZDsgXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwcmVtIDFmciAxZnI7XG4gIFxuICAgIHBhZGRpbmc6IDAgNnJlbTsgXG4gIFxuICAgICZfX3RvcFRpdGxlIFxuICAgIHtcbiAgICAgIGdyaWQtYXJlYTogMiAvIDEgLyAzIC8gMztcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICBcbiAgICAgIHotaW5kZXg6IHooJ2NvbnRlbnQnKTtcbiAgXG4gICAgICAmX190ZXh0IFxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICV0aXRsZS0yMDA7IFxuICBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE5cmVtO1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgLXdlYmtpdC10ZXh0LXN0cm9rZTogMC4zcmVtICRjb2xvci1hZXJvc3BhY2Utb3JhbmdlO1xuICBcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIH1cbiAgICB9XG4gIFxuICAgICZfX2xvY2F0aW9uIFxuICAgIHtcbiAgICAgIGdyaWQtYXJlYTogMiAvIDMgLyAzIC8gLTE7XG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcbiAgXG4gICAgICAmX190ZXh0IFxuICAgICAge1xuICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICB9XG4gICAgfVxuICBcbiAgICAmX19wb3J0cmFpdCBcbiAgICB7XG4gICAgICBncmlkLWFyZWE6IDIgLyAyIC8gLTEgLyAzO1xuICAgICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIFxuICAgICAgaGVpZ2h0OiA1NXJlbTsgXG4gICAgICB3aWR0aDogNDVyZW07IFxuICBcbiAgICAgIHotaW5kZXg6IHooJ2NhbnZhcycpO1xuICBcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgXG4gIFxuICAgICAgJl9fY292ZXIgXG4gICAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgIHRvcDogMDsgXG4gICAgICAgIGxlZnQ6IDA7IFxuICAgICAgICBcbiAgICAgICAgd2lkdGg6IDEwMSU7IFxuICAgICAgICBoZWlnaHQ6IDEwMSU7IFxuICBcbiAgICAgICAgYmFja2dyb3VuZDogJGNvbG9yLWFudGlxdWUtd2hpdGU7XG4gIFxuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3A7XG4gICAgICB9XG4gIFxuICAgICAgJl9fZmlndXJlIFxuICAgICAge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7IFxuICBcbiAgICAgICAgaGVpZ2h0OiAxMDAlOyBcbiAgICAgICAgd2lkdGg6IDEwMCU7IFxuICBcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICBcbiAgICAgICAgJl9faW1hZ2UgXG4gICAgICAgIHtcbiAgICAgICAgICBAZXh0ZW5kICVjb3ZlcjtcbiAgXG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gIFxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgXG4gICAgJl9fZGVzY3JpcHRpb24gXG4gICAge1xuICAgICAgZ3JpZC1hcmVhOiAzIC8gMSAvIC0xIC8gMjtcbiAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xuICBcbiAgICAgICZfX3RleHQgXG4gICAgICB7XG4gICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICB9XG4gICAgfVxuICBcbiAgICAmX19idG1UaXRsZSBcbiAgICB7XG4gICAgICBncmlkLWFyZWE6IDMgLyAyIC8gLTEgLyAtMTtcbiAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktc2VsZjogZmxleC1lbmQ7XG4gIFxuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIFxuICAgICAgei1pbmRleDogeignY29udGVudCcpO1xuICBcbiAgICAgICZfX3RleHQgXG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJXRpdGxlLTIwMDsgXG4gIFxuICAgICAgICBsaW5lLWhlaWdodDogMTlyZW07XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIGNvbG9yOiAkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW47XG4gICAgICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiAkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW47XG4gICAgICAgIC8vLXdlYmtpdC10ZXh0LXN0cm9rZTogMC4zcmVtICRjb2xvci1hbnRpcXVlLXdoaXRlO1xuICBcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiAgIiwiLmhvbWUgXG57XG4gICZfX3Nob3djYXNlIFxuICB7XG4gICAgaGVpZ2h0OiA5MGR2aDsgXG4gICAgd2lkdGg6IDk1JTsgXG5cbiAgICBjb2xvcjogJGNvbG9yLWFudGlxdWUtd2hpdGU7IFxuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyBcbiAgICBsZWZ0OiA1MCU7IFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcblxuICAgIHotaW5kZXg6IHooJ2NvbnRlbnQnKTtcblxuICAgIG1hcmdpbi10b3A6IDZyZW07XG5cbiAgICAmX190aXRsZSBcbiAgICB7XG5cbiAgICAgICZfX3RleHQgXG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJXRpdGxlLTE4OyBcbiAgXG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cbiAgICAgICAgY29sb3I6ICRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjtcbiAgICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6ICRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmX190aXRsZVRvcExlZnQgXG4gICAge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICAgIHRvcDogNXJlbTsgXG4gICAgICBsZWZ0OiA2cmVtO1xuICAgIH1cblxuICAgICZfX3RpdGxlQnRtTGVmdCBcbiAgICB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7IFxuICAgICAgYm90dG9tOiA1cmVtOyBcbiAgICAgIGxlZnQ6IDZyZW07XG4gICAgfVxuXG4gICAgJl9fdGl0bGVUb3BSaWdodCBcbiAgICB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7IFxuICAgICAgdG9wOiA1cmVtOyBcbiAgICAgIHJpZ2h0OiA2cmVtO1xuICAgIH1cblxuICAgICZfX3RpdGxlQnRtUmlnaHQgXG4gICAge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICAgIGJvdHRvbTogNXJlbTsgXG4gICAgICByaWdodDogNnJlbTtcbiAgICB9XG5cbiAgICAmX19nYWxsZXJ5IFxuICAgIHtcbiAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICB3aWR0aDogMTAwJTsgXG5cbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgXG5cbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjtcblxuICAgICAgJl9fd3JhcHBlciBcbiAgICAgIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICAgICAgdG9wOiA1MCU7IFxuICAgICAgICBsZWZ0OiA1MCU7IFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcblxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xuXG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW47XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW47XG5cbiAgICAgICAgd2lkdGg6IDgwJTsgXG4gICAgICAgIHBhZGRpbmc6IDEwcmVtOyBcbiAgICAgIH1cblxuICAgICAgJl9faW1hZ2UgXG4gICAgICB7XG4gICAgICAgIGhlaWdodDogMjVyZW07IFxuICAgICAgICB3aWR0aDogMjVyZW07XG4gICAgICAgIFxuICAgICAgICB6LWluZGV4OiB6KCdjYW52YXMnKTtcblxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICAgJl9fZmlndXJlIFxuICAgICAgICB7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyBcblxuICAgICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgICAgd2lkdGg6IDEwMCU7IFxuXG4gICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuXG4gICAgICAgICAgJl9faW1hZ2UgXG4gICAgICAgICAge1xuICAgICAgICAgICAgQGV4dGVuZCAlY292ZXI7XG5cbiAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICZfX2xpbmsgXG4gICAgICAgIHtcbiAgICAgICAgICBAZXh0ZW5kICVjb3ZlcjsgXG5cbiAgICAgICAgICBkaXNwbGF5OiBibG9jazsgXG4gICAgICAgICAgXG4gICAgICAgICAgd2lkdGg6IDEwMCU7IFxuICAgICAgICAgIGhlaWdodDogMTAwJTsgXG5cbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xuXG4gICAgICAgICAgei1pbmRleDogeignbGluaycpO1xuICAgICAgICB9XG5cbiAgICAgICAgJl9fdGl0bGVcbiAgICAgICAge1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgICAgdG9wOiAxcmVtOyBcbiAgICAgICAgICBsZWZ0OiA1MCU7IFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcblxuICAgICAgICAgIHotaW5kZXg6IHooJ2NvbnRlbnQnKTtcblxuICAgICAgICAgIGhlaWdodDogNDVyZW07IFxuICAgICAgICAgIHdpZHRoOiA0NXJlbTsgXG5cbiAgICAgICAgICAmX19zdmcgXG4gICAgICAgICAge1xuICAgICAgICAgICAgQGV4dGVuZCAldGl0bGUtNDA7XG5cbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTFyZW0pO1xuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgICAgIHN0cm9rZS13aWR0aDogMS41cHg7XG4gICAgICAgICAgICBmaWxsOiAkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW47XG5cbiAgICAgICAgICAgIGFuaW1hdGlvbjogcm90YXRpb24gMzZzIGxpbmVhciBpbmZpbml0ZTsgXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJl9fdGV4dFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIEBleHRlbmQgJXRpdGxlLTQwOyBcblxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cbiAgICAgICAgICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgIC13ZWJraXQtdGV4dC1zdHJva2U6IDAuMnJlbSAkY29sb3ItZGFyay1qdW5nbGUtZ3JlZW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICZfX2xpbmsgXG4gICAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgIGJvdHRvbTogNXJlbTtcbiAgICAgICAgbGVmdDogNTAlO1xuICAgICAgICBcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuXG4gICAgICAgIHdpZHRoOmZpdC1jb250ZW50O1xuXG4gICAgICAgICZfX3dvcmsgXG4gICAgICAgIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICAgICAgICBnYXA6IDAuNXJlbTtcblxuICAgICAgICAgICZfX3RleHQgXG4gICAgICAgICAge1xuICAgICAgICAgICAgQGV4dGVuZCAlbGlua19fYm90dG9tX19sci0taGlkZGVuO1xuICAgICAgICAgICAgY29sb3I6ICRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAmX19pY29uIFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaGVpZ2h0OiAycmVtOyBcbiAgICAgICAgICAgIHdpZHRoOiAycmVtOyBcblxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgICAgICAgICAmX19tZWRpYSBcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgQGV4dGVuZCAlY292ZXI7IFxuXG4gICAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSIsIi5ob21lIFxue1xuICAmX19hYm91dFxuICB7XG4gICAgaGVpZ2h0OiAxMTBkdmg7IFxuICAgIHdpZHRoOiAxMDAlOyBcblxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgXG5cbiAgICB6LWluZGV4OiB6KCdjb250ZW50Jyk7XG5cbiAgICBkaXNwbGF5OiBncmlkOyBcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCAxZnIpO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMzByZW0gMWZyO1xuXG4gICAgJl9fdGl0bGUgXG4gICAge1xuICAgICAgZ3JpZC1hcmVhOiAxIC8gMSAvIDIgLyAtMTtcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICAgICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG5cbiAgICAgIGRpc3BsYXk6ZmxleDsgXG5cbiAgICAgIGhlaWdodDogMTByZW07IFxuICAgICAgd2lkdGg6IDgwJTsgXG5cbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgXG4gICAgICBsZWZ0OiAxJTtcblxuICAgICAgJl9fdGV4dCBcbiAgICAgIHtcbiAgICAgICAgQGV4dGVuZCAldGl0bGUtMTAwOyBcblxuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxO1xuXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuXG4gICAgICAgICY6bnRoLW9mLXR5cGUoMSlcbiAgICAgICAge1xuICAgICAgICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAtd2Via2l0LXRleHQtc3Ryb2tlOiAwLjNyZW0gJGNvbG9yLWRhcmstanVuZ2xlLWdyZWVuO1xuXG4gICAgICAgICAgei1pbmRleDogeignZm9vdGVyJyk7XG5cbiAgICAgICAgICBvcGFjaXR5OiAwLjQ7XG4gICAgICAgIH1cblxuICAgICAgICAmOm50aC1vZi10eXBlKDIpXG4gICAgICAgIHtcbiAgICAgICAgICAtd2Via2l0LXRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgLXdlYmtpdC10ZXh0LXN0cm9rZTogMC4zcmVtICRjb2xvci1hZXJvc3BhY2Utb3JhbmdlO1xuXG4gICAgICAgICAgb3BhY2l0eTogMC42O1xuXG4gICAgICAgICAgei1pbmRleDogeignY2FudmFzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAmOm50aC1vZi10eXBlKDMpXG4gICAgICAgIHsgXG4gICAgICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6ICRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjtcblxuICAgICAgICAgIHotaW5kZXg6IHooJ2NvbnRlbnQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICZfX2luZm8gXG4gICAge1xuICAgICAgZ3JpZC1hcmVhOiAyIC8gMiAvIC0xIC8gMztcbiAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xuXG4gICAgICAmX19saW5rIFxuICAgICAge1xuICAgICAgICBtYXJnaW4tdG9wOiAycmVtOyBcblxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7IFxuXG4gICAgICAgIHdpZHRoOmZpdC1jb250ZW50O1xuXG4gICAgICAgICZfX3VybCBcbiAgICAgICAge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7IFxuICAgICAgICAgIGdhcDogMC41cmVtO1xuXG4gICAgICAgICAgJl9fdGV4dCBcbiAgICAgICAgICB7XG4gICAgICAgICAgICBAZXh0ZW5kICVsaW5rX19ib3R0b21fX2xyLS1oaWRkZW47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJl9faWNvbiBcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG5cbiAgICAgICAgICAgIGhlaWdodDogMnJlbTsgXG4gICAgICAgICAgICB3aWR0aDogMnJlbTsgXG5cbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICAgICAgICAgJl9fbWVkaWEgXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIEBleHRlbmQgJWNvdmVyOyBcblxuICAgICAgICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH1cblxuICAgICZfX2xlZnQgXG4gICAge1xuICAgICAgZ3JpZC1hcmVhOiAyIC8gMSAvIC0xIC8gMjtcblxuICAgICAgZGlzcGxheTogZ3JpZDsgXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxMHJlbTtcbiAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogMTByZW0gMWZyIDEwcmVtO1xuXG4gICAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICAgICZfX2NvdmVyIFxuICAgICAge1xuICAgICAgICBncmlkLWFyZWE6IDEgLyAxIC8gLTEgLyAtMTtcblxuICAgICAgICBoZWlnaHQ6IDEwMCU7IFxuICAgICAgICB3aWR0aDogMTAwJTsgXG5cbiAgICAgICAgYmFja2dyb3VuZDogJGNvbG9yLWFudGlxdWUtd2hpdGU7XG5cbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wO1xuICAgICAgfVxuXG4gICAgICAmX19sYXJnZSBcbiAgICAgIHtcbiAgICAgICAgZ3JpZC1hcmVhOiAyIC8gMSAvIDMgLyAyO1xuXG4gICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgIHdpZHRoOiAxMDAlOyBcblxuICAgICAgICAmX19maWd1cmUgXG4gICAgICAgIHtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7IFxuXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlOyBcbiAgICAgICAgICB3aWR0aDogMTAwJTsgXG5cbiAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG5cbiAgICAgICAgICAmX19pbWFnZSBcbiAgICAgICAgICB7XG4gICAgICAgICAgICBAZXh0ZW5kICVjb3ZlcjtcblxuICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICZfX3NtYWxsIFxuICAgICAge1xuICAgICAgICBncmlkLWFyZWE6IDEgLyAxIC8gMyAvIC0xO1xuXG4gICAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICAgIGp1c3RpZnktc2VsZjogZmxleC1lbmQ7XG5cbiAgICAgICAgaGVpZ2h0OiAyNXJlbTsgXG4gICAgICAgIHdpZHRoOiAyMHJlbTsgXG5cbiAgICAgICAgJl9fZmlndXJlIFxuICAgICAgICB7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyBcblxuICAgICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgICAgd2lkdGg6IDEwMCU7IFxuXG4gICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuXG4gICAgICAgICAgJl9faW1hZ2UgXG4gICAgICAgICAge1xuICAgICAgICAgICAgQGV4dGVuZCAlY292ZXI7XG5cbiAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICZfX3JpZ2h0XG4gICAge1xuICAgICAgZ3JpZC1hcmVhOiAyIC8gMyAvIC0xIC8gLTE7XG5cbiAgICAgIGRpc3BsYXk6IGdyaWQ7IFxuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMHJlbSAxZnI7XG4gICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwcmVtIDFmciAxMHJlbTtcblxuICAgICAgcGFkZGluZy1yaWdodDogNnJlbTtcblxuICAgICAgJl9fY292ZXIgXG4gICAgICB7XG4gICAgICAgIGdyaWQtYXJlYTogMSAvIDEgLyAtMSAvIC0xO1xuXG4gICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgIHdpZHRoOiAxMDAlOyBcblxuICAgICAgICBiYWNrZ3JvdW5kOiAkY29sb3ItYW50aXF1ZS13aGl0ZTtcblxuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3A7XG4gICAgICB9XG5cbiAgICAgICZfX2xhcmdlIFxuICAgICAge1xuICAgICAgICBncmlkLWFyZWE6IDIgLyAyIC8gMyAvIC0xO1xuXG4gICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgIHdpZHRoOiAxMDAlOyBcblxuICAgICAgICAmX19maWd1cmUgXG4gICAgICAgIHtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7IFxuXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlOyBcbiAgICAgICAgICB3aWR0aDogMTAwJTsgXG5cbiAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG5cbiAgICAgICAgICAmX19pbWFnZSBcbiAgICAgICAgICB7XG4gICAgICAgICAgICBAZXh0ZW5kICVjb3ZlcjtcblxuICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59IiwiLndvcmsgXG57XG4gIEBleHRlbmQgJXBhZ2U7IFxuICBAZXh0ZW5kICVjb3ZlcjsgXG5cbiAgei1pbmRleDogeignY29udGVudCcpO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICZfX2JvcmRlcnMgXG4gIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7IFxuICAgIHRvcDogNTAlOyBcbiAgICBsZWZ0OiA1MCU7IFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjsgXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjsgXG5cbiAgICBoZWlnaHQ6IDUwcmVtOyBcbiAgICB3aWR0aDogNTAlO1xuXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xuXG4gICAgei1pbmRleDogeignZm9vdGVyJyk7XG4gIH1cblxuICAmX193cmFwcGVyIFxuICB7XG4gICAgQGV4dGVuZCAlY292ZXI7XG5cbiAgICB6LWluZGV4OiB6KCdjb250ZW50Jyk7XG4gIH1cblxuXG4gICZfX2dhbGxlcnkgXG4gIHtcbiAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgZ2FwOiAyLjVyZW07XG5cbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7IFxuICAgIHRvcDogNTAlOyBcbiAgICBsZWZ0OiA1MCU7IFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuXG4gICAgcGFkZGluZzogMi41cmVtIDEwcmVtOyBcblxuICAgICZfX2ltYWdlIFxuICAgIHtcbiAgICAgIGhlaWdodDogMjVyZW07XG4gICAgICB3aWR0aDogMjVyZW07IFxuICAgICAgXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICZfX2xpbmsgXG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJWNvdmVyOyBcblxuICAgICAgICBkaXNwbGF5OiBibG9jazsgXG4gICAgICAgIFxuICAgICAgICB3aWR0aDogMTAwJTsgXG4gICAgICAgIGhlaWdodDogMTAwJTsgXG5cbiAgICAgICAgei1pbmRleDogeignbGluaycpO1xuICAgICAgfVxuXG4gICAgICAmX19maWd1cmUgXG4gICAgICB7XG4gICAgICAgIGhlaWdodDogMTAwJTsgXG4gICAgICAgIHdpZHRoOiAxMDAlOyBcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7IFxuXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcblxuICAgICAgICAmX19pbWFnZSBcbiAgICAgICAge1xuICAgICAgICAgIEBleHRlbmQgJWNvdmVyOyBcblxuICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgJl9fdmlzdWFsaXNlciBcbiAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgYm90dG9tOiA0cmVtOyBcbiAgICBsZWZ0OiAxMHJlbTsgXG5cbiAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICBnYXA6IC41cmVtO1xuXG4gICAgJl9fYm94IFxuICAgIHtcbiAgICAgIGhlaWdodDogMnJlbTsgXG4gICAgICB3aWR0aDogMnJlbTtcbiAgICAgIFxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyBcbiAgICAgIFxuICAgICAgJl9fY292ZXIgXG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJWNvdmVyOyBcblxuICAgICAgICBiYWNrZ3JvdW5kOiAkY29sb3ItYW50aXF1ZS13aGl0ZTtcblxuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3A7XG5cbiAgICAgICAgei1pbmRleDogeignY29udGVudCcpO1xuICAgICAgfVxuXG4gICAgICAmX19pbm5lciBcbiAgICAgIHtcbiAgICAgICAgQGV4dGVuZCAlY292ZXI7IFxuXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgICAgIGJhY2tncm91bmQ6ICRjb2xvci1kYXJrLWp1bmdsZS1ncmVlbjtcblxuICAgICAgICB6LWluZGV4OiB6KCdjYW52YXMnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmX19pbmRleCBcbiAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgYm90dG9tOiA2cmVtOyBcbiAgICBsZWZ0OiA1MCU7IFxuXG4gICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSk7XG5cbiAgICBkaXNwbGF5OiBmbGV4OyBcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGdhcDogMC41cmVtO1xuXG4gICAgJl9fY3VycmVudCBcbiAgICB7XG4gICAgICBoZWlnaHQ6IDIuMXJlbTsgXG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cblxuICAgICZfX251bWJlciBcbiAgICB7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgICAmX190ZXh0IFxuICAgICAge1xuXG4gICAgICB9XG4gICAgfVxuXG4gICAgJl9fc2xhc2ggXG4gICAge1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgICAgJl9fdGV4dCBcbiAgICAgIHtcbiAgICAgICAgZm9udC1zaXplOiAycmVtO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX3RvdGFsXG4gICAge1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgICAgJl9fdGV4dCBcbiAgICAgIHtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmX190aXRsZXNcbiAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgYm90dG9tOiA2cmVtOyBcbiAgICByaWdodDogMTVyZW07IFxuXG4gICAgd2lkdGg6IDIwcmVtO1xuXG4gICAgJl9fdGl0bGUgXG4gICAge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgICBoZWlnaHQ6IDEwMCU7IFxuICAgICAgd2lkdGg6IDEwMCU7IFxuXG4gICAgICAmX190ZXh0IFxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICV0aXRsZS02MDsgXG5cbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyBcbiAgICAgICAgdG9wOiA1MCU7IFxuICAgICAgICBsZWZ0OiA1MCU7IFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcblxuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICBjb2xvcjogJGNvbG9yLWFlcm9zcGFjZS1vcmFuZ2U7IFxuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==*/