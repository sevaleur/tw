/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.work__visualiser__box__inner, .work__gallery__image__figure__image, .work__gallery__image__link, .work__gallery, .home__about__right__large__figure__image, .home__about__left__small__figure__image, .home__about__left__large__figure__image, .home__about__info__link__url__icon__media, .home__showcase__gallery__link__work__icon__media, .home__showcase__gallery__image__link, .home__showcase__gallery__image__figure__image, .home__header__portrait__figure__image, .preloader, .content, body, html, .work, .home {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

/* Recommended styles for Splitting */
.splitting .char {
  display: inline-block;
  overflow: hidden;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */
.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);
  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);
  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));
  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));
  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));
  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );
  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));
  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}

.splitting.cells img {
  width: 100%;
  display: block;
}

@supports (display: grid) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }
  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template: repeat(var(--row-total), 1fr)/repeat(var(--col-total), 1fr);
  }
  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }
  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    /* Size to fit the whole container size */
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }
  /* Helper variables for advanced effects */
  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);
    /* Offset from center, positive & negative */
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));
    /* Absolute distance from center, only positive */
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );
    /* Absolute distance from center, only positive */
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}
.work, .home {
  opacity: 0;
  visibility: hidden;
}

.home__showcase__title__text {
  font-family: "Butler";
  font-size: 1.8rem;
}

.home__showcase__gallery__image__title__text, .home__showcase__gallery__image__title__svg {
  font-family: "Butler";
  font-size: 4rem;
}

.work__titles__title__text {
  font-family: "Butler";
  font-size: 6rem;
}

.home__about__title__text, .footer__title__text, .preloader__number__text {
  font-family: "Butler";
  font-size: 10rem;
}

.home__header__btmTitle__text, .home__header__topTitle__text {
  font-family: "Butler";
  font-size: 20rem;
}

body {
  font-family: "Satoshi-Regular";
  font-size: 1.6rem;
}

.home__about__info__link__url__text, .home__showcase__gallery__link__work__text {
  position: relative;
  overflow: hidden;
  display: inline-block;
  vertical-align: top;
}

.home__about__info__link__url__text:after, .home__showcase__gallery__link__work__text:after {
  content: "";
  position: absolute;
  bottom: 0%;
  left: 0%;
  transform: translateY(-50%);
  width: 100%;
  height: 1px;
  background: currentColor;
  transition: transform 0.7s cubic-bezier(0.77, 0, 0.175, 1);
}

.home__about__info__link__url__text:hover:after, .home__showcase__gallery__link__work__text:hover:after {
  transform: scaleX(1);
  transform-origin: center;
}

.home__about__info__link__url__text:after, .home__showcase__gallery__link__work__text:after {
  transform: scaleX(0);
  transform-origin: center;
}

.home__about__info__link__url__text, .home__showcase__gallery__link__work__text {
  display: inline-block;
}
@font-face {
  font-family: "Butler";
  src: url(39067711eb22ef463f2a.woff2) format("woff2"), url(7704cc6b567d92ede0f6.woff) format("woff"), url(c589fdca3db8a96f28bb.otf) format("opentype");
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: "Satoshi-Regular";
  src: url(331b498b0fef0588d872.woff2) format("woff2"), url(ca3da5fd2b609836ef69.woff) format("woff"), url(fe762acc7e97cb612805.ttf) format("truetype");
  font-weight: 400;
  font-display: swap;
  font-style: normal;
}
* {
  box-sizing: border-box;
  user-select: none;
}

html {
  font-size: 0.5208333333vw;
  overscroll-behavior: none;
  overflow: hidden;
  position: fixed;
  background: #ffeadb;
  color: #15252d;
}
@media (max-width: 767px) {
  html {
    font-size: 1.3333333333vw;
  }
}

body {
  position: fixed;
  font-family: "Satoshi-Regular";
}

canvas {
  position: relative;
  z-index: 2;
}

a {
  color: inherit;
  text-decoration: none;
  outline: none;
}

img {
  opacity: 0;
  transition: opacity 0.5s ease;
  vertical-align: middle;
}

.loaded {
  opacity: 1;
}

[data-animation=paragraph] {
  line-height: normal;
}
[data-animation=paragraph] span {
  overflow: hidden;
  display: inline-block;
  padding: 0 0.2rem;
}

.preloader {
  position: relative;
  z-index: 7;
}
.preloader__nav {
  position: absolute;
  top: 6.9rem;
  left: 0;
  width: 100%;
  height: 0.1rem;
  background: #15252d;
  transform: scaleX(0);
  transform-origin: left;
}
.preloader__number {
  position: absolute;
  top: 55%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 3;
  overflow: hidden;
}
.preloader__profession {
  position: absolute;
  top: 2.6rem;
  right: 6rem;
  width: 10.8rem;
  height: 2rem;
  background: #FC5200;
  transform: scaleX(0);
  transform-origin: right;
}

.navigation {
  z-index: 6;
  position: fixed;
  width: 100%;
}
.navigation__wrapper {
  overflow: hidden;
  width: 100%;
  height: 7rem;
  display: flex;
  justify-content: space-around;
  align-items: center;
  border-bottom: 1px solid #15252d;
  background: rgba(255, 234, 219, 0.4901960784);
  backdrop-filter: blur(10px);
}
.navigation__availability {
  position: absolute;
  left: 6rem;
  display: flex;
}
.navigation__availability__color {
  height: 1rem;
  width: 1rem;
  border-radius: 100%;
  align-self: center;
  margin-right: 1rem;
}
.navigation__availability__text {
  text-transform: lowercase;
}
.navigation__menu {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
.navigation__list {
  display: flex;
  align-items: center;
}
.navigation__list__left {
  transition: all 0.5s ease-in-out;
}
.navigation__list__left:hover {
  color: #FC5200;
}
.navigation__list__right {
  transition: all 0.25s ease-in-out;
}
.navigation__list__right:hover {
  color: #FC5200;
}
.navigation__list__logo {
  height: 7rem;
  width: 7rem;
  margin: 0 2rem;
  transition: all 0.25s ease-in-out;
}
.navigation__list__logo:hover {
  opacity: 0.5;
}
.navigation__list__logo__figure {
  height: 100%;
  width: 100%;
}
.navigation__list__logo__figure__image {
  height: 100%;
  width: 100%;
  opacity: 1;
  object-fit: cover;
}
.navigation__profession {
  position: absolute;
  right: 6rem;
  display: flex;
  overflow: hidden;
}
.navigation__profession__text {
  opacity: 0;
}
.navigation__profession__split {
  align-self: flex-end;
  height: 2rem;
  width: 2rem;
  background: #FC5200;
  padding: 0 1rem;
  transform: scaleX(6);
  transform-origin: center;
}

.footer {
  z-index: 1;
  height: 60dvh;
  width: 100%;
  background: #15252d;
  position: relative;
}
.footer__proxy {
  position: absolute;
  top: -5rem;
  height: 10dvh;
  width: 100%;
  background: #ffeadb;
  border-bottom-left-radius: 20px;
  border-bottom-right-radius: 20px;
}
.footer__icons {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  align-items: center;
  justify-content: center;
}
.footer__icons__media {
  height: 4rem;
  width: 4rem;
  margin: 0 5rem;
  vertical-align: top;
  transition: all 0.2s linear;
}
.footer__icons__media:hover {
  opacity: 0.5;
}
.footer__icons__media:first-child {
  margin-left: 0;
}
.footer__icons__media:last-child {
  margin-right: 0;
}
.footer__icons__media__div {
  height: 100%;
  width: 100%;
  cursor: pointer;
  transition: all 0.2s linear;
}
.footer__icons__media__div:hover {
  opacity: 0.5;
}
.footer__icons__media__div__link {
  visibility: hidden;
}
.footer__icons__media__div__icon {
  height: 100%;
  width: 100%;
  object-fit: cover;
  filter: invert(1);
}
.footer__title {
  position: absolute;
  bottom: 5rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  justify-content: center;
  width: 100%;
  overflow: hidden;
}
.footer__title__split {
  width: 100%;
  height: 0.2rem;
  background: #FC5200;
  margin: 3rem 6rem;
  align-self: flex-end;
}
.footer__title__text {
  line-height: 1;
  text-transform: uppercase;
  color: #FC5200;
  margin: 0 2rem;
}

.home {
  z-index: 3;
}
@keyframes rotation {
  0% {
    transform: translateY(-11rem) rotate(0deg);
  }
  100% {
    transform: translateY(-11rem) rotate(360deg);
  }
}
.home__header {
  height: 100dvh;
  width: 100%;
  position: relative;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: 10rem 1fr 1fr;
  padding: 0 6rem;
}
.home__header__topTitle {
  grid-area: 2/1/3/3;
  align-self: flex-end;
  z-index: 3;
}
.home__header__topTitle__text {
  line-height: 19rem;
  text-transform: uppercase;
  color: transparent;
  -webkit-text-fill-color: transparent;
  -webkit-text-stroke: 0.3rem #FC5200;
  overflow: hidden;
}
.home__header__location {
  grid-area: 2/3/3/-1;
  align-self: center;
  justify-self: center;
}
.home__header__location__text {
  font-style: italic;
}
.home__header__portrait {
  grid-area: 2/2/-1/3;
  justify-self: center;
  align-self: center;
  height: 55rem;
  width: 45rem;
  z-index: 2;
  position: relative;
}
.home__header__portrait__cover {
  position: absolute;
  top: 0;
  left: 0;
  width: 101%;
  height: 101%;
  background: #ffeadb;
  transform-origin: top;
}
.home__header__portrait__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__header__portrait__figure__image {
  object-fit: cover;
  transform-origin: bottom;
}
.home__header__description {
  grid-area: 3/1/-1/2;
  align-self: center;
  justify-self: center;
}
.home__header__description__text {
  font-style: italic;
  overflow: hidden;
}
.home__header__btmTitle {
  grid-area: 3/2/-1/-1;
  align-self: center;
  justify-self: flex-end;
  text-align: right;
  z-index: 3;
}
.home__header__btmTitle__text {
  line-height: 19rem;
  text-transform: uppercase;
  color: #15252d;
  -webkit-text-fill-color: #15252d;
  overflow: hidden;
}

.home__showcase {
  height: 90dvh;
  width: 95%;
  color: #ffeadb;
  position: relative;
  left: 50%;
  transform: translateX(-50%);
  z-index: 3;
  margin-top: 6rem;
}
.home__showcase__title__text {
  text-transform: uppercase;
  color: #15252d;
  -webkit-text-fill-color: #15252d;
}
.home__showcase__titleTopLeft {
  position: absolute;
  top: 5rem;
  left: 6rem;
}
.home__showcase__titleBtmLeft {
  position: absolute;
  bottom: 5rem;
  left: 6rem;
}
.home__showcase__titleTopRight {
  position: absolute;
  top: 5rem;
  right: 6rem;
}
.home__showcase__titleBtmRight {
  position: absolute;
  bottom: 5rem;
  right: 6rem;
}
.home__showcase__gallery {
  height: 100%;
  width: 100%;
  position: relative;
  border: 1px solid #15252d;
}
.home__showcase__gallery__wrapper {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  justify-content: space-around;
  align-self: center;
  border-top: 1px solid #15252d;
  border-bottom: 1px solid #15252d;
  width: 80%;
  padding: 10rem;
}
.home__showcase__gallery__image {
  height: 25rem;
  width: 25rem;
  z-index: 2;
  position: relative;
}
.home__showcase__gallery__image__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__showcase__gallery__image__figure__image {
  object-fit: cover;
}
.home__showcase__gallery__image__link {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: 100%;
  z-index: 4;
}
.home__showcase__gallery__image__title {
  position: absolute;
  top: 1rem;
  left: 50%;
  transform: translateX(-50%);
  z-index: 3;
  height: 45rem;
  width: 45rem;
}
.home__showcase__gallery__image__title__svg {
  transform: translateY(-11rem);
  text-transform: uppercase;
  stroke-width: 1.5px;
  fill: #15252d;
  animation: rotation 36s linear infinite;
}
.home__showcase__gallery__image__title__text {
  text-transform: uppercase;
  white-space: nowrap;
  -webkit-text-fill-color: transparent;
  -webkit-text-stroke: 0.2rem #15252d;
}
.home__showcase__gallery__link {
  position: absolute;
  bottom: 5rem;
  left: 50%;
  transform: translateX(-50%);
  width: fit-content;
}
.home__showcase__gallery__link__work {
  display: flex;
  gap: 0.5rem;
}
.home__showcase__gallery__link__work__text {
  color: #15252d;
}
.home__showcase__gallery__link__work__icon {
  align-self: center;
  height: 2rem;
  width: 2rem;
  position: relative;
}
.home__showcase__gallery__link__work__icon__media {
  object-fit: cover;
}

.home__about {
  height: 110dvh;
  width: 100%;
  position: relative;
  z-index: 3;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: 30rem 1fr;
}
.home__about__title {
  grid-area: 1/1/2/-1;
  align-self: flex-end;
  justify-self: center;
  display: flex;
  height: 10rem;
  width: 80%;
  position: relative;
  left: 1%;
}
.home__about__title__text {
  text-transform: uppercase;
  line-height: 1;
  position: absolute;
  transform: translate(-50%, -50%);
}
.home__about__title__text:nth-of-type(1) {
  -webkit-text-fill-color: transparent;
  -webkit-text-stroke: 0.3rem #15252d;
  z-index: 1;
  opacity: 0.4;
}
.home__about__title__text:nth-of-type(2) {
  -webkit-text-fill-color: transparent;
  -webkit-text-stroke: 0.3rem #FC5200;
  opacity: 0.6;
  z-index: 2;
}
.home__about__title__text:nth-of-type(3) {
  -webkit-text-fill-color: #15252d;
  z-index: 3;
}
.home__about__info {
  grid-area: 2/2/-1/3;
  align-self: center;
  justify-self: center;
}
.home__about__info__link {
  margin-top: 2rem;
  position: relative;
  width: fit-content;
}
.home__about__info__link__url {
  display: flex;
  gap: 0.5rem;
}
.home__about__info__link__url__icon {
  align-self: center;
  height: 2rem;
  width: 2rem;
  position: relative;
}
.home__about__info__link__url__icon__media {
  object-fit: cover;
}
.home__about__left {
  grid-area: 2/1/-1/2;
  display: grid;
  grid-template-columns: 1fr 10rem;
  grid-template-rows: 10rem 1fr 10rem;
  padding-left: 6rem;
}
.home__about__left__cover {
  grid-area: 1/1/-1/-1;
  height: 100%;
  width: 100%;
  background: #ffeadb;
  transform-origin: top;
}
.home__about__left__large {
  grid-area: 2/1/3/2;
  height: 100%;
  width: 100%;
}
.home__about__left__large__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__about__left__large__figure__image {
  object-fit: cover;
}
.home__about__left__small {
  grid-area: 1/1/3/-1;
  align-self: flex-start;
  justify-self: flex-end;
  height: 25rem;
  width: 20rem;
}
.home__about__left__small__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__about__left__small__figure__image {
  object-fit: cover;
}
.home__about__right {
  grid-area: 2/3/-1/-1;
  display: grid;
  grid-template-columns: 10rem 1fr;
  grid-template-rows: 10rem 1fr 10rem;
  padding-right: 6rem;
}
.home__about__right__cover {
  grid-area: 1/1/-1/-1;
  height: 100%;
  width: 100%;
  background: #ffeadb;
  transform-origin: top;
}
.home__about__right__large {
  grid-area: 2/2/3/-1;
  height: 100%;
  width: 100%;
}
.home__about__right__large__figure {
  position: relative;
  height: 100%;
  width: 100%;
  visibility: hidden;
}
.home__about__right__large__figure__image {
  object-fit: cover;
}

.work {
  z-index: 3;
  overflow: hidden;
}
.work__wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-12.5rem, -50%);
  padding: 10rem 0;
  border-top: 1px solid #15252d;
  border-bottom: 1px solid #15252d;
}
.work__gallery {
  z-index: 3;
}
.work__gallery__image {
  height: 35rem;
  width: 25rem;
  margin-right: 10rem;
  position: relative;
}
.work__gallery__image:last-of-type {
  margin-right: 0;
}
.work__gallery__image__link {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: 100%;
  z-index: 4;
}
.work__gallery__image__figure {
  height: 100%;
  width: 100%;
  position: relative;
  visibility: hidden;
}
.work__gallery__image__figure__image {
  object-fit: cover;
}
.work__visualiser {
  position: absolute;
  bottom: 4rem;
  left: 10rem;
  display: flex;
  gap: 0.5rem;
}
.work__visualiser__box {
  height: 4rem;
  width: 2rem;
  position: relative;
}
.work__visualiser__box__inner {
  background: #15252d;
  z-index: 2;
}
.work__index {
  position: absolute;
  bottom: 6rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
.work__index__current {
  height: 2.1rem;
  overflow: hidden;
}
.work__index__number {
  overflow: hidden;
}
.work__index__slash {
  overflow: hidden;
}
.work__index__slash__text {
  font-size: 2rem;
}
.work__index__total {
  overflow: hidden;
}
.work__titles {
  position: absolute;
  bottom: 6rem;
  right: 15rem;
  width: 20rem;
}
.work__titles__title {
  position: relative;
  height: 100%;
  width: 100%;
}
.work__titles__title__text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  white-space: nowrap;
  color: #FC5200;
  text-transform: uppercase;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/