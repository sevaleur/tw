/*! For license information please see main.8d503318e186bd09842e.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatetraewarren("main",{"./app/components/Canvas/Controller/pages/Work/Element/index.js":(e,t,i)=>{i.r(t),i.d(t,{default:()=>h});var a=i("./node_modules/three/build/three.module.js"),n=i("./node_modules/gsap/index.js"),s=i("./app/shaders/vertex.glsl"),r=i("./app/shaders/hoverSquare/fragment.glsl");class h{constructor({element:e,index:t,link:i,displacement:a,template:n,geometry:s,scene:r,screen:h,viewport:u}){this.element=e,this.index=t,this.link=i,this.disp=a,this.template=n,this.geo=s,this.scene=r,this.screen=h,this.viewport=u,this.animations={show:!1,time:0},this.createMaterial(),this.createTexture(),this.createMesh(),this.createAnimations(),this.createBounds(),this.addEventListeners()}createMaterial(){this.material=new a.ShaderMaterial({vertexShader:s.default,fragmentShader:r.default,uniforms:{tMap:{value:null},tHover:{value:null},tDisplacement:{value:this.disp},uAlpha:{value:0},uState:{value:0},uTime:{value:0},uWidth:{value:.1},uRadius:{value:.3},uLeaveState:{value:0},uImageSize:{value:[0,0]},uPlaneSize:{value:[0,0]},uViewportSize:{value:[this.viewport.width,this.viewport.height]}},transparent:!0})}createTexture(){let e=this.element.getAttribute("data-src"),t=this.element.getAttribute("data-hover");this.texture=window.IMAGE_TEXTURES[e],this.texture2=window.IMAGE_TEXTURES[t],this.material.uniforms.tMap.value=this.texture,this.material.uniforms.tHover.value=this.texture2,this.material.uniforms.uImageSize.value=[this.texture.source.data.naturalWidth,this.texture.source.data.naturalHeight]}createMesh(){this.plane=new a.Mesh(this.geo,this.material),this.scene.add(this.plane)}createBounds(){this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY(),this.plane.material.uniforms.uPlaneSize.value=[this.plane.scale.x,this.plane.scale.y]}createAnimations(){this.onAlphaChange=n.default.fromTo(this.material.uniforms.uAlpha,{value:0},{value:1,delay:.5,paused:!0}),this.onStateChange=n.default.fromTo(this.material.uniforms.uState,{value:0},{value:.2,duration:1,ease:"power2.inOut",paused:!0}),this.onShow=n.default.fromTo(this.element,{scale:0},{scale:1,duration:1,delay:.2*this.index,ease:"power2.inOut",paused:!0,onComplete:()=>{this.animations.show=!0}})}onMouseEnter(){this.onStateChange.play()}onMouseLeave(){this.onStateChange.reverse()}show(){this.onAlphaChange.play(),this.onShow.play()}hide(){this.material.uniforms.uLeaveState.value=1,this.material.uniforms.uWidth.value=.1,this.material.uniforms.uRadius.value=.12,this.onStateChange.play()}onResize(e){if(e){const{screen:t,viewport:i}=e;t&&(this.screen=t),i&&(this.viewport=i,this.plane.material.uniforms.uViewportSize.value=[this.viewport.width,this.viewport.height])}this.createBounds()}updateScale(){this.plane.scale.x=this.viewport.width*this.bounds.width/this.screen.width,this.plane.scale.y=this.viewport.height*this.bounds.height/this.screen.height,this.plane.material.uniforms.uPlaneSize.value=[this.plane.scale.x,this.plane.scale.y]}updateX(e=0){this.x=(this.bounds.left+e)/this.screen.width*this.viewport.width,this.plane.position.x=-this.viewport.width/2+this.plane.scale.x/2+this.x}updateY(){this.y=this.bounds.top/this.screen.height*this.viewport.height,this.plane.position.y=this.viewport.height/2-this.plane.scale.y/2-this.y}update(e,t){this.bounds&&(this.animations.time+=.005,this.plane.material.uniforms.uTime.value=this.animations.time,this.animations.show||this.createBounds(),this.updateScale(),this.updateX(e),this.updateY())}addEventListeners(){this.link.addEventListener("mouseenter",this.onMouseEnter.bind(this)),this.link.addEventListener("mouseleave",this.onMouseLeave.bind(this))}}},"./app/shaders/hoverSquare/fragment.glsl":(e,t,i)=>{i.r(t),i.d(t,{default:()=>a});const a="#define GLSLIFY 1\nuniform float uAlpha; \nuniform float uState; \nuniform float uTime;\nuniform float uWidth; \nuniform float uRadius;  \nuniform float uLeaveState; \n\nuniform vec2 uPlaneSize; \nuniform vec2 uImageSize; \nuniform vec2 uViewportSize; \n\nuniform sampler2D tMap; \nuniform sampler2D tHover; \nuniform sampler2D tDisplacement;\n\nvarying vec2 vUv; \nvarying vec3 vPosition; \n\nvoid main()\n{\n  vec2 ratio = vec2(\n    min((uPlaneSize.x / uPlaneSize.y) / (uImageSize.x / uImageSize.y), 1.0), \n    min((uPlaneSize.y / uPlaneSize.x) / (uImageSize.y / uImageSize.x), 1.0)\n  ); \n\n  vec2 uv = vec2(\n    vUv.x * ratio.x + (1.0 - ratio.x) * 0.5, \n    vUv.y * ratio.y + (1.0 - ratio.y) * 0.5\n  ); \n\n  vec2 center = vec2(0.5, 0.5);\n\n  vec4 noise = texture2D(tDisplacement, vUv + (uTime * 0.02));\n  float state = uState * 0.66 + noise.g * 0.04;\n\n  float calcSquare = 1.0 - smoothstep(\n    -uWidth, \n    0.0,\n    uRadius * max(\n      abs(distance(center.x * ratio.x, vUv.x * ratio.x)), \n      abs(distance(center.y * ratio.y, vUv.y * ratio.y))) - state * (1.0 + uWidth)\n    );\n\n  float interpolation = pow(abs(calcSquare), 1.0);\n\n  vec4 t1 = texture2D( tMap, (uv - 0.5) * (1.0 - interpolation) + 0.5 );\n  vec4 t2 = texture2D( tHover, (uv - 0.5) * interpolation + 0.5 );\n\n  if(uLeaveState == 1.0)\n  {\n    t2 = vec4(1.,0.918,0.859, uAlpha);\n  }\n\n  gl_FragColor = mix( t1, t2, interpolation );\n  gl_FragColor.a = uAlpha;\n}"}},(function(e){e.h=()=>"91d16ffb0b3a5de3d341"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,