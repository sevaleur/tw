/*! For license information please see main.5461542879cc22b9ed7c.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatetraewarren("main",{"./app/pages/work/index.js":(e,s,r)=>{r.r(s),r.d(s,{default:()=>l});var t=r("./node_modules/gsap/index.js"),i=r("./app/classes/Page.js"),o=r("./app/animations/Hover/Visualiser/index.js"),n=r("./app/animations/Hover/WP_Title/index.js");Object(function(){var e=new Error("Cannot find module '/img/displacement.jpg'");throw e.code="MODULE_NOT_FOUND",e}());var a=r("./app/utils/colorVariables.js");class l extends i.default{constructor(){super({element:".work",elements:{galleryBorders:".work__borders",galleryCovers:".work__gallery__image__cover",links:".work__gallery__image__link",titles:".work__titles__title__text",index:".work__index",indexNumber:".work__index__number",indexTotal:".work__index__total",visualiser:".work__visualiser",visualiserCover:".work__visualiser__box__cover",visualiserBox:".work__visualiser__box__inner"},background:a.ANTIQUE_WHITE,color:a.DARK_JUNGLE_GREEN})}create(){super.create(),this.createAnimations(),this.elements.indexTotal.innerHTML=this.elements.links.length}createAnimations(){super.createAnimations(!1),this.boxSelect=Array.from(this.elements.visualiserBox,((e,s)=>new o.default(e,a.AEROSPACE_ORANGE))),this.workSelect=Array.from(this.elements.titles,((e,s)=>new n.default(e))),this.onCoverHide=t.default.fromTo([this.elements.visualiserCover,this.elements.galleryCovers],{scaleY:1},{scaleY:0,duration:.8,delay:.5,ease:"expo.inOut",stagger:.02,paused:!0}),this.onGalleryShow=t.default.fromTo(this.elements.galleryBorders,{scaleX:0},{scaleX:1,duration:1,ease:"power2.inOut",paused:!0})}onMouseEnter(e){this.elements.indexNumber.innerHTML=e+1,this.boxSelect[e].show(),this.workSelect[e].show()}onMouseLeave(e){this.boxSelect[e].hide(),this.workSelect[e].hide()}show(){super.show(),this.onCoverHide.play(),this.onGalleryShow.play()}hide(){return super.hide(!0),new Promise((e=>{this.onCoverHide.reverse(),this.onGalleryShow.reverse().eventCallback("onReverseComplete",(()=>{e()}))}))}addEventListeners(){super.addEventListeners(),this.elements.links.forEach(((e,s)=>{e.addEventListener("mouseenter",this.onMouseEnter.bind(this,s)),e.addEventListener("mouseleave",this.onMouseLeave.bind(this,s))}))}removeEventListeners(){super.removeEventListeners()}}}},(function(e){e.h=()=>"0f3152c63619d4e5f163"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi41NDYxNTQyODc5Y2MyMmI5ZWQ3Yy5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7K2JBV2UsTUFBTUEsVUFBYUMsRUFBQUEsUUFFaENDLFdBQUFBLEdBRUVDLE1BQU0sQ0FDSkMsUUFBUyxRQUNUQyxTQUFVLENBQ1JDLGVBQWdCLGlCQUNoQkMsY0FBZSwrQkFDZkMsTUFBTyw4QkFDUEMsT0FBUSw2QkFDUkMsTUFBTyxlQUNQQyxZQUFhLHVCQUNiQyxXQUFZLHNCQUNaQyxXQUFZLG9CQUNaQyxnQkFBaUIsZ0NBQ2pCQyxjQUFlLGlDQUVqQkMsV0FBWUMsRUFBQUEsY0FDWkMsTUFBT0MsRUFBQUEsbUJBRVgsQ0FFQUMsTUFBQUEsR0FFRWpCLE1BQU1pQixTQUVOQyxLQUFLQyxtQkFFTEQsS0FBS2hCLFNBQVNPLFdBQVdXLFVBQVlGLEtBQUtoQixTQUFTRyxNQUFNZ0IsTUFDM0QsQ0FFQUYsZ0JBQUFBLEdBRUVuQixNQUFNbUIsa0JBQWlCLEdBRXZCRCxLQUFLSSxVQUFZQyxNQUFNQyxLQUNyQk4sS0FBS2hCLFNBQVNVLGVBQ2QsQ0FBQ1gsRUFBU3dCLElBRUQsSUFBSUMsRUFBQUEsUUFDVHpCLEVBQ0EwQixFQUFBQSxvQkFLTlQsS0FBS1UsV0FBYUwsTUFBTUMsS0FDdEJOLEtBQUtoQixTQUFTSSxRQUNkLENBQUNMLEVBQVN3QixJQUVELElBQUlJLEVBQUFBLFFBQ1Q1QixLQUtOaUIsS0FBS1ksWUFBY0MsRUFBQUEsUUFBS0MsT0FDdEIsQ0FDRWQsS0FBS2hCLFNBQVNTLGdCQUNkTyxLQUFLaEIsU0FBU0UsZUFFaEIsQ0FDRTZCLE9BQVEsR0FFVixDQUNFQSxPQUFRLEVBQ1JDLFNBQVUsR0FDVkMsTUFBTyxHQUNQQyxLQUFNLGFBQ05DLFFBQVMsSUFDVEMsUUFBUSxJQUlacEIsS0FBS3FCLGNBQWdCUixFQUFBQSxRQUFLQyxPQUN4QmQsS0FBS2hCLFNBQVNDLGVBQ2QsQ0FDRXFDLE9BQVEsR0FFVixDQUNFQSxPQUFRLEVBQ1JOLFNBQVUsRUFDVkUsS0FBTSxlQUNORSxRQUFRLEdBR2QsQ0FFQUcsWUFBQUEsQ0FBYWhCLEdBRVhQLEtBQUtoQixTQUFTTSxZQUFZWSxVQUFZSyxFQUFNLEVBQzVDUCxLQUFLSSxVQUFVRyxHQUFLaUIsT0FDcEJ4QixLQUFLVSxXQUFXSCxHQUFLaUIsTUFDdkIsQ0FFQUMsWUFBQUEsQ0FBYWxCLEdBRVhQLEtBQUtJLFVBQVVHLEdBQUttQixPQUNwQjFCLEtBQUtVLFdBQVdILEdBQUttQixNQUN2QixDQUVBRixJQUFBQSxHQUVFMUMsTUFBTTBDLE9BRU54QixLQUFLWSxZQUFZZSxPQUNqQjNCLEtBQUtxQixjQUFjTSxNQUNyQixDQUVBRCxJQUFBQSxHQUlFLE9BRkE1QyxNQUFNNEMsTUFBSyxHQUVKLElBQUlFLFNBQ1RDLElBRUU3QixLQUFLWSxZQUFZa0IsVUFDakI5QixLQUFLcUIsY0FBY1MsVUFDaEJDLGNBQ0MscUJBQ0EsS0FFRUYsR0FBUyxHQUVaLEdBR1QsQ0FFQUcsaUJBQUFBLEdBRUVsRCxNQUFNa0Qsb0JBRU5oQyxLQUFLaEIsU0FBU0csTUFBTThDLFNBQ2xCLENBQUNDLEVBQU0zQixLQUVMMkIsRUFBS0MsaUJBQWlCLGFBQWNuQyxLQUFLdUIsYUFBYWEsS0FBS3BDLEtBQU1PLElBQ2pFMkIsRUFBS0MsaUJBQWlCLGFBQWNuQyxLQUFLeUIsYUFBYVcsS0FBS3BDLEtBQU1PLEdBQUssR0FHNUUsQ0FFQThCLG9CQUFBQSxHQUVFdkQsTUFBTXVELHNCQUNSLGtCQzdKRkMsRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYWV3YXJyZW4vLi9hcHAvcGFnZXMvd29yay9pbmRleC5qcyIsIndlYnBhY2s6Ly90cmFld2FycmVuL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ3NhcCBmcm9tICdnc2FwJ1xuXG5pbXBvcnQgUGFnZSBmcm9tICdjbGFzc2VzL1BhZ2UnXG5cbmltcG9ydCBWaXN1YWxpc2VyIGZyb20gJ2FuaW1hdGlvbnMvSG92ZXIvVmlzdWFsaXNlcidcbmltcG9ydCBXUF9UaXRsZSBmcm9tICdhbmltYXRpb25zL0hvdmVyL1dQX1RpdGxlJ1xuXG5pbXBvcnQgZGlzcCBmcm9tICcvaW1nL2Rpc3BsYWNlbWVudC5qcGcnXG5cbmltcG9ydCB7IEFOVElRVUVfV0hJVEUsIERBUktfSlVOR0xFX0dSRUVOLCBBRVJPU1BBQ0VfT1JBTkdFIH0gZnJvbSAndXRpbHMvY29sb3JWYXJpYWJsZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvcmsgZXh0ZW5kcyBQYWdlIFxue1xuICBjb25zdHJ1Y3RvcigpXG4gIHtcbiAgICBzdXBlcih7IFxuICAgICAgZWxlbWVudDogJy53b3JrJywgXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICBnYWxsZXJ5Qm9yZGVyczogJy53b3JrX19ib3JkZXJzJyxcbiAgICAgICAgZ2FsbGVyeUNvdmVyczogJy53b3JrX19nYWxsZXJ5X19pbWFnZV9fY292ZXInLFxuICAgICAgICBsaW5rczogJy53b3JrX19nYWxsZXJ5X19pbWFnZV9fbGluaycsXG4gICAgICAgIHRpdGxlczogJy53b3JrX190aXRsZXNfX3RpdGxlX190ZXh0JyxcbiAgICAgICAgaW5kZXg6ICcud29ya19faW5kZXgnLCBcbiAgICAgICAgaW5kZXhOdW1iZXI6ICcud29ya19faW5kZXhfX251bWJlcicsIFxuICAgICAgICBpbmRleFRvdGFsOiAnLndvcmtfX2luZGV4X190b3RhbCcsXG4gICAgICAgIHZpc3VhbGlzZXI6ICcud29ya19fdmlzdWFsaXNlcicsXG4gICAgICAgIHZpc3VhbGlzZXJDb3ZlcjogJy53b3JrX192aXN1YWxpc2VyX19ib3hfX2NvdmVyJyxcbiAgICAgICAgdmlzdWFsaXNlckJveDogJy53b3JrX192aXN1YWxpc2VyX19ib3hfX2lubmVyJ1xuICAgICAgfSwgXG4gICAgICBiYWNrZ3JvdW5kOiBBTlRJUVVFX1dISVRFLFxuICAgICAgY29sb3I6IERBUktfSlVOR0xFX0dSRUVOXG4gICAgfSlcbiAgfVxuXG4gIGNyZWF0ZSgpXG4gIHtcbiAgICBzdXBlci5jcmVhdGUoKVxuXG4gICAgdGhpcy5jcmVhdGVBbmltYXRpb25zKClcblxuICAgIHRoaXMuZWxlbWVudHMuaW5kZXhUb3RhbC5pbm5lckhUTUwgPSB0aGlzLmVsZW1lbnRzLmxpbmtzLmxlbmd0aFxuICB9XG5cbiAgY3JlYXRlQW5pbWF0aW9ucygpXG4gIHtcbiAgICBzdXBlci5jcmVhdGVBbmltYXRpb25zKGZhbHNlKVxuXG4gICAgdGhpcy5ib3hTZWxlY3QgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5lbGVtZW50cy52aXN1YWxpc2VyQm94LCBcbiAgICAgIChlbGVtZW50LCBpZHgpID0+XG4gICAgICB7XG4gICAgICAgIHJldHVybiBuZXcgVmlzdWFsaXNlcihcbiAgICAgICAgICBlbGVtZW50LCBcbiAgICAgICAgICBBRVJPU1BBQ0VfT1JBTkdFXG4gICAgICAgIClcbiAgICAgIH1cbiAgICApXG5cbiAgICB0aGlzLndvcmtTZWxlY3QgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5lbGVtZW50cy50aXRsZXMsIFxuICAgICAgKGVsZW1lbnQsIGlkeCkgPT4gXG4gICAgICB7XG4gICAgICAgIHJldHVybiBuZXcgV1BfVGl0bGUoXG4gICAgICAgICAgZWxlbWVudFxuICAgICAgICApXG4gICAgICB9XG4gICAgKVxuXG4gICAgdGhpcy5vbkNvdmVySGlkZSA9IGdzYXAuZnJvbVRvKFxuICAgICAgW1xuICAgICAgICB0aGlzLmVsZW1lbnRzLnZpc3VhbGlzZXJDb3ZlciwgXG4gICAgICAgIHRoaXMuZWxlbWVudHMuZ2FsbGVyeUNvdmVyc1xuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgc2NhbGVZOiAxLjAsIFxuICAgICAgfSwgXG4gICAgICB7XG4gICAgICAgIHNjYWxlWTogMCwgXG4gICAgICAgIGR1cmF0aW9uOiAwLjgsIFxuICAgICAgICBkZWxheTogMC41LFxuICAgICAgICBlYXNlOiAnZXhwby5pbk91dCcsIFxuICAgICAgICBzdGFnZ2VyOiAwLjAyLFxuICAgICAgICBwYXVzZWQ6IHRydWVcbiAgICAgIH1cbiAgICApXG5cbiAgICB0aGlzLm9uR2FsbGVyeVNob3cgPSBnc2FwLmZyb21UbyhcbiAgICAgIHRoaXMuZWxlbWVudHMuZ2FsbGVyeUJvcmRlcnMsIFxuICAgICAge1xuICAgICAgICBzY2FsZVg6IDAuMCxcbiAgICAgIH0sIFxuICAgICAge1xuICAgICAgICBzY2FsZVg6IDEuMCwgXG4gICAgICAgIGR1cmF0aW9uOiAxLjAsIFxuICAgICAgICBlYXNlOiAncG93ZXIyLmluT3V0JywgXG4gICAgICAgIHBhdXNlZDogdHJ1ZVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG9uTW91c2VFbnRlcihpZHgpXG4gIHtcbiAgICB0aGlzLmVsZW1lbnRzLmluZGV4TnVtYmVyLmlubmVySFRNTCA9IGlkeCArIDFcbiAgICB0aGlzLmJveFNlbGVjdFtpZHhdLnNob3coKVxuICAgIHRoaXMud29ya1NlbGVjdFtpZHhdLnNob3coKVxuICB9XG5cbiAgb25Nb3VzZUxlYXZlKGlkeClcbiAge1xuICAgIHRoaXMuYm94U2VsZWN0W2lkeF0uaGlkZSgpXG4gICAgdGhpcy53b3JrU2VsZWN0W2lkeF0uaGlkZSgpXG4gIH1cblxuICBzaG93KClcbiAge1xuICAgIHN1cGVyLnNob3coKVxuXG4gICAgdGhpcy5vbkNvdmVySGlkZS5wbGF5KClcbiAgICB0aGlzLm9uR2FsbGVyeVNob3cucGxheSgpXG4gIH1cblxuICBoaWRlKClcbiAge1xuICAgIHN1cGVyLmhpZGUodHJ1ZSlcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShcbiAgICAgIHJlc29sdmUgPT4gXG4gICAgICB7XG4gICAgICAgIHRoaXMub25Db3ZlckhpZGUucmV2ZXJzZSgpXG4gICAgICAgIHRoaXMub25HYWxsZXJ5U2hvdy5yZXZlcnNlKClcbiAgICAgICAgICAuZXZlbnRDYWxsYmFjayhcbiAgICAgICAgICAgICdvblJldmVyc2VDb21wbGV0ZScsIFxuICAgICAgICAgICAgKCkgPT4gXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIClcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycygpXG4gIHtcbiAgICBzdXBlci5hZGRFdmVudExpc3RlbmVycygpXG5cbiAgICB0aGlzLmVsZW1lbnRzLmxpbmtzLmZvckVhY2goXG4gICAgICAobGluaywgaWR4KSA9PiBcbiAgICAgIHtcbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5vbk1vdXNlRW50ZXIuYmluZCh0aGlzLCBpZHgpKVxuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm9uTW91c2VMZWF2ZS5iaW5kKHRoaXMsIGlkeCkpXG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKVxuICB7XG4gICAgc3VwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG59IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiMGYzMTUyYzYzNjE5ZDRlNWYxNjNcIikiXSwibmFtZXMiOlsiV29yayIsIlBhZ2UiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiZWxlbWVudCIsImVsZW1lbnRzIiwiZ2FsbGVyeUJvcmRlcnMiLCJnYWxsZXJ5Q292ZXJzIiwibGlua3MiLCJ0aXRsZXMiLCJpbmRleCIsImluZGV4TnVtYmVyIiwiaW5kZXhUb3RhbCIsInZpc3VhbGlzZXIiLCJ2aXN1YWxpc2VyQ292ZXIiLCJ2aXN1YWxpc2VyQm94IiwiYmFja2dyb3VuZCIsIkFOVElRVUVfV0hJVEUiLCJjb2xvciIsIkRBUktfSlVOR0xFX0dSRUVOIiwiY3JlYXRlIiwidGhpcyIsImNyZWF0ZUFuaW1hdGlvbnMiLCJpbm5lckhUTUwiLCJsZW5ndGgiLCJib3hTZWxlY3QiLCJBcnJheSIsImZyb20iLCJpZHgiLCJWaXN1YWxpc2VyIiwiQUVST1NQQUNFX09SQU5HRSIsIndvcmtTZWxlY3QiLCJXUF9UaXRsZSIsIm9uQ292ZXJIaWRlIiwiZ3NhcCIsImZyb21UbyIsInNjYWxlWSIsImR1cmF0aW9uIiwiZGVsYXkiLCJlYXNlIiwic3RhZ2dlciIsInBhdXNlZCIsIm9uR2FsbGVyeVNob3ciLCJzY2FsZVgiLCJvbk1vdXNlRW50ZXIiLCJzaG93Iiwib25Nb3VzZUxlYXZlIiwiaGlkZSIsInBsYXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJldmVyc2UiLCJldmVudENhbGxiYWNrIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJmb3JFYWNoIiwibGluayIsImFkZEV2ZW50TGlzdGVuZXIiLCJiaW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=