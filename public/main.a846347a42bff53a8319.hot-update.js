/*! For license information please see main.a846347a42bff53a8319.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatetraewarren("main",{"./app/components/Canvas/Controller/pages/Home/StaticElement/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./node_modules/three/build/three.module.js"),r=s("./node_modules/gsap/index.js");Object(function(){var e=new Error("Cannot find module 'shaders/home/circle/vertex.glsl'");throw e.code="MODULE_NOT_FOUND",e}()),Object(function(){var e=new Error("Cannot find module 'shaders/home/circle/fragment.glsl'");throw e.code="MODULE_NOT_FOUND",e}());class a{constructor({element:e,index:t,template:s,link:i,geometry:r,scene:a,screen:h,viewport:o}){this.element=e,this.index=t,this.template=s,this.geo=r,this.scene=a,this.screen=h,this.viewport=o,this.createMaterial(),this.createTexture(),this.createMesh(),this.createBounds(),this.createAnimations()}createMaterial(){this.material=new i.ShaderMaterial({vertexShader:Object(function(){var e=new Error("Cannot find module 'shaders/home/circle/vertex.glsl'");throw e.code="MODULE_NOT_FOUND",e}()),fragmentShader:Object(function(){var e=new Error("Cannot find module 'shaders/home/circle/fragment.glsl'");throw e.code="MODULE_NOT_FOUND",e}()),uniforms:{tMap:{value:null},u_alpha:{value:0},u_imageSize:{value:[0,0]},u_planeSize:{value:[0,0]},u_state:{value:0},u_viewportSize:{value:[this.viewport.width,this.viewport.height]}},transparent:!0})}createTexture(){let e=this.element.getAttribute("data-src");this.texture=window.IMAGE_TEXTURES[e],this.material.uniforms.tMap.value=this.texture,this.material.uniforms.u_imageSize.value=[this.texture.source.data.naturalWidth,this.texture.source.data.naturalHeight]}createMesh(){this.plane=new i.Mesh(this.geo,this.material),this.scene.add(this.plane)}createBounds(){this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY(),this.plane.material.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y]}createAnimations(){this.onAlphaChange=r.default.fromTo(this.material.uniforms.u_alpha,{value:0},{value:1,delay:.5,paused:!0}),this.onStateChange=r.default.fromTo(this.material.uniforms.u_state,{value:0},{value:1,duration:1,ease:"power2.inOut",paused:!0})}show(){this.onAlphaChange.play().eventCallback("onComplete",(()=>{this.onStateChange.play()}))}hide(){this.onStateChange.reverse(),this.onAlphaChange.reverse()}onResize(e){if(e){const{screen:t,viewport:s}=e;t&&(this.screen=t),s&&(this.viewport=s,this.plane.material.uniforms.u_viewportSize.value=[this.viewport.width,this.viewport.height])}this.createBounds()}updateScale(){this.plane.scale.x=this.viewport.width*this.bounds.width/this.screen.width,this.plane.scale.y=this.viewport.height*this.bounds.height/this.screen.height,this.plane.material.uniforms.u_planeSize.value=[this.plane.scale.x,this.plane.scale.y]}updateX(){this.x=this.bounds.left/this.screen.width*this.viewport.width,this.plane.position.x=-this.viewport.width/2+this.plane.scale.x/2+this.x}updateY(){this.y=this.bounds.top/this.screen.height*this.viewport.height,this.plane.position.y=this.viewport.height/2-this.plane.scale.y/2-this.y}update(){this.bounds&&(this.updateScale(),this.updateX(),this.updateY())}}},"./app/components/Canvas/Controller/pages/Home/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>o});var i=s("./node_modules/three/build/three.module.js"),r=s("./app/components/Canvas/Controller/pages/Home/DelayedElement/index.js"),a=s("./app/components/Canvas/Controller/pages/Home/StaticElement/index.js"),h=s("./app/components/Canvas/Controller/pages/Home/Background/index.js");class o{constructor({scene:e,screen:t,viewport:s,geo:r}){this.scene=e,this.screen=t,this.viewport=s,this.geo=r,this.dGroup=new i.Group,this.sGroup=new i.Group,this.createElements(),this.createHeader(),this.createFeaturedWork(),this.onResize(),this.scene.add(this.dGroup,this.sGroup)}createElements(){this.home_element=document.querySelector(".home"),this.home_wrapper=document.querySelector(".home__wrapper"),this.headerImage=document.querySelector("img.home__header__portrait__figure__image"),this.background=document.querySelector(".home__showcase"),this.workImages=document.querySelectorAll("img.home__showcase__gallery__image__figure__image")}createHeader(){this.portrait=new r.default({element:this.headerImage,template:this.template,geometry:this.geo,scene:this.dGroup,screen:this.screen,viewport:this.viewport})}createFeaturedWork(){this.background=new h.default({element:this.background,geometry:this.geo,scene:this.sGroup,screen:this.screen,viewport:this.viewport}),this.works=Array.from(this.workImages,((e,t)=>new a.default({element:e,index:t,template:this.template,geometry:this.geo,scene:this.sGroup,screen:this.screen,viewport:this.viewport})))}onResize(){this.portrait.onResize({screen:this.screen,viewport:this.viewport}),this.background.onResize({screen:this.screen,viewport:this.viewport}),this.works.forEach((e=>{e.onResize({screen:this.screen,viewport:this.viewport})}))}show(){this.portrait.show(),this.background.show(),this.works.forEach((e=>{e.show()}))}hide(){this.portrait.hide(),this.background.hide(),this.works.forEach((e=>{e.hide()}))}update(e){const t=e.current/this.screen.height*this.viewport.height;this.dGroup.position.y=.9*t,this.sGroup.position.y=1*t,this.portrait.update(),this.background.update(e),this.works.forEach((e=>{e.update()}))}destroy(){this.scene.remove(this.dGroup),this.scene.remove(this.sGroup)}}}},(function(e){e.h=()=>"32a860e690db5f36daa6"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5hODQ2MzQ3YTQyYmZmNTNhODMxOS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7Z2dCQU1lLE1BQU1BLEVBRW5CQyxXQUFBQSxFQUFZLFFBQUVDLEVBQU8sTUFBRUMsRUFBSyxTQUFFQyxFQUFRLEtBQUVDLEVBQUksU0FBRUMsRUFBUSxNQUFFQyxFQUFLLE9BQUVDLEVBQU0sU0FBRUMsSUFFckVDLEtBQUtSLFFBQVVBLEVBQ2ZRLEtBQUtQLE1BQVFBLEVBQ2JPLEtBQUtOLFNBQVdBLEVBQ2hCTSxLQUFLQyxJQUFNTCxFQUNYSSxLQUFLSCxNQUFRQSxFQUNiRyxLQUFLRixPQUFTQSxFQUNkRSxLQUFLRCxTQUFXQSxFQUVoQkMsS0FBS0UsaUJBQ0xGLEtBQUtHLGdCQUNMSCxLQUFLSSxhQUNMSixLQUFLSyxlQUNMTCxLQUFLTSxrQkFDUCxDQUVBSixjQUFBQSxHQUVFRixLQUFLTyxTQUFXLElBQUlDLEVBQUFBLGVBQ2xCLENBQ0VDLGFBQWNDLE9BQUFBLFdBQUFBLElBQUFBLEVBQUFBLElBQUFBLE1BQUFBLHdEQUFBQSxNQUFBQSxFQUFBQSxLQUFBQSxtQkFBQUEsQ0FBQUEsQ0FBQUEsSUFDZEMsZUFBZ0JDLE9BQUFBLFdBQUFBLElBQUFBLEVBQUFBLElBQUFBLE1BQUFBLDBEQUFBQSxNQUFBQSxFQUFBQSxLQUFBQSxtQkFBQUEsQ0FBQUEsQ0FBQUEsSUFDaEJDLFNBQVUsQ0FDUkMsS0FBTSxDQUFFQyxNQUFPLE1BQ2ZDLFFBQVMsQ0FBRUQsTUFBTyxHQUNsQkUsWUFBYSxDQUFFRixNQUFPLENBQUUsRUFBSyxJQUM3QkcsWUFBYSxDQUFFSCxNQUFPLENBQUUsRUFBSyxJQUM3QkksUUFBUyxDQUFFSixNQUFPLEdBQ2xCSyxlQUFnQixDQUFFTCxNQUFPLENBQUVmLEtBQUtELFNBQVNzQixNQUFPckIsS0FBS0QsU0FBU3VCLFVBRWhFQyxhQUFhLEdBR25CLENBRUFwQixhQUFBQSxHQUVFLElBQUlxQixFQUFNeEIsS0FBS1IsUUFBUWlDLGFBQWEsWUFFcEN6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QU8xRixLQUFLZ0UsUUFDdkJoRSxLQUFLSCxNQUFNNkYsT0FBTzFGLEtBQUtrRSxPQUN6QixrQkNqS0Z5QixFQUFvQkMsRUFBSSxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHJhZXdhcnJlbi8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9Db250cm9sbGVyL3BhZ2VzL0hvbWUvU3RhdGljRWxlbWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly90cmFld2FycmVuLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0NvbnRyb2xsZXIvcGFnZXMvSG9tZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90cmFld2FycmVuL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaGFkZXJNYXRlcmlhbCwgTWVzaCB9IGZyb20gJ3RocmVlJ1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcblxuaW1wb3J0IHZlcnRleCBmcm9tICdzaGFkZXJzL2hvbWUvY2lyY2xlL3ZlcnRleC5nbHNsJ1xuaW1wb3J0IGZyYWdtZW50IGZyb20gJ3NoYWRlcnMvaG9tZS9jaXJjbGUvZnJhZ21lbnQuZ2xzbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2lyY2xlXG57XG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgaW5kZXgsIHRlbXBsYXRlLCBsaW5rLCBnZW9tZXRyeSwgc2NlbmUsIHNjcmVlbiwgdmlld3BvcnQgfSlcbiAge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgXG4gICAgdGhpcy5pbmRleCA9IGluZGV4XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlIFxuICAgIHRoaXMuZ2VvID0gZ2VvbWV0cnkgXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lIFxuICAgIHRoaXMuc2NyZWVuID0gc2NyZWVuIFxuICAgIHRoaXMudmlld3BvcnQgPSB2aWV3cG9ydFxuXG4gICAgdGhpcy5jcmVhdGVNYXRlcmlhbCgpXG4gICAgdGhpcy5jcmVhdGVUZXh0dXJlKClcbiAgICB0aGlzLmNyZWF0ZU1lc2goKVxuICAgIHRoaXMuY3JlYXRlQm91bmRzKClcbiAgICB0aGlzLmNyZWF0ZUFuaW1hdGlvbnMoKVxuICB9XG5cbiAgY3JlYXRlTWF0ZXJpYWwoKVxuICB7XG4gICAgdGhpcy5tYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbChcbiAgICAgIHtcbiAgICAgICAgdmVydGV4U2hhZGVyOiB2ZXJ0ZXgsIFxuICAgICAgICBmcmFnbWVudFNoYWRlcjogZnJhZ21lbnQsIFxuICAgICAgICB1bmlmb3Jtczoge1xuICAgICAgICAgIHRNYXA6IHsgdmFsdWU6IG51bGx9LCBcbiAgICAgICAgICB1X2FscGhhOiB7IHZhbHVlOiAwLjAgfSwgXG4gICAgICAgICAgdV9pbWFnZVNpemU6IHsgdmFsdWU6IFsgMC4wLCAwLjAgXSB9LCBcbiAgICAgICAgICB1X3BsYW5lU2l6ZTogeyB2YWx1ZTogWyAwLjAsIDAuMCBdIH0sIFxuICAgICAgICAgIHVfc3RhdGU6IHsgdmFsdWU6IDAuMCB9LCBcbiAgICAgICAgICB1X3ZpZXdwb3J0U2l6ZTogeyB2YWx1ZTogWyB0aGlzLnZpZXdwb3J0LndpZHRoLCB0aGlzLnZpZXdwb3J0LmhlaWdodCBdIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUgXG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgY3JlYXRlVGV4dHVyZSgpXG4gIHtcbiAgICBsZXQgc3JjID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKVxuXG4gICAgdGhpcy50ZXh0dXJlID0gd2luZG93LklNQUdFX1RFWFRVUkVTW3NyY11cblxuICAgIHRoaXMubWF0ZXJpYWwudW5pZm9ybXMudE1hcC52YWx1ZSA9IHRoaXMudGV4dHVyZSBcbiAgICBcbiAgICB0aGlzLm1hdGVyaWFsLnVuaWZvcm1zLnVfaW1hZ2VTaXplLnZhbHVlID0gW1xuICAgICAgdGhpcy50ZXh0dXJlLnNvdXJjZS5kYXRhLm5hdHVyYWxXaWR0aCxcbiAgICAgIHRoaXMudGV4dHVyZS5zb3VyY2UuZGF0YS5uYXR1cmFsSGVpZ2h0XG4gICAgXVxuICB9XG5cbiAgY3JlYXRlTWVzaCgpXG4gIHtcbiAgICB0aGlzLnBsYW5lID0gbmV3IE1lc2goXG4gICAgICB0aGlzLmdlbywgXG4gICAgICB0aGlzLm1hdGVyaWFsXG4gICAgKVxuXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5wbGFuZSlcbiAgfVxuXG4gIGNyZWF0ZUJvdW5kcygpXG4gIHtcbiAgICB0aGlzLmJvdW5kcyA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgdGhpcy51cGRhdGVTY2FsZSgpXG4gICAgdGhpcy51cGRhdGVYKClcbiAgICB0aGlzLnVwZGF0ZVkoKVxuXG4gICAgdGhpcy5wbGFuZS5tYXRlcmlhbC51bmlmb3Jtcy51X3BsYW5lU2l6ZS52YWx1ZSA9IFt0aGlzLnBsYW5lLnNjYWxlLngsIHRoaXMucGxhbmUuc2NhbGUueV1cbiAgfVxuXG4gIGNyZWF0ZUFuaW1hdGlvbnMoKVxuICB7XG4gICAgdGhpcy5vbkFscGhhQ2hhbmdlID0gZ3NhcC5mcm9tVG8oXG4gICAgICB0aGlzLm1hdGVyaWFsLnVuaWZvcm1zLnVfYWxwaGEsXG4gICAgICB7XG4gICAgICAgIHZhbHVlOiAwLjBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHZhbHVlOiAxLjAsXG4gICAgICAgIGRlbGF5OiAwLjUsXG4gICAgICAgIHBhdXNlZDogdHJ1ZVxuICAgICAgfVxuICAgIClcbiAgICBcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UgPSBnc2FwLmZyb21UbyhcbiAgICAgIHRoaXMubWF0ZXJpYWwudW5pZm9ybXMudV9zdGF0ZSxcbiAgICAgIHtcbiAgICAgICAgdmFsdWU6IDAuMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdmFsdWU6IDEuMCxcbiAgICAgICAgZHVyYXRpb246IDEuMCxcbiAgICAgICAgZWFzZTogJ3Bvd2VyMi5pbk91dCcsXG4gICAgICAgIHBhdXNlZDogdHJ1ZVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gICAgLypcbiAgICBBTklNQVRJT05TLlxuICAqL1xuXG4gIHNob3coKVxuICB7XG4gICAgdGhpcy5vbkFscGhhQ2hhbmdlLnBsYXkoKVxuICAgICAgLmV2ZW50Q2FsbGJhY2soJ29uQ29tcGxldGUnLCAoKSA9PiBcbiAgICAgIHtcbiAgICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlLnBsYXkoKVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIGhpZGUoKVxuICB7XG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlLnJldmVyc2UoKVxuICAgIHRoaXMub25BbHBoYUNoYW5nZS5yZXZlcnNlKClcbiAgfVxuXG4gICAvKlxuICAgIEVWRU5UUy5cbiAgKi9cblxuICBvblJlc2l6ZShzaXplcylcbiAge1xuICAgIGlmKHNpemVzKVxuICAgIHtcbiAgICAgIGNvbnN0IHsgc2NyZWVuLCB2aWV3cG9ydCB9ID0gc2l6ZXNcblxuICAgICAgaWYoc2NyZWVuKSB0aGlzLnNjcmVlbiA9IHNjcmVlblxuICAgICAgaWYodmlld3BvcnQpIHtcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IHZpZXdwb3J0XG5cbiAgICAgICAgdGhpcy5wbGFuZS5tYXRlcmlhbC51bmlmb3Jtcy51X3ZpZXdwb3J0U2l6ZS52YWx1ZSA9IFt0aGlzLnZpZXdwb3J0LndpZHRoLCB0aGlzLnZpZXdwb3J0LmhlaWdodF1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZUJvdW5kcygpXG4gIH1cblxuICAvKlxuICBVUERBVEUuXG4gICovXG5cbiAgdXBkYXRlU2NhbGUoKVxuICB7XG4gICAgdGhpcy5wbGFuZS5zY2FsZS54ID0gdGhpcy52aWV3cG9ydC53aWR0aCAqIHRoaXMuYm91bmRzLndpZHRoIC8gdGhpcy5zY3JlZW4ud2lkdGhcbiAgICB0aGlzLnBsYW5lLnNjYWxlLnkgPSB0aGlzLnZpZXdwb3J0LmhlaWdodCAqIHRoaXMuYm91bmRzLmhlaWdodCAvIHRoaXMuc2NyZWVuLmhlaWdodFxuXG4gICAgdGhpcy5wbGFuZS5tYXRlcmlhbC51bmlmb3Jtcy51X3BsYW5lU2l6ZS52YWx1ZSA9IFt0aGlzLnBsYW5lLnNjYWxlLngsIHRoaXMucGxhbmUuc2NhbGUueV1cbiAgfVxuXG4gIHVwZGF0ZVgoKVxuICB7XG4gICAgdGhpcy54ID0gKHRoaXMuYm91bmRzLmxlZnQgLyB0aGlzLnNjcmVlbi53aWR0aCkgKiB0aGlzLnZpZXdwb3J0LndpZHRoXG4gICAgdGhpcy5wbGFuZS5wb3NpdGlvbi54ID0gKC10aGlzLnZpZXdwb3J0LndpZHRoIC8gMikgKyAodGhpcy5wbGFuZS5zY2FsZS54IC8gMikgKyB0aGlzLnhcbiAgfVxuXG4gIHVwZGF0ZVkoKVxuICB7XG4gICAgdGhpcy55ID0gKHRoaXMuYm91bmRzLnRvcCAvIHRoaXMuc2NyZWVuLmhlaWdodCkgKiB0aGlzLnZpZXdwb3J0LmhlaWdodFxuICAgIHRoaXMucGxhbmUucG9zaXRpb24ueSA9ICh0aGlzLnZpZXdwb3J0LmhlaWdodCAvIDIpIC0gKHRoaXMucGxhbmUuc2NhbGUueSAvIDIpIC0gdGhpcy55XG4gIH1cblxuICB1cGRhdGUoKVxuICB7XG4gICAgaWYoIXRoaXMuYm91bmRzKSByZXR1cm5cblxuICAgIHRoaXMudXBkYXRlU2NhbGUoKVxuICAgIHRoaXMudXBkYXRlWCgpXG4gICAgdGhpcy51cGRhdGVZKClcbiAgfVxufSIsImltcG9ydCB7IEdyb3VwIH0gZnJvbSAndGhyZWUnIFxuXG5pbXBvcnQgRGVsYXllZEVsZW1lbnQgZnJvbSAnLi9EZWxheWVkRWxlbWVudCdcbmltcG9ydCBTdGF0aWNFbGVtZW50IGZyb20gJy4vU3RhdGljRWxlbWVudCdcbmltcG9ydCBCYWNrZ3JvdW5kIGZyb20gJy4vQmFja2dyb3VuZCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG9tZSBcbntcbiAgY29uc3RydWN0b3IoeyBzY2VuZSwgc2NyZWVuLCB2aWV3cG9ydCwgZ2VvIH0pXG4gIHtcbiAgICB0aGlzLnNjZW5lID0gc2NlbmUgXG4gICAgdGhpcy5zY3JlZW4gPSBzY3JlZW4gXG4gICAgdGhpcy52aWV3cG9ydCA9IHZpZXdwb3J0IFxuICAgIHRoaXMuZ2VvID0gZ2VvIFxuXG4gICAgdGhpcy5kR3JvdXAgPSBuZXcgR3JvdXAoKVxuICAgIHRoaXMuc0dyb3VwID0gbmV3IEdyb3VwKClcblxuICAgIHRoaXMuY3JlYXRlRWxlbWVudHMoKVxuICAgIHRoaXMuY3JlYXRlSGVhZGVyKClcbiAgICB0aGlzLmNyZWF0ZUZlYXR1cmVkV29yaygpXG5cbiAgICB0aGlzLm9uUmVzaXplKClcblxuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuZEdyb3VwLCB0aGlzLnNHcm91cClcbiAgfVxuXG4gIC8qIFxuICAgIENSRUFURS5cbiAgKi9cblxuICBjcmVhdGVFbGVtZW50cygpXG4gIHtcbiAgICB0aGlzLmhvbWVfZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lJylcbiAgICB0aGlzLmhvbWVfd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lX193cmFwcGVyJylcblxuICAgIHRoaXMuaGVhZGVySW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbWcuaG9tZV9faGVhZGVyX19wb3J0cmFpdF9fZmlndXJlX19pbWFnZScpXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWVfX3Nob3djYXNlJylcbiAgICB0aGlzLndvcmtJbWFnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbWcuaG9tZV9fc2hvd2Nhc2VfX2dhbGxlcnlfX2ltYWdlX19maWd1cmVfX2ltYWdlJylcbiAgfVxuXG4gIGNyZWF0ZUhlYWRlcigpXG4gIHtcbiAgICB0aGlzLnBvcnRyYWl0ID0gbmV3IERlbGF5ZWRFbGVtZW50KFxuICAgICAge1xuICAgICAgICBlbGVtZW50OiB0aGlzLmhlYWRlckltYWdlLCBcbiAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGUsXG4gICAgICAgIGdlb21ldHJ5OiB0aGlzLmdlbywgXG4gICAgICAgIHNjZW5lOiB0aGlzLmRHcm91cCwgXG4gICAgICAgIHNjcmVlbjogdGhpcy5zY3JlZW4sIFxuICAgICAgICB2aWV3cG9ydDogdGhpcy52aWV3cG9ydFxuICAgICAgfVxuICAgIClcbiAgfVxuICBcbiAgY3JlYXRlRmVhdHVyZWRXb3JrKClcbiAge1xuICAgIHRoaXMuYmFja2dyb3VuZCA9IG5ldyBCYWNrZ3JvdW5kKFxuICAgICAge1xuICAgICAgICBlbGVtZW50OiB0aGlzLmJhY2tncm91bmQsIFxuICAgICAgICBnZW9tZXRyeTogdGhpcy5nZW8sIFxuICAgICAgICBzY2VuZTogdGhpcy5zR3JvdXAsIFxuICAgICAgICBzY3JlZW46IHRoaXMuc2NyZWVuLCBcbiAgICAgICAgdmlld3BvcnQ6IHRoaXMudmlld3BvcnRcbiAgICAgIH1cbiAgICApXG5cbiAgICB0aGlzLndvcmtzID0gQXJyYXkuZnJvbShcbiAgICAgIHRoaXMud29ya0ltYWdlcywgXG4gICAgICAoZWxlbWVudCwgaW5kZXgpID0+IFxuICAgICAge1xuICAgICAgICByZXR1cm4gbmV3IFN0YXRpY0VsZW1lbnQoXG4gICAgICAgICAge1xuICAgICAgICAgICAgZWxlbWVudCwgXG4gICAgICAgICAgICBpbmRleCwgXG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZSwgXG4gICAgICAgICAgICBnZW9tZXRyeTogdGhpcy5nZW8sIFxuICAgICAgICAgICAgc2NlbmU6IHRoaXMuc0dyb3VwLCBcbiAgICAgICAgICAgIHNjcmVlbjogdGhpcy5zY3JlZW4sIFxuICAgICAgICAgICAgdmlld3BvcnQ6IHRoaXMudmlld3BvcnRcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICAvKiBcbiAgICBFVkVOVFMuXG4gICovXG5cbiAgb25SZXNpemUoKVxuICB7XG4gICAgdGhpcy5wb3J0cmFpdC5vblJlc2l6ZShcbiAgICAgIHtcbiAgICAgICAgc2NyZWVuOiB0aGlzLnNjcmVlbixcbiAgICAgICAgdmlld3BvcnQ6IHRoaXMudmlld3BvcnQsXG4gICAgICB9XG4gICAgKVxuXG4gICAgdGhpcy5iYWNrZ3JvdW5kLm9uUmVzaXplKFxuICAgICAge1xuICAgICAgICBzY3JlZW46IHRoaXMuc2NyZWVuLCBcbiAgICAgICAgdmlld3BvcnQ6IHRoaXMudmlld3BvcnRcbiAgICAgIH1cbiAgICApXG5cbiAgICB0aGlzLndvcmtzLmZvckVhY2goXG4gICAgICBlbCA9PiBcbiAgICAgIHtcbiAgICAgICAgZWwub25SZXNpemUoXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2NyZWVuOiB0aGlzLnNjcmVlbiwgXG4gICAgICAgICAgICB2aWV3cG9ydDogdGhpcy52aWV3cG9ydFxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIC8qIFxuICAgIEFOSU1BVElPTlMuXG4gICovXG5cbiAgc2hvdygpXG4gIHtcbiAgICB0aGlzLnBvcnRyYWl0LnNob3coKVxuICAgIHRoaXMuYmFja2dyb3VuZC5zaG93KClcbiAgICB0aGlzLndvcmtzLmZvckVhY2goZWwgPT4geyBlbC5zaG93KCkgfSlcbiAgfVxuXG4gIGhpZGUoKVxuICB7XG4gICAgdGhpcy5wb3J0cmFpdC5oaWRlKClcbiAgICB0aGlzLmJhY2tncm91bmQuaGlkZSgpXG4gICAgdGhpcy53b3Jrcy5mb3JFYWNoKGVsID0+IHsgZWwuaGlkZSgpIH0pXG4gIH1cblxuICAvKiBcbiAgICBVUERBVEUuXG4gICovXG5cbiAgdXBkYXRlKHNjcm9sbClcbiAge1xuICAgIGNvbnN0IGN1cnJlbnQgPSAoc2Nyb2xsLmN1cnJlbnQgLyB0aGlzLnNjcmVlbi5oZWlnaHQpICogdGhpcy52aWV3cG9ydC5oZWlnaHRcblxuICAgIHRoaXMuZEdyb3VwLnBvc2l0aW9uLnkgPSBjdXJyZW50ICogMC45XG4gICAgdGhpcy5zR3JvdXAucG9zaXRpb24ueSA9IGN1cnJlbnQgKiAxLjBcblxuICAgIHRoaXMucG9ydHJhaXQudXBkYXRlKClcbiAgICB0aGlzLmJhY2tncm91bmQudXBkYXRlKHNjcm9sbClcbiAgICB0aGlzLndvcmtzLmZvckVhY2goZWwgPT4geyBlbC51cGRhdGUoKSB9KVxuICB9XG5cbiAgLypcbiAgICBERVNUUk9ZLlxuICAqL1xuXG4gIGRlc3Ryb3koKVxuICB7XG4gICAgdGhpcy5zY2VuZS5yZW1vdmUodGhpcy5kR3JvdXApXG4gICAgdGhpcy5zY2VuZS5yZW1vdmUodGhpcy5zR3JvdXApXG4gIH1cbn0iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCIzMmE4NjBlNjkwZGI1ZjM2ZGFhNlwiKSJdLCJuYW1lcyI6WyJDaXJjbGUiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJpbmRleCIsInRlbXBsYXRlIiwibGluayIsImdlb21ldHJ5Iiwic2NlbmUiLCJzY3JlZW4iLCJ2aWV3cG9ydCIsInRoaXMiLCJnZW8iLCJjcmVhdGVNYXRlcmlhbCIsImNyZWF0ZVRleHR1cmUiLCJjcmVhdGVNZXNoIiwiY3JlYXRlQm91bmRzIiwiY3JlYXRlQW5pbWF0aW9ucyIsIm1hdGVyaWFsIiwiU2hhZGVyTWF0ZXJpYWwiLCJ2ZXJ0ZXhTaGFkZXIiLCJ2ZXJ0ZXgiLCJmcmFnbWVudFNoYWRlciIsImZyYWdtZW50IiwidW5pZm9ybXMiLCJ0TWFwIiwidmFsdWUiLCJ1X2FscGhhIiwidV9pbWFnZVNpemUiLCJ1X3BsYW5lU2l6ZSIsInVfc3RhdGUiLCJ1X3ZpZXdwb3J0U2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwidHJhbnNwYXJlbnQiLCJzcmMiLCJnZXRBdHRyaWJ1dGUiLCJ0ZXh0dXJlIiwid2luZG93IiwiSU1BR0VfVEVYVFVSRVMiLCJzb3VyY2UiLCJkYXRhIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsInBsYW5lIiwiTWVzaCIsImFkZCIsImJvdW5kcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInVwZGF0ZVNjYWxlIiwidXBkYXRlWCIsInVwZGF0ZVkiLCJzY2FsZSIsIngiLCJ5Iiwib25BbHBoYUNoYW5nZSIsImdzYXAiLCJmcm9tVG8iLCJkZWxheSIsInBhdXNlZCIsIm9uU3RhdGVDaGFuZ2UiLCJkdXJhdGlvbiIsImVhc2UiLCJzaG93IiwicGxheSIsImV2ZW50Q2FsbGJhY2siLCJoaWRlIiwicmV2ZXJzZSIsIm9uUmVzaXplIiwic2l6ZXMiLCJsZWZ0IiwicG9zaXRpb24iLCJ0b3AiLCJ1cGRhdGUiLCJIb21lIiwiZEdyb3VwIiwiR3JvdXAiLCJzR3JvdXAiLCJjcmVhdGVFbGVtZW50cyIsImNyZWF0ZUhlYWRlciIsImNyZWF0ZUZlYXR1cmVkV29yayIsImhvbWVfZWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImhvbWVfd3JhcHBlciIsImhlYWRlckltYWdlIiwiYmFja2dyb3VuZCIsIndvcmtJbWFnZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwicG9ydHJhaXQiLCJEZWxheWVkRWxlbWVudCIsIkJhY2tncm91bmQiLCJ3b3JrcyIsIkFycmF5IiwiZnJvbSIsIlN0YXRpY0VsZW1lbnQiLCJmb3JFYWNoIiwiZWwiLCJzY3JvbGwiLCJjdXJyZW50IiwiZGVzdHJveSIsInJlbW92ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==